(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["app~e525728c"],{

/***/ "iVpH":
/*!*************************************!*\
  !*** ./src/gameCode/GameObjects.js ***!
  \*************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var IgorJs_main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! IgorJs/main */ \"7jDb\");\n/* harmony import */ var Chameleon_main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Chameleon/main */ \"6juG\");\n\n\n/* *\r\n *  Adding workshop entities from player inventory\r\n */\n\nvar PlayerEntity = function PlayerEntity(params, newObj, Igor) {\n  newObj.buffers = {}; //? Copy static data onto entity,\n  //? surely there's a better way to do this...\n\n  Object.assign(newObj, Igor.data.entity[params.name]);\n\n  if (newObj.subType == \"miner\" || newObj.subType == \"crafter\") {\n    newObj.buffers.out = Igor.newComponent(\"entity.buffer\", {\n      dir: 'out'\n    }, newObj);\n  }\n\n  if (newObj.subType == \"crafter\" || newObj.subType == \"research\") {\n    if (newObj.subType == \"research\") {\n      newObj.buffers.in = Igor.newComponent(\"entity.buffer\", {\n        staticStacks: newObj.inputs,\n        dir: 'in'\n      }, newObj);\n      newObj.research_timer = null;\n      newObj.$_tags.push(\"researchTicker\", true);\n    } else {\n      newObj.buffers.in = Igor.newComponent(\"entity.buffer\", {\n        dir: 'in'\n      }, newObj);\n    }\n  }\n\n  newObj.order = params.idx;\n  return [newObj];\n};\n\nPlayerEntity._delete = function (target, Igor) {\n  target.buffers.in && Igor.deleteObject(target.buffers.in);\n  target.buffers.out && Igor.deleteObject(target.buffers.out);\n};\n\nfunction EntityResearchTicker(entity, tickData, Igor) {\n  var research = Igor.getNamedObject(\"research\").progressing;\n  if (!research) return;\n\n  if (Number.isNaN(entity.research_timer) || entity.research_timer === null) {\n    var _buffer$upgrades$load;\n\n    var canConsume = research.cost.ingredients.every(function (_ref) {\n      var name = _ref[0],\n          qty = _ref[1];\n      return Igor.processTEMP(entity.buffers.in, \"inventory.total\", {\n        name: name\n      }) >= qty;\n    });\n    if (!canConsume) return;\n    research.cost.ingredients.forEach(function (_ref2) {\n      var name = _ref2[0],\n          qty = _ref2[1];\n      Igor.processTEMP(entity.buffers.in, \"inventory.consume\", {\n        itemStacks: {\n          name: name,\n          count: qty\n        }\n      });\n    }); //Consume next units to reset timer\n\n    var buffer = Igor.getId(entity.buffers.in);\n    (buffer == null ? void 0 : (_buffer$upgrades$load = buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load.count) && buffer.$_tags.push(\"tick\", \"processing\");\n    entity.research_time = research.cost.time * Igor.config.TICKS_PER_SECOND * entity.researching_speed;\n    entity.research_timer = entity.research_time;\n    return;\n  }\n\n  if (entity.research_timer) {\n    --entity.research_timer;\n  }\n\n  if (entity.research_timer === 0) {\n    Igor.processTEMP(research, \"research.update\", {});\n    entity.research_timer = NaN;\n  }\n\n  Igor.view.signaler.signal(\"bufferUpdate\");\n}\n\nfunction EntityProcessTicker(entity, tickData, Igor) {\n  if (!entity.processing) {\n    entity.$_tags.delete(\"ticking\");\n    return;\n  }\n\n  if (Number.isNaN(entity.process_timer) || entity.process_timer === null) {\n    if (entity.subType == 'miner' || Igor.processTEMP(entity.buffers.in, \"inventory.consume\", {\n      itemStacks: entity.processing.ingredients\n    })) {\n      entity.process_timer = entity.process_ticks;\n    } else {\n      entity.$_tags.delete(\"tick\");\n    }\n\n    return;\n  }\n\n  if (entity.process_timer) {\n    --entity.process_timer;\n  }\n\n  if (entity.process_timer === 0) {\n    var buffer = Igor.getId(entity.buffers.out);\n    var added = Igor.processTEMP(buffer, \"inventory.add\", {\n      itemStacks: entity.buffers.stalled || entity.processing.results || {\n        name: entity.processing.mining_results,\n        count: 1\n      }\n    }); //console.log(added)\n\n    if (added.complete) {\n      var _buffer, _buffer$upgrades$load2, _buffer2, _buffer2$upgrades$loa;\n\n      entity.process_timer = NaN; //Backwards linking... :(\n\n      buffer = Igor.getId(entity.buffers.in);\n      ((_buffer = buffer) == null ? void 0 : (_buffer$upgrades$load2 = _buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load2.count) && buffer.$_tags.push(\"tick\", \"processing\");\n      buffer = Igor.getId(entity.buffers.out);\n      ((_buffer2 = buffer) == null ? void 0 : (_buffer2$upgrades$loa = _buffer2.upgrades.loader) == null ? void 0 : _buffer2$upgrades$loa.count) && buffer.$_tags.push(\"tick\", \"processing\");\n    } else {\n      entity.$_tags.delete(\"tick\");\n    }\n  }\n\n  Igor.view.signaler.signal(\"bufferUpdate\");\n}\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"player.entity\", PlayerEntity, {\n  tick: EntityProcessTicker\n});\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addObjectTickHandler(\"player.entity\", EntityResearchTicker, \"researchTicker\", {\n  chain: [\"tick\", \"researchTicker\"],\n  num: 3\n});\n/* *\r\n * Resource mining\r\n * Player action\r\n*/\n\nvar ResourceMine = function ResourceMine(obj, Igor, self) {\n  if (self.res) {\n    window.clearTimeout(self.timeout);\n    Igor.view.animsUpdate(self.res, null, null);\n    self.res = undefined;\n  } else {\n    self.timeout = window.setTimeout(function () {\n      Igor.processTEMP(obj.player.inventory, \"inventory.add\", {\n        itemStacks: [{\n          name: obj.which.resource.mining_results,\n          count: 1\n        }]\n      });\n      Igor.view.animsUpdate(self.res, null, null);\n      self.res = undefined;\n    }, obj.which.resource.mining_time * 1000);\n    self.res = obj.which.resource;\n    Igor.view.animsUpdate(obj.which.resource, \"isMining\", obj.which.resource.mining_time);\n  }\n};\n\nwindow.ResourceMine = ResourceMine;\nResourceMine.signature = {\n  which: \"resource\",\n  player: \"inventory\"\n};\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"resources.mine\", ResourceMine, ResourceMine.signature);\n/* *\r\n *  Entity Set processing\r\n */\n\nvar EntitySetProcessSig = {\n  at: \"entity\",\n  which: \"process\",\n  type: \"class\",\n  // enum ['mining', 'crafting', 'lab']\n  player: \"inventory\"\n};\n\nvar EntitySetProcess = function EntitySetProcess(obj, Igor) {\n  if (obj.at.entity.processing || obj.which.process == null) {\n    Igor.processTEMP(obj.at.entity, \"entity.clearProcess\", {\n      returnTo: obj.player.inventory\n    });\n    if (!obj.which.process) return;\n  }\n\n  obj.at.entity.processing = obj.which.process;\n  obj.at.entity.$_tags.push(\"tick\", \"processing\");\n\n  if (obj.type.class == \"mining\") {\n    obj.at.entity.process_ticks = obj.which.process.mining_time / obj.at.entity.mining_speed * Igor.config.TICKS_PER_SECOND;\n    obj.at.entity.process_timer = obj.at.entity.process_ticks;\n  } else if (obj.type.class == \"crafting\") {\n    obj.at.entity.process_ticks = obj.which.process.crafting_speed / obj.at.entity.crafting_speed * Igor.config.TICKS_PER_SECOND;\n\n    if (obj.at.entity.buffers.in) {\n      var buffer = Igor.getId(obj.at.entity.buffers.in);\n\n      if (buffer.stacks < obj.which.process.ingredients.length) {\n        return Igor.view.warnToast(\"Recipe exceedes machines ingredient limit\");\n      }\n\n      obj.which.process.ingredients.forEach(function (item, idx) {\n        buffer.items[idx] = {\n          name: item.name,\n          count: 0\n        };\n      });\n    }\n\n    if (obj.at.entity.buffers.out) {\n      var _buffer3 = Igor.getId(obj.at.entity.buffers.out);\n\n      if (_buffer3.stacks < obj.which.process.results.length) {\n        return Igor.view.warnToast(\"Recipe exceedes machines results limit\");\n      }\n\n      obj.which.process.results.forEach(function (item, idx) {\n        _buffer3.items[idx] = {\n          name: item.name,\n          count: 0\n        };\n      });\n    }\n\n    obj.at.entity.process_timer = NaN;\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"entity.setProcess\", EntitySetProcess, EntitySetProcessSig);\n\nfunction EntityClearProcess(entity, args, returnObj, Igor) {\n  if (entity.buffers.in) {\n    if (entity.process_timer) {\n      Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n        itemStacks: entity.processing.ingredients\n      });\n    }\n\n    var buffer = Igor.getId(entity.buffers.in);\n    Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: buffer.items\n    }); //! If args.returnTo is full, 'inventory.add' will fail silently\n\n    buffer.items.length = 0;\n    buffer.xferStack = 0;\n    buffer.stalled = false;\n  }\n\n  if (entity.buffers.out) {\n    var _buffer4 = Igor.getId(entity.buffers.out);\n\n    Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: _buffer4.items\n    }); //! If args.returnTo is full, 'inventory.add' will fail silently\n\n    _buffer4.items.length = 0;\n    _buffer4.xferStack = 0;\n    _buffer4.stalled = false;\n  }\n\n  if (entity.buffers.stalled) {\n    Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: entity.buffers.stalled\n    });\n    entity.buffers.stalled = null;\n  }\n\n  entity.processing = null;\n}\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addOperation(\"entity.clearProcess\", EntityClearProcess);\n/*\r\n  Buffers\r\n */\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"entityBuffer.sizeExpansionCost\", [{\n  name: \"iron-chest\",\n  count: 1\n}]);\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"entityBuffer.xferExpansionCost\", [{\n  name: \"inserter\",\n  count: 1\n}]);\n\nvar NewEntityBuffer = function NewEntityBuffer(params, newObj, Igor) {\n  var _params$staticStacks, _params$staticStacks2;\n\n  newObj.upgrades = {};\n  newObj.maxStacks = ((_params$staticStacks = params.staticStacks) == null ? void 0 : _params$staticStacks.length) || params.stacks || 1;\n  newObj.stackSize = params.stackSize || 5;\n  newObj.items = ((_params$staticStacks2 = params.staticStacks) == null ? void 0 : _params$staticStacks2.map(function (x) {\n    return {\n      name: x,\n      count: 0\n    };\n  })) || [];\n  newObj.xfer = 0;\n  newObj.xferTicks = 120;\n  newObj.xferStack = 0;\n  newObj.busShift = 0;\n  newObj.xferTimer = NaN;\n  newObj.restrictable = params.restrictable || false;\n  newObj.connection = null;\n  newObj.dir = params.dir;\n  newObj.active = false;\n  return [newObj];\n};\n\nNewEntityBuffer._delete = function (obj, Igor) {\n  var _obj$upgrades$bufferS, _obj$upgrades$loader;\n\n  var inv = Igor.getNamedObject(\"player.inventory\");\n  ((_obj$upgrades$bufferS = obj.upgrades.bufferSize) == null ? void 0 : _obj$upgrades$bufferS.count) && Igor.processTEMP(inv, \"inventory.add\", {\n    itemStacks: Igor.getStatic(\"entityBuffer.sizeExpansionCost\"),\n    multi: obj.upgrades.bufferSize.count\n  });\n  ((_obj$upgrades$loader = obj.upgrades.loader) == null ? void 0 : _obj$upgrades$loader.count) && Igor.processTEMP(inv, \"inventory.add\", {\n    itemStacks: Igor.getStatic(\"entityBuffer.xferExpansionCost\"),\n    multi: obj.upgrades.loader.count\n  });\n};\n\nvar EntityBufferActions = {};\n\nEntityBufferActions.Collect = function (obj, Igor) {\n  var _buffer$upgrades$load3;\n\n  var buffer = Igor.getId(obj.which.buffer);\n  var idx = buffer.items.findIndex(function (x) {\n    return x.name == obj.item.name;\n  });\n\n  if (idx == -1) {\n    console.warn(\"Didnt' find the right index\");\n    debugger;\n  }\n\n  if (buffer.items[idx].count === 0) return;\n  Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n    itemStacks: buffer.items[idx]\n  });\n  buffer.items[idx].count = 0;\n  Igor.getId(buffer.$_parent).$_tags.push(\"tick\", \"processing\");\n  Igor.view.signaler.signal(\"bufferUpdate\");\n  ((_buffer$upgrades$load3 = buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load3.count) && buffer.$_tags.push(\"tick\", \"processing\");\n};\n\nEntityBufferActions.Collect.signature = {\n  which: 'buffer',\n  item: 'name'\n};\nEntityBufferActions.Collect.CC_provide = \"entity.bufferCollect\";\n\nEntityBufferActions.Fill = function (obj, Igor) {\n  var _buffer$upgrades$load4;\n\n  var buffer = Igor.getId(obj.which.buffer);\n  var idx = buffer.items.findIndex(function (x) {\n    return x.name == obj.item.name;\n  });\n\n  if (idx == -1) {\n    console.warn(\"Didnt' find the right index\");\n    debugger;\n  }\n\n  var avail = Igor.processTEMP(\"player.inventory\", \"inventory.total\", {\n    name: buffer.items[idx].name\n  });\n  if (avail === 0) return;\n  var toMove = obj.service.rounder.calc(buffer.items[idx].count, buffer.stackSize, avail);\n  Igor.processTEMP(\"player.inventory\", \"inventory.consume\", {\n    itemStacks: {\n      name: buffer.items[idx].name,\n      count: toMove\n    }\n  });\n  buffer.items[idx].count += toMove;\n  Igor.getId(buffer.$_parent).$_tags.push(\"tick\", \"processing\");\n  Igor.view.signaler.signal(\"bufferUpdate\");\n  ((_buffer$upgrades$load4 = buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load4.count) && buffer.$_tags.push(\"tick\", \"processing\");\n};\n\nEntityBufferActions.Fill.signature = {\n  which: 'buffer',\n  item: 'name',\n  service: 'rounder'\n};\nEntityBufferActions.Fill.CC_provide = \"entity.bufferFill\";\n\nEntityBufferActions.ClickCycle = function (obj, Igor) {\n  // The purpose is to cycle between buffer_fill and buffer_collect\n  var buffer = Igor.getId(obj.which.buffer);\n  var itemElm = buffer.items.find(function (x) {\n    return x.name == obj.item.name;\n  });\n  debugger;\n};\n\nEntityBufferActions.ClickCycle.signature = {\n  which: 'buffer',\n  item: 'name',\n  service: 'rounder'\n};\nEntityBufferActions.ClickCycle.CC_provide = \"entity.bufferCycle\";\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"entity.buffer.BUFFER_SIZE\", [5, 10, 20, 30, 40, 50]);\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"entity.buffer.BUFFER_SIZE.MAX\", 50);\n\nEntityBufferActions.Upgrade = function (obj, Igor) {\n  var buffer = Igor.getId(obj.which.buffer);\n\n  if (obj.type.string == \"autoload\") {\n    var _buffer$upgrades$load5;\n\n    if (((_buffer$upgrades$load5 = buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load5.count) >= 10) return Igor.view.warnToast(\"Loaders full\");\n    if (!Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n      itemStacks: {\n        name: \"inserter\",\n        count: 1\n      }\n    })) return Igor.view.warnToast(\"Inserter required\");\n    !buffer.upgrades.loader && (buffer.upgrades.loader = {\n      count: 0\n    });\n    buffer.upgrades.loader.count++;\n    buffer.xferTimer || (buffer.xferTimer = buffer.xferTicks);\n    buffer.xfer++;\n    buffer.active = true;\n    buffer.$_tags.push(\"tick\", \"processing\");\n  } else if (obj.type.string == \"buffer\") {\n    var _buffer$upgrades$buff;\n\n    if (((_buffer$upgrades$buff = buffer.upgrades.bufferSize) == null ? void 0 : _buffer$upgrades$buff.count) >= 6) return Igor.view.warnToast(\"Chests full\");\n    if (!Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n      itemStacks: {\n        name: \"iron-chest\",\n        count: 1\n      }\n    })) return Igor.view.warnToast(\"Iron chest required\");\n    !buffer.upgrades.bufferSize && (buffer.upgrades.bufferSize = {\n      count: 0\n    });\n    buffer.upgrades.bufferSize.count++;\n    buffer.stackSize = Igor.getStatic(\"entity.buffer.BUFFER_SIZE\")[buffer.upgrades.bufferSize.count] || Igor.getStatic(\"entity.buffer.BUFFER_SIZE.MAX\");\n  }\n};\n\nEntityBufferActions.Upgrade.signature = {\n  which: \"buffer\",\n  type: \"string\",\n  player: 'inventory'\n};\nEntityBufferActions.Upgrade.CC_provide = \"entity.bufferUpgrade\";\n\nEntityBufferActions.SetRestrictions = function (target, args, returnObj, Igor) {\n  if (!target.restrictable) returnObj._result = false; //check through the list and return things to player buffer\n\n  var connected = [];\n  var emptyIdxs = [];\n  target.maxStacks = args.list.length;\n\n  for (var idx = 0; idx < target.items.length; idx++) {\n    var x = target.items[idx];\n\n    if (!x) {\n      emptyIdxs.push(idx);\n      continue;\n    }\n\n    if (!args.list.includes(x.name)) {\n      if (x.count > 0) Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n        itemStacks: x\n      });\n      target.items.splice(idx, 1, undefined);\n      emptyIdxs.push(idx);\n    } else {\n      connected.push(x.name);\n      x.restricted = true;\n    }\n  } //console.log(emptyIdxs)\n\n\n  args.list.forEach(function (x) {\n    if (!connected.includes(x)) {\n      if (emptyIdxs.length > 0) {\n        target.items.splice(emptyIdxs.splice(0, 1), 1, {\n          name: x,\n          count: 0,\n          restricted: true\n        }); //console.log(\"restricted splice \"+x)\n      } else {\n        target.items.push({\n          name: x,\n          count: 0,\n          restricted: true\n        }); //console.log('push restricted:'+x)\n      }\n    }\n  });\n};\n\nEntityBufferActions.SetRestrictions.Igor_operation = \"buffer.restrictList\";\n\nEntityBufferActions.HasRestriction = function (target, args, returnObj, Igor) {\n  if (!target.restrictable) returnObj._result = false;else {\n    target.items.forEach(function (x) {\n      if (x.name == args.itemName) {\n        if (x.restrictedBy.includes(args.lineId)) {\n          returnObj._result = {\n            found: true,\n            restricted: true\n          };\n        } else {\n          returnObj._result = {\n            found: true,\n            restricted: false\n          };\n        }\n      }\n    });\n  }\n  !returnObj._result && (returnObj._result = {\n    found: false,\n    restricted: false\n  });\n};\n\nEntityBufferActions.HasRestriction.Igor_operation = \"buffer.hasRestriction\";\n\nEntityBufferActions.ClearRestriction = function (target, args, returnObj, Igor) {\n  if (!target.restrictable) returnObj._result = false;\n  var idx = -1;\n\n  while (!(\"_result\" in returnObj)) {\n    var x = target.items[++idx];\n\n    if (x.name == args.itemName) {\n      x.restrictedBy.splice(x.restrictedBy.indexOf(args.lineId), 1);\n\n      if (x.restrictedBy.length == 0) {\n        target.items[idx] = null;\n        returnObj._result = {\n          found: true,\n          cleared: true\n        };\n      } else {\n        returnObj._result = {\n          found: true,\n          cleared: false\n        };\n      }\n    }\n  }\n\n  !returnObj._result && (returnObj._result = {\n    found: false,\n    cleared: false\n  });\n};\n\nEntityBufferActions.ClearRestriction.Igor_operation = \"buffer.clearRestriction\";\n\nEntityBufferActions.BusXfer = function (target, args, returnObj, Igor) {\n  //TODO need better protections for transfers\n  //TODO need to handle different item stacks\n  // setup filter priorities for output \n  if (args.toBus) {\n    while (args.xferCount > 0) {\n      if (!target.items[target.busShift]) return null;\n      var added = Igor.processTEMP(args.toBus, \"inventory.add\", {\n        itemStacks: [{\n          name: target.items[target.busShift].name,\n          count: args.xferCount\n        }]\n      });\n\n      if (added.complete) {\n        Igor.processTEMP(target, \"inventory.consume\", {\n          itemStacks: [{\n            name: target.items[target.busShift].name,\n            count: args.xferCount\n          }]\n        });\n        args.xferCount = 0;\n      } else if (added.part[0].count == args.xferCount) {\n        returnObj.full = true;\n        return;\n      } else {\n        Igor.processTEMP(target, \"inventory.consume\", {\n          itemStacks: [{\n            name: target.items[target.busShift].name,\n            count: args.xferCount - added.part[0].count\n          }]\n        });\n        args.xferCount = added.part[0].count;\n      }\n\n      ++target.busShift == target.items.length && (target.busShift = 0);\n    }\n\n    returnObj.complete = true;\n  } else if (args.fromBus) {\n    var loops = 0;\n\n    while (args.xferCount > 0) {\n      if (!target.items[target.busShift]) return null;\n      var space = target.stackSize - target.items[target.busShift].count;\n\n      if (space) {\n        var consumed = Igor.processTEMP(args.fromBus, \"inventory.consume\", {\n          itemStacks: [{\n            name: target.items[target.busShift].name,\n            count: Math.min(args.xferCount, space)\n          }],\n          partial: true\n        });\n\n        if (consumed[0].count > 0) {\n          Igor.processTEMP(target, \"inventory.add\", {\n            itemStacks: [{\n              name: target.items[target.busShift].name,\n              count: consumed[0].count\n            }]\n          });\n          args.xferCount -= consumed[0].count;\n        }\n      }\n\n      if (++loops == target.items.length) {\n        returnObj.full = true;\n        return;\n      }\n\n      ++target.busShift == target.items.length && (target.busShift = 0);\n    }\n\n    returnObj.complete = true;\n  } else {\n    console.warn(\"BusXfer called __ no bus target\");\n  }\n};\n\nEntityBufferActions.BusXfer.Igor_operation = \"buffer.busXfer\";\n\nEntityBufferActions.BufferStalled = function (buffer, args, returnObj, Igor) {\n  /* more advanced stall handling, then return*/\n  //console.log('stalled start'+buffer.items.length)\n  buffer.stalled = true;\n  buffer.xferTimer = Math.floor(buffer.xferTicks / 6);\n  ++buffer.xferStack == buffer.items.length && (buffer.xferStack = 0);\n};\n\nEntityBufferActions.BufferStalled.Igor_operation = \"buffer.setStall\";\n\nEntityBufferActions.tick = function (buffer, tickData, Igor) {\n  if (buffer.items.length == 0 || !buffer.active) return;\n  if (buffer.xferTimer) return buffer.xferTimer--; //Surely a more elegant way to run this...\n  //TODO need to alter stacks if not completely xferd\n\n  if (buffer.dir == 'in') {\n    var toAdd = Math.min(buffer.xfer, buffer.stackSize - buffer.items[buffer.xferStack].count);\n    if (toAdd == 0) return Igor.processTEMP(buffer, \"buffer.setStall\");\n    var acquired = Igor.processTEMP(\"player.inventory\", \"inventory.consume\", {\n      itemStacks: {\n        name: buffer.items[buffer.xferStack].name,\n        count: toAdd\n      },\n      partial: true\n    });\n    if (acquired[0].count == 0) return Igor.processTEMP(buffer, \"buffer.setStall\");\n    buffer.items[buffer.xferStack].count += acquired[0].count;\n  } else {\n    var xfer = buffer.items[buffer.xferStack];\n    var added = Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: {\n        name: xfer.name,\n        count: Math.min(xfer.count, buffer.xfer)\n      },\n      stackLimit: 1\n    }); //console.log(added)\n\n    if (!added.complete) return Igor.processTEMP(buffer, \"buffer.setStall\");\n    xfer.count -= Math.min(xfer.count, buffer.xfer); //\n  }\n\n  ++buffer.xferStack == buffer.items.length && (buffer.xferStack = 0);\n  buffer.xferTimer = buffer.xferTicks;\n  buffer.stalled = false;\n  Igor.getId(buffer.$_parent).$_tags.push(\"tick\", \"processing\");\n  Igor.view.signaler.signal(\"bufferUpdate\");\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"entity.buffer\", NewEntityBuffer, EntityBufferActions);\n/*\r\n *  Research Related\r\n *\r\n */\n\nvar SetResearchSig = {\n  \"which\": \"tech\",\n  \"global\": \"game\"\n};\n\nvar SetResearch = function SetResearch(obj, Igor, self) {\n  obj.global.game.research.progressing = obj.which.tech;\n  obj.global.game.research.progressing.completeUnits = 0;\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"research.set\", SetResearch, SetResearchSig);\nvar ClearResearchSig = {\n  \"global\": \"game\"\n};\n\nvar ClearResearch = function ClearResearch(obj, Igor, self) {\n  obj.global.game.research.progressing = null;\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"research.clear\", ClearResearch, ClearResearchSig); //Returns extra portion, but I don't have a good solution\n//To adding it back to the factoryBlock\n\nvar ResearchUpdate = function ResearchUpdate(obj, args, returnObj, Igor) {\n  var global = Igor.getNamedObject(\"global\");\n  obj.completeUnits += args.count || 1;\n\n  if (obj.completeUnits >= obj.cost.count) {\n    Igor.view.goodToast(\"Research Complete: \" + obj.name);\n    returnObj._result = obj.completeUnits - obj.cost.count;\n    Igor.getNamedObject(\"research\").progressing = null;\n    obj.researched = true;\n    global.research.completed[obj.name] = true;\n    obj.unlocks.forEach(function (item) {\n      typeof item === 'string' && Igor.processTEMP(item, \"recipe.unlock\");\n      typeof item === 'object' && Igor.processTEMP(item, \"feature.unlock\");\n    });\n    var cost = obj.cost.ingredients.map(function (_ref3) {\n      var name = _ref3[0],\n          qty = _ref3[1];\n      return {\n        name: name,\n        count: qty\n      };\n    }); //TODO! need to update this to respond to different tech trees\n\n    global.player.workshop.entities.forEach(function (x) {\n      var ent = Igor.getId(x);\n\n      if (ent.name == \"lab\") {\n        Igor.processTEMP(ent.buffers.in, \"inventory.add\", {\n          itemStacks: cost,\n          force: true\n        });\n        ent.research_timer = NaN;\n      }\n    });\n    global.facBlocks.techBlocks.forEach(function (x) {\n      if (args.me == x) return;\n      var block = Igor.getId(x);\n\n      if (block.research_consumed) {\n        Igor.processTEMP(block.buffers.in, \"inventory.add\", {\n          itemStacks: cost,\n          force: true,\n          multi: research_consumed\n        });\n        block.research_consumed = 0;\n        block.research_ticks = NaN;\n      }\n    });\n    Chameleon_main__WEBPACK_IMPORTED_MODULE_1__[\"ChameleonViewer\"].signaler.signal(\"techResearched\");\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addOperation(\"research.update\", ResearchUpdate);\n\nvar RecipeUnlock = function RecipeUnlock(obj, args, returnObj, Igor) {\n  //Igor.data.recipe[obj].enabled = true\n  Igor.getNamedObject(\"global\").unlocked_recipes.push(obj);\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addOperation(\"recipe.unlock\", RecipeUnlock);\n\nvar FeatureUnlock = function FeatureUnlock(obj, args, returnObj, Igor) {\n  var features = Igor.getNamedObject(\"global\").activeFeatures;\n\n  if (features[obj.feature]) {\n    features[obj.feature] = obj;\n  } else {\n    //! needs something more elegant...\n    if (obj.feature == \"factoryBlocks\") {\n      var blocks = Igor.getNamedObject(\"global\").facBlocks.blocks;\n\n      if (obj.blocksMaxSources) {\n        blocks.forEach(function (id) {\n          Igor.getId(id).connections.maxSources = obj.blocksMaxSources;\n        });\n      }\n\n      if (obj.blocksMaxDrains) {\n        blocks.forEach(function (id) {\n          Igor.getId(id).connections.maxDrains = obj.blocksMaxDrains;\n        });\n      }\n    }\n\n    debugger;\n    Object.assign(features[obj.feature], obj);\n  }\n  /*\r\n  adjustFeature(obj) {\r\n    switch(obj.feature) {\r\n      case \"defense\":\r\n        if(!this.activeFeatures[\"defense\"]) {\r\n          this.activeFeatures[\"defense\"] = true\r\n          this.facBlocks.defenses = NamedBlocks.DefenseBlock()\r\n          this.facBlocks.defenseBus = NamedBlocks.DefenseBus()\r\n        }\r\n        this.facBlocks.defenses.machines[\"turret\"] = ChameView.GameObjectFromPointer(obj.go_pointer)  //!!! shouldn't be in Chameleon\r\n        break;\r\n      case \"offense\":\r\n        if(!this.activeFeatures[\"offense\"]) {\r\n          this.activeFeatures[\"offense\"] = true\r\n          this.facBlocks.offenses = NamedBlocks.OffenseBlock()\r\n          this.facBlocks.offenseBus = NamedBlocks.OffenseBus()\r\n        }\r\n        this.facBlocks.offenses.radar = ChameView.GameObjectFromPointer(obj.go_pointer)  //!!! shouldn't be in Chameleon\r\n        break;\r\n      case \"factoryBlocks\":\r\n        this.activeFeatures[\"factoryBlocks\"] = true\r\n    }\r\n    // this.activeFeatures[obj.feature] = obj.level || (this.activeFeatures[obj.feature]+obj.inc) || (this.activeFeatures[obj.feature] * obj.bonus) || true\r\n  }\r\n  */\n\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addOperation(\"feature.unlock\", FeatureUnlock);\n\nvar CraftFromInv = function CraftFromInv(obj, Igor, fn) {\n  if (fn.rec) {\n    window.clearTimeout(fn.timeout);\n    Igor.processTEMP(obj.player.inventory, \"inventory.add\", {\n      itemStacks: fn.rec.ingredients\n    });\n    Chameleon_main__WEBPACK_IMPORTED_MODULE_1__[\"ChameleonViewer\"].animsUpdate(fn.rec, null, null);\n    fn.rec = undefined;\n  } else {\n    if (Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n      itemStacks: obj.which.recipe.ingredients\n    })) {\n      fn.rec = obj.which.recipe;\n      fn.timeout = window.setTimeout(function () {\n        Igor.processTEMP(obj.player.inventory, \"inventory.add\", {\n          itemStacks: fn.rec.results\n        });\n        Chameleon_main__WEBPACK_IMPORTED_MODULE_1__[\"ChameleonViewer\"].animsUpdate(fn.rec, null, null);\n        fn.rec = undefined;\n      }, obj.which.recipe.crafting_speed * 1000);\n      fn.rec = obj.which.recipe;\n      Chameleon_main__WEBPACK_IMPORTED_MODULE_1__[\"ChameleonViewer\"].animsUpdate(fn.rec, \"isCrafting\", obj.which.recipe.crafting_speed);\n    } else {\n      //Error alert: cannot build\n      Igor.view.warnToast(\"Not enough ingredients to craft\");\n      console.log('cannot craft');\n    }\n  }\n};\n\nCraftFromInv.signature = {\n  which: \"recipe\",\n  player: \"inventory\"\n};\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"player.craft\", CraftFromInv, CraftFromInv.signature);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///iVpH\n");

/***/ })

}]);