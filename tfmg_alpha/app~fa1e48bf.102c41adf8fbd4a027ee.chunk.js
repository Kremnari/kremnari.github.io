(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["app~fa1e48bf"],{

/***/ "iVgR":
/*!**********************************!*\
  !*** ./src/gameCode/BaseGame.js ***!
  \**********************************/
/*! exports provided: setupIgor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupIgor\", function() { return setupIgor; });\n/* harmony import */ var IgorJs_main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! IgorJs/main */ \"7jDb\");\n/* harmony import */ var Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Config */ \"463H\");\n/* harmony import */ var gameCode_PlayerWorkshop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gameCode/PlayerWorkshop */ \"Kh/G\");\n/* harmony import */ var gameCode_GameObjects__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gameCode/GameObjects */ \"iVpH\");\n/* harmony import */ var gameCode_inventory_Igor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gameCode/inventory_Igor */ \"uH5N\");\n/* harmony import */ var gameCode_FactoryBlocks__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gameCode/FactoryBlocks */ \"v3/l\");\n\n\n\n\n\n //* these two setup the base game data,\n// possibly combine them to a single function\n//\n\nvar newGame = {\n  land: {\n    total: 100,\n    used: 0,\n    complexity: 0,\n    res_patches: 1,\n    res_patches_used: 0,\n    fac_block_costs: {\n      factory: 100,\n      bus: 100,\n      research: 100\n    }\n  },\n  scanning: {\n    nextCost: 100,\n    currentCost: 0\n  },\n  attackWaves: {\n    nextTimer: 100,\n    nextStrength: 100,\n    currentTimer: 0\n  },\n  facBlocks: {\n    defenses: null,\n    defenseBus: null,\n    offense: null,\n    offenseBus: null,\n    resBlocks: [],\n    buses: [],\n    blocks: [],\n    techBlocks: []\n  },\n  player: gameCode_PlayerWorkshop__WEBPACK_IMPORTED_MODULE_2__[\"newPlayer\"],\n  activeFeatures: {\n    tutorial: true\n  },\n  research: {\n    completed: {},\n    progressing: null\n  },\n  unlocked_recipes: [],\n  version: Config__WEBPACK_IMPORTED_MODULE_1__[\"IDB_SAVE_VERSION\"]\n};\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"#\", newGame); //* This sets up the references Igor needs to run\n\nvar setupIgor = function setupIgor() {} //TODO rebuild Igor's object list,\n// but ideally it happens automatically \n// when loading game object descriptions\n//IgorJs.defineObj(\"#.facBlocks\", \"factoryBlocksBase\")\n//IgorJs.defineObj(\"player\", \"player\")\n//IgorJs.amendObject(\"FactoryBlocksBase\", {tickFn: (td, obj) => { tickBase(td, obj) } })\n//console.log('setup complete')\n\n/*\r\n//SMELL\r\n//This should be split among the individual objects,\r\n// and probably moved to Function() calls\r\nconst tickBase = (tickData, facBlocks) => {\r\n    if(tickData.ticks%100) { return }\r\n    if(facBlocks?.offenses?.machines.radar?.count) {\r\n      this.globals.scanning.currentCost += facBlocks.offenses.machines.radar.count * 1\r\n      if(this.globals.scanning.currentCost>=this.globals.scanning.nextCost) {\r\n        this.globals.scanning.currentCost -= this.globals.scanning.nextCost\r\n        this.globals.scanning.nextCost += 20\r\n        //NYI generate land /resource patch and enemies\r\n        this.globals.land.total += 10\r\n        this.globals.land.res_patches = Math.floor(this.globals.land.total/100)\r\n\r\n      }\r\n    }\r\n    if(facBlocks?.defenses?.machines.turret?.count) {\r\n      //next wave\r\n      if(this.globals.attackWaves.currentTimer>this.globals.attackWaves.nextTimer) {\r\n        this.globals.attackWaves.nextTimer = this.globals.attackWaves.nextTimer ^ 1.2\r\n        this.globals.attackWaves.currentTime = 0\r\n        //Process some attack\r\n      } else {\r\n        this.globals.attackWaves.currentTimer++\r\n      }\r\n    }\r\n}\r\n*/\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaVZnUi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nYW1lQ29kZS9CYXNlR2FtZS5qcz84OTU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SWdvclV0aWxzIGFzIElnb3JKc30gZnJvbSBcIklnb3JKcy9tYWluXCJcclxuaW1wb3J0ICogYXMgQ09ORklHIGZyb20gJ0NvbmZpZydcclxuXHJcbmltcG9ydCAqIGFzIFBsYXllcldvcmtzaG9wIGZyb20gJ2dhbWVDb2RlL1BsYXllcldvcmtzaG9wJ1xyXG5pbXBvcnQgKiBhcyBPYmplY3RzU291cmNlIGZyb20gJ2dhbWVDb2RlL0dhbWVPYmplY3RzJ1xyXG5pbXBvcnQgKiBhcyBJbnZlbnRvcnlJZ29yIGZyb20gJ2dhbWVDb2RlL2ludmVudG9yeV9JZ29yJ1xyXG5pbXBvcnQgKiBhcyBGYWN0b3J5QmxvY2tzIGZyb20gJ2dhbWVDb2RlL0ZhY3RvcnlCbG9ja3MnXHJcblxyXG5cclxuLy8qIHRoZXNlIHR3byBzZXR1cCB0aGUgYmFzZSBnYW1lIGRhdGEsXHJcbi8vIHBvc3NpYmx5IGNvbWJpbmUgdGhlbSB0byBhIHNpbmdsZSBmdW5jdGlvblxyXG4vL1xyXG5jb25zdCBuZXdHYW1lID0ge1xyXG4gICAgbGFuZDoge1xyXG4gICAgICB0b3RhbDogMTAwLFxyXG4gICAgICB1c2VkOiAwLFxyXG4gICAgICBjb21wbGV4aXR5OiAwLFxyXG4gICAgICByZXNfcGF0Y2hlczogMSxcclxuICAgICAgcmVzX3BhdGNoZXNfdXNlZDogMCxcclxuICAgICAgZmFjX2Jsb2NrX2Nvc3RzOiB7XHJcbiAgICAgICAgZmFjdG9yeTogMTAwLFxyXG4gICAgICAgIGJ1czogMTAwLFxyXG4gICAgICAgIHJlc2VhcmNoOiAxMDAsXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzY2FubmluZzoge1xyXG4gICAgICBuZXh0Q29zdDogMTAwLFxyXG4gICAgICBjdXJyZW50Q29zdDogMFxyXG4gICAgfSxcclxuICAgIGF0dGFja1dhdmVzOiB7XHJcbiAgICAgIG5leHRUaW1lcjogMTAwLFxyXG4gICAgICBuZXh0U3RyZW5ndGg6IDEwMCxcclxuICAgICAgY3VycmVudFRpbWVyOiAwLFxyXG4gICAgfSxcclxuICAgIGZhY0Jsb2Nrczoge1xyXG4gICAgICBkZWZlbnNlczogbnVsbCxcclxuICAgICAgZGVmZW5zZUJ1czogbnVsbCxcclxuICAgICAgb2ZmZW5zZTogbnVsbCxcclxuICAgICAgb2ZmZW5zZUJ1czogbnVsbCxcclxuICAgICAgcmVzQmxvY2tzOiBbXSxcclxuICAgICAgYnVzZXM6IFtdLFxyXG4gICAgICBibG9ja3M6IFtdLFxyXG4gICAgICB0ZWNoQmxvY2tzOiBbXVxyXG4gICAgfSxcclxuICAgIHBsYXllcjogUGxheWVyV29ya3Nob3AubmV3UGxheWVyLFxyXG4gICAgYWN0aXZlRmVhdHVyZXM6IHtcclxuICAgICAgdHV0b3JpYWw6IHRydWVcclxuICAgIH0sXHJcbiAgICByZXNlYXJjaDogeyBjb21wbGV0ZWQ6IHt9LCBwcm9ncmVzc2luZzogbnVsbCB9LFxyXG4gICAgdW5sb2NrZWRfcmVjaXBlczogW10sXHJcbiAgICB2ZXJzaW9uOiBDT05GSUcuSURCX1NBVkVfVkVSU0lPTlxyXG59XHJcbklnb3JKcy5kZWZpbmVPYmooXCIjXCIsIG5ld0dhbWUpXHJcblxyXG5cclxuLy8qIFRoaXMgc2V0cyB1cCB0aGUgcmVmZXJlbmNlcyBJZ29yIG5lZWRzIHRvIHJ1blxyXG5leHBvcnQgY29uc3Qgc2V0dXBJZ29yID0gKCkgPT4ge1xyXG4gIC8vVE9ETyByZWJ1aWxkIElnb3IncyBvYmplY3QgbGlzdCxcclxuICAvLyBidXQgaWRlYWxseSBpdCBoYXBwZW5zIGF1dG9tYXRpY2FsbHkgXHJcbiAgLy8gd2hlbiBsb2FkaW5nIGdhbWUgb2JqZWN0IGRlc2NyaXB0aW9uc1xyXG4gIC8vSWdvckpzLmRlZmluZU9iaihcIiMuZmFjQmxvY2tzXCIsIFwiZmFjdG9yeUJsb2Nrc0Jhc2VcIilcclxuICAvL0lnb3JKcy5kZWZpbmVPYmooXCJwbGF5ZXJcIiwgXCJwbGF5ZXJcIilcclxuICAvL0lnb3JKcy5hbWVuZE9iamVjdChcIkZhY3RvcnlCbG9ja3NCYXNlXCIsIHt0aWNrRm46ICh0ZCwgb2JqKSA9PiB7IHRpY2tCYXNlKHRkLCBvYmopIH0gfSlcclxuICAvL2NvbnNvbGUubG9nKCdzZXR1cCBjb21wbGV0ZScpXHJcbn1cclxuXHJcbi8qXHJcbi8vU01FTExcclxuLy9UaGlzIHNob3VsZCBiZSBzcGxpdCBhbW9uZyB0aGUgaW5kaXZpZHVhbCBvYmplY3RzLFxyXG4vLyBhbmQgcHJvYmFibHkgbW92ZWQgdG8gRnVuY3Rpb24oKSBjYWxsc1xyXG5jb25zdCB0aWNrQmFzZSA9ICh0aWNrRGF0YSwgZmFjQmxvY2tzKSA9PiB7XHJcbiAgICBpZih0aWNrRGF0YS50aWNrcyUxMDApIHsgcmV0dXJuIH1cclxuICAgIGlmKGZhY0Jsb2Nrcz8ub2ZmZW5zZXM/Lm1hY2hpbmVzLnJhZGFyPy5jb3VudCkge1xyXG4gICAgICB0aGlzLmdsb2JhbHMuc2Nhbm5pbmcuY3VycmVudENvc3QgKz0gZmFjQmxvY2tzLm9mZmVuc2VzLm1hY2hpbmVzLnJhZGFyLmNvdW50ICogMVxyXG4gICAgICBpZih0aGlzLmdsb2JhbHMuc2Nhbm5pbmcuY3VycmVudENvc3Q+PXRoaXMuZ2xvYmFscy5zY2FubmluZy5uZXh0Q29zdCkge1xyXG4gICAgICAgIHRoaXMuZ2xvYmFscy5zY2FubmluZy5jdXJyZW50Q29zdCAtPSB0aGlzLmdsb2JhbHMuc2Nhbm5pbmcubmV4dENvc3RcclxuICAgICAgICB0aGlzLmdsb2JhbHMuc2Nhbm5pbmcubmV4dENvc3QgKz0gMjBcclxuICAgICAgICAvL05ZSSBnZW5lcmF0ZSBsYW5kIC9yZXNvdXJjZSBwYXRjaCBhbmQgZW5lbWllc1xyXG4gICAgICAgIHRoaXMuZ2xvYmFscy5sYW5kLnRvdGFsICs9IDEwXHJcbiAgICAgICAgdGhpcy5nbG9iYWxzLmxhbmQucmVzX3BhdGNoZXMgPSBNYXRoLmZsb29yKHRoaXMuZ2xvYmFscy5sYW5kLnRvdGFsLzEwMClcclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKGZhY0Jsb2Nrcz8uZGVmZW5zZXM/Lm1hY2hpbmVzLnR1cnJldD8uY291bnQpIHtcclxuICAgICAgLy9uZXh0IHdhdmVcclxuICAgICAgaWYodGhpcy5nbG9iYWxzLmF0dGFja1dhdmVzLmN1cnJlbnRUaW1lcj50aGlzLmdsb2JhbHMuYXR0YWNrV2F2ZXMubmV4dFRpbWVyKSB7XHJcbiAgICAgICAgdGhpcy5nbG9iYWxzLmF0dGFja1dhdmVzLm5leHRUaW1lciA9IHRoaXMuZ2xvYmFscy5hdHRhY2tXYXZlcy5uZXh0VGltZXIgXiAxLjJcclxuICAgICAgICB0aGlzLmdsb2JhbHMuYXR0YWNrV2F2ZXMuY3VycmVudFRpbWUgPSAwXHJcbiAgICAgICAgLy9Qcm9jZXNzIHNvbWUgYXR0YWNrXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5nbG9iYWxzLmF0dGFja1dhdmVzLmN1cnJlbnRUaW1lcisrXHJcbiAgICAgIH1cclxuICAgIH1cclxufVxyXG4qLyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQU5BO0FBWUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUkE7QUFVQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQXRDQTtBQXdDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVZBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///iVgR\n");

/***/ }),

/***/ "v3/l":
/*!***************************************!*\
  !*** ./src/gameCode/FactoryBlocks.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var IgorJs_main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! IgorJs/main */ \"7jDb\");\n/* harmony import */ var Chameleon_main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Chameleon/main */ \"6juG\");\n/* harmony import */ var minimatch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! minimatch */ \"2LKJ\");\n/* harmony import */ var minimatch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(minimatch__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"itemStackCost.busExpansion\", [{\n  name: \"iron-chest\",\n  count: 2\n}]);\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"itemStackCost.busProcessing\", [{\n  name: \"inserter\",\n  count: 2\n}]);\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"itemStackCost.resBlock_foundation\", [{\n  name: \"stone\",\n  count: 5\n}, {\n  name: \"transport-belt\",\n  count: 4\n}]);\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"itemStackCost.resBlock_miner\", [{\n  name: \"burner-mining-drill\",\n  count: 1\n}]);\nvar FactoryBlock = {};\n\nFactoryBlock.New = function (params, newObj, Igor) {\n  var features = Igor.getNamedObject(\"global\").activeFeatures.factoryBlocks;\n  newObj.name = params.name.string;\n  newObj.size = 50;\n  newObj.complexity = 10;\n  newObj.connections = {\n    sources: [],\n    drains: [],\n    maxSources: features.blocksMaxSources || 1,\n    maxDrains: features.blocksMaxDrains || 1\n  };\n  var bufferSettings = {\n    restrictable: true,\n    stacks: 1,\n    stackSize: 10\n  };\n  newObj.buffers = {};\n  newObj.buffers.in = Igor.newComponent(\"entity.buffer\", bufferSettings, newObj);\n  newObj.buffers.internal = Igor.newComponent(\"entity.buffer\", bufferSettings, newObj);\n  newObj.buffers.out = Igor.newComponent(\"entity.buffer\", bufferSettings, newObj);\n  newObj.processingList = {};\n  newObj.subIcon = \"stone\";\n  newObj.factoryLines = [];\n  newObj.factoryLines.push(Igor.newComponent(\"FactoryLine\", {\n    source: newObj.buffers.in,\n    drain: newObj.buffers.out,\n    internal: newObj.buffers.internal,\n    parent: newObj.$_id,\n    order: newObj.factoryLines.length\n  }));\n  newObj.$_tags.push(\"tick\", \"processing\");\n  return [newObj];\n};\n\nFactoryBlock.New.signature = {};\nFactoryBlock.New._signal = \"generalUpdate\";\n\nFactoryBlock.NewCCC = function (params, Igor) {\n  Igor.addNewObject(Igor.getNamedObject(\"global\").facBlocks.blocks, \"FactoryBlock\", params);\n};\n\nFactoryBlock.NewCCC.signature = {\n  name: \"string\"\n};\nFactoryBlock.NewCCC.CC_provide = \"facBlock.newBlock\";\n\nFactoryBlock.NewBusCCC = function (params, Igor) {\n  Igor.addNewObject(Igor.getNamedObject(\"global\").facBlocks.buses, \"FactoryBus\", params);\n};\n\nFactoryBlock.NewBusCCC.signature = {\n  name: \"string\"\n};\nFactoryBlock.NewBusCCC.CC_provide = \"facBlock.newBus\";\n\nFactoryBlock.NewResBlock = function (params, Igor) {\n  if (Igor.addNewObject(Igor.getNamedObject(\"global\").facBlocks.resBlocks, \"ResourceBlock\", params)) {\n    Igor.getNamedObject(\"global\").land.res_patches_used++;\n  }\n};\n\nFactoryBlock.NewResBlock.signature = {\n  name: \"string\" //WIP should become resource vein\n\n};\nFactoryBlock.NewResBlock.CC_provide = \"facBlock.newResBlock\";\n\nFactoryBlock.NewTechBlock = function (params, Igor) {\n  Igor.addNewObject(Igor.getNamedObject(\"global\").facBlocks.techBlocks, \"TechBlock\", params);\n};\n\nFactoryBlock.NewTechBlock.signature = {\n  name: \"string\"\n};\nFactoryBlock.NewTechBlock.CC_provide = \"facBlock.newTechBlock\";\n\nFactoryBlock.__tooltips = function (obj, args, retObj, Igor) {\n  var who = Igor.getId(obj) || null;\n  var data = [];\n  var tip = \"\";\n\n  switch (args.which) {\n    case \"resBlock\":\n      data.landCost = \"resource\";\n      data.complexity = 5;\n      tip = \"Next ResourceBlock\";\n      break;\n\n    case \"techBlock\":\n      data.landCost = 50;\n      data.complexity = 5;\n      tip = \"Next Tech Block\";\n      break;\n\n    case \"busLine\":\n      data.landCost = 25;\n      data.complexity = 5;\n      tip = \"Next Bus Line\";\n      break;\n\n    case \"factoryBlock\":\n      data.landCost = 50;\n      data.complexity = 10;\n      tip = \"Next Factory Block\";\n      break;\n\n    case \"addLine\":\n      data.landCost = \"??\";\n      data.complexity = \"??\";\n      tip = \"New Factory Line\";\n      break;\n  }\n\n  retObj._result = {\n    tool: \"blockCosts\",\n    tip: tip,\n    data: data\n  };\n};\n\nFactoryBlock.__tooltips.CC_utility = \"facBlock.__tooltips\";\n\nFactoryBlock.tick = function (obj, tickData, Igor) {\n  // Process I/O buffers\n  if (obj.connections.drains) {//console.log('process drains: push mode')\n  }\n};\n\nFactoryBlock.tick.signature = {};\n\nFactoryBlock.SelectSubIcon = function (obj, params, Igor) {\n  obj.at.factoryBlock.subIcon = obj.which.icon;\n};\n\nFactoryBlock.SelectSubIcon.signature = {\n  at: \"factoryBlock\",\n  which: \"icon\"\n};\nFactoryBlock.SelectSubIcon.CC_provide = \"factoryBlock.selectSubIcon\";\n\nFactoryBlock.ConsumeStacks = function (target, args, returnObj, Igor) {\n  //WIP\n  var consumable = args.itemStacks.reduce(function (accum_multi, x) {\n    if (accum_multi == -1) return -1;\n    var avail = Igor.processTEMP(Igor.getId(target.processingList[x.name].at).items, \"inventory.total\", {\n      name: x.name\n    });\n    return avail < x.amount ? -1 : Math.min(accum_multi, Math.floor(avail / x.amount));\n  }, args.multi);\n\n  if (consumable >= 1) {\n    args.itemStacks.forEach(function (x) {\n      Igor.processTEMP(Igor.getId(target.processingList[x.name].at), \"inventory.consume\", {\n        itemStacks: x,\n        multi: consumable\n      });\n    });\n  }\n\n  returnObj._result = consumable;\n};\n\nFactoryBlock.ConsumeStacks.signature = {};\nFactoryBlock.ConsumeStacks.Igor_operation = \"factoryBlock.consumeStacks\";\n\nFactoryBlock.ProduceStacks = function (target, args, returnObj, Igor) {\n  var depositable = args.itemStacks.reduce(function (accum_multi, x) {\n    if (accum_multi == -1) return -1; //Shortcircuit\n\n    var buffer = Igor.getId(target.processingList[x.name].at);\n    var avail = buffer.stackSize - Igor.processTEMP(buffer.items, \"inventory.total\", {\n      name: x.name\n    });\n    return avail < x.amount ? -1 : Math.min(accum_multi, Math.floor(avail / x.amount));\n  }, args.multi);\n\n  if (depositable >= 1) {\n    args.itemStacks.forEach(function (x) {\n      Igor.processTEMP(Igor.getId(target.processingList[x.name].at), \"inventory.add\", {\n        itemStacks: x,\n        multi: depositable\n      });\n    });\n  }\n\n  returnObj._result = depositable;\n};\n\nFactoryBlock.ProduceStacks.signature = {};\nFactoryBlock.ProduceStacks.Igor_operation = \"factoryBlock.produceStacks\";\n\nFactoryBlock.SetConnection = function (obj, Igor) {\n  var callFn = obj.dir.string == \"source\" ? \"Drain\" : \"Source\";\n\n  if (obj.at.factoryBlock.connections[obj.dir.string + 's'] == obj.to_which.factoryBus) {\n    Igor.processTEMP(obj.to_which.factoryBus, \"factoryBus.clear\" + callFn, {\n      who: obj.at.factoryBlock.$_id\n    });\n    return;\n  } //Clear prior connection\n  //Can execute on factoryBus...\n\n\n  if (Igor.processTEMP(obj.to_which.factoryBus, \"factoryBus.add\" + callFn, {\n    who: obj.at.factoryBlock.$_id\n  })) {\n    obj.at.factoryBlock.connections[obj.dir.string + 's'] = obj.to_which.factoryBus;\n  }\n\n  Igor.processTEMP(obj.to_which.factoryBus, \"factoryBus.connectTo\", {});\n};\n\nFactoryBlock.SetConnection.signature = {\n  at: \"factoryBlock\",\n  to_which: \"factoryBus\",\n  dir: \"string\"\n};\nFactoryBlock.SetConnection.CC_provide = \"factoryBlock.setConnection\";\n\nFactoryBlock.AddFactoryLine = function (obj, Igor) {\n  // obj.at.factoryBlock.complexity\n  // Inventory.consume some cost\n  obj.at.factoryBlock.factoryLines.push(Igor.newComponent(\"FactoryLine\", {\n    source: obj.at.factoryBlock.buffers.in,\n    drain: obj.at.factoryBlock.buffers.out,\n    internal: obj.at.factoryBlock.buffers.internal,\n    parent: obj.at.factoryBlock.$_id,\n    order: obj.at.factoryBlock.factoryLines.length || 0\n  })); // obj.at.factoryBlock.complexity++\n\n  Igor.view.signaler.signal(\"generalUpdate\");\n};\n\nFactoryBlock.AddFactoryLine.signature = {\n  at: \"factoryBlock\"\n};\nFactoryBlock.AddFactoryLine.CC_provide = \"factoryBlock.addLine\";\n\nFactoryBlock.SetProcessItems = function (target, args, returnObj, Igor) {\n  console.log('set process');\n  args.lists.consume.forEach(function (x) {\n    if (!target.processingList[x]) {\n      target.processingList[x] = {\n        at: target.buffers.in,\n        consume: [args.listId]\n      };\n    } else if (target.processingList[x].at == target.buffers.internal) {\n      target.processingList[x].consume.push(args.listId);\n    } else if (target.processingList[x].at == target.buffers.out) {\n      // Move to internal\n      target.processingList[x].at = target.buffers.internal;\n      target.processingList[x].consume = [];\n      target.processingList[x].consume.push(args.listId);\n    } else {//x is found and at input already\n    }\n  });\n  args.lists.produce.forEach(function (x) {\n    if (!target.processingList[x]) {\n      target.processingList[x] = {\n        at: target.buffers.out,\n        produce: [args.listId]\n      };\n    } else if (target.processingList[x].at == target.buffers.internal) {\n      target.processingList[x].produce.push(args.listId);\n    } else if (target.processingList[x].at == target.buffers.in) {\n      //move it\n      target.processingList[x].at = target.buffers.internal;\n      target.processingList[x].produce = [];\n      target.processingList[x].produce.push(args.listId);\n    }\n  }); //TODO this doesn't respect stack limits on the buffers\n\n  Igor.processTEMP(target.buffers.in, \"buffer.restrictList\", {\n    list: Object.keys(target.processingList).filter(function (x) {\n      return target.processingList[x].at == target.buffers.in;\n    })\n  });\n  Igor.processTEMP(target.buffers.internal, \"buffer.restrictList\", {\n    list: Object.keys(target.processingList).filter(function (x) {\n      return target.processingList[x].at == target.buffers.internal;\n    })\n  });\n  Igor.processTEMP(target.buffers.out, \"buffer.restrictList\", {\n    list: Object.keys(target.processingList).filter(function (x) {\n      return target.processingList[x].at == target.buffers.out;\n    })\n  });\n};\n\nFactoryBlock.SetProcessItems.Igor_operation = \"factoryBlock.setProcessItems\";\n\nFactoryBlock.ClearProcessItems = function (target, args, returnObj, Igor) {\n  args.lists.consume.forEach(function (x) {\n    var which = target.processingList[x];\n    which.consume.splice(which.consume.indexOf(args.listId), 1);\n\n    if (which.consume.length == 0) {\n      var _which$produce;\n\n      if (which.at == target.buffers.internal && ((_which$produce = which.produce) == null ? void 0 : _which$produce.length) > 0) {\n        which.at = target.buffers.out;\n      } else {\n        delete target.processingList[x];\n      }\n    }\n  });\n  args.lists.produce.forEach(function (x) {\n    var which = target.processingList[x];\n    which.produce.splice(which.produce.indexOf(args.listId), 1);\n\n    if (which.produce.length == 0) {\n      var _which$consume;\n\n      if (which.at == target.buffers.internal && ((_which$consume = which.consume) == null ? void 0 : _which$consume.length) > 0) {\n        which.at = target.buffers.in;\n      } else {\n        delete target.processingList[x];\n      }\n    }\n  });\n  Igor.processTEMP(Igor.getId(target.buffers.in), \"buffer.restrictList\", {\n    list: Object.keys(target.processingList).filter(function (x) {\n      return target.processingList[x].at == \"in\";\n    })\n  });\n  Igor.processTEMP(Igor.getId(target.buffers.internal), \"buffer.restrictList\", {\n    list: Object.keys(target.processingList).filter(function (x) {\n      return target.processingList[x].at == \"internal\";\n    })\n  });\n  Igor.processTEMP(Igor.getId(target.buffers.out), \"buffer.restrictList\", {\n    list: Object.keys(target.processingList).filter(function (x) {\n      return target.processingList[x].at == \"out\";\n    })\n  });\n};\n\nFactoryBlock.ClearProcessItems.Igor_operation = \"factoryBlock.clearProcessItems\";\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"FactoryBlock\", FactoryBlock.New, FactoryBlock);\n/*\r\n    Factory Line\r\n*/\n\nvar FactoryLine = {};\n\nFactoryLine.New = function (params, newObj, Igor) {\n  newObj.prepped = 0;\n  newObj.built = 0;\n  newObj.buildingType = null;\n  newObj.recipe = null;\n  newObj.itemTargets = null;\n  newObj.processing_time = -1;\n  newObj.connections = {\n    source: params.source,\n    drain: params.drain,\n    internal: params.internal\n  };\n  newObj.order = params.order;\n  newObj.$_parent = params.parent;\n  return [newObj];\n};\n\nFactoryLine.New.signature = {\n  source: 'entity.buffer',\n  drain: 'entity.buffer',\n  internal: 'entity.buffer'\n};\nFactoryLine.New._signal = \"generalUpdate\";\n\nFactoryLine.__delete = function (obj, Igor) {\n  obj.$_tags.delete(\"tick\");\n  Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n    itemStacks: {\n      name: obj.buildingType,\n      count: obj.built\n    }\n  });\n  var foundation = Igor.processTEMP(obj, \"factoryLine.toolTips\", {\n    which: \"foundation\"\n  }).data;\n  Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n    itemStacks: foundation,\n    multi: obj.built + obj.prepped\n  });\n\n  if (obj.processing_count) {\n    Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: obj.rescipe.ingredients,\n      multi: obj.processing_count\n    });\n  }\n\n  var parent = Igor.getId(obj.$_parent);\n  var idx = parent.factoryLines.indexOf(obj.$_id);\n  parent.factoryLines.splice(idx, 1); //TODO adjust land use and complexity\n\n  Igor.view.signaler.signal(\"generalUpdate\");\n};\n\nFactoryLine.__delete.Igor_operation = \"FactoryLine.delete\";\n\nFactoryLine.SetType = function (obj, Igor) {\n  obj.at.factoryLine.buildingType = obj.which.building.name;\n  obj.at.factoryLine.crafting_categories = obj.which.building.crafting_categories; //Create Lookup by building type\n\n  obj.at.factoryLine.foundationCost = [{\n    name: \"stone\",\n    count: 5\n  }];\n};\n\nFactoryLine.SetType.signature = {\n  at: [\"factoryLine\", \"factoryBlock\"],\n  which: \"building\"\n};\nFactoryLine.SetType.CC_provide = \"factoryLine.setBuilding\";\n\nFactoryLine.Prep = function (obj, Igor) {\n  if (!obj.at.factoryLine.foundationCost) return;\n\n  if (Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n    itemStacks: obj.at.factoryLine.foundationCost\n  })) {\n    obj.at.factoryLine.prepped++;\n    obj.at.factoryBlock.size += 10; //# magic number\n\n    obj.at.factoryBlock.complexity += 5; //# magic number\n  } else {\n    Igor.view.warnToast(\"Cannot consume foundation costs\");\n  }\n};\n\nFactoryLine.Prep.signature = {\n  at: [\"factoryLine\", \"factoryBlock\"],\n  player: \"inventory\"\n};\nFactoryLine.Prep.CC_provide = \"factoryLine.prep\";\n\nFactoryLine.Expand = function (obj, Igor) {\n  if (obj.at.factoryLine.prepped == 0) return;\n\n  if (Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n    itemStacks: {\n      name: obj.at.factoryLine.buildingType,\n      count: 1\n    }\n  })) {\n    obj.at.factoryLine.built++;\n    obj.at.factoryLine.prepped--;\n\n    if (obj.at.factoryLine.recipe) {\n      if (Number.isInteger(obj.at.factoryLine.processing_ticks)) {\n        var consumed = Igor.processTEMP(obj.at.factoryBlock, \"factoryBlock.consumeStacks\", {\n          itemStacks: obj.at.factoryLine.recipe.ingredients,\n          multi: 1\n        });\n\n        if (consumed) {\n          obj.at.factoryLine.processing_ticks *= (obj.at.factoryLine.built - 1) / obj.at.factoryLine.built;\n          obj.at.factoryLine.processing_count++;\n        }\n      }\n\n      obj.at.factoryLine.$_tags.push(\"tick\", \"processing\");\n    }\n  } else {\n    Igor.view.warnToast(\"Building not in inventory\");\n  }\n};\n\nFactoryLine.Expand.signature = {\n  at: [\"factoryLine\", \"factoryBlock\"],\n  player: 'inventory'\n};\nFactoryLine.Expand.CC_provide = \"factoryLine.addBuilding\";\n/*\r\n*/\n\nFactoryLine.SetRecipe = function (obj, Igor) {\n  if (obj.at.factoryLine.recipe) {\n    if (obj.at.factoryLine.recipe !== obj.which.recipe) {\n      Igor.processTEMP(obj.at.factoryBlock, \"factoryBlock.clearProcessItems\", {\n        lists: obj.at.factoryLine.processList\n      });\n    } else {\n      obj.at.factoryLine.recipe = null;\n      obj.at.factoryLine.$_tags.delete(\"tick\");\n      return;\n    }\n  }\n\n  var recipe = Igor.data.recipe[obj.which.recipe];\n  var lists = {\n    consume: recipe.ingredients.map(function (x) {\n      return x.name;\n    }),\n    produce: recipe.results.map(function (x) {\n      return x.name;\n    })\n  };\n  var FB_set = Igor.processTEMP(obj.at.factoryBlock, \"factoryBlock.setProcessItems\", {\n    lists: lists,\n    listId: obj.at.factoryLine.$_id\n  });\n\n  if (FB_set) {\n    obj.at.factoryLine.processList = lists;\n    obj.at.factoryLine.recipe = recipe; // store full object, not argument from obj.which.recipe\n\n    obj.at.factoryLine.processing_time = recipe.crafting_speed / Igor.data.entity[obj.at.factoryLine.buildingType].crafting_speed * Igor.getStatic(\"config.TICKS_PER_SECOND\");\n    obj.at.factoryLine.processing_ticks = NaN;\n    obj.at.factoryLine.built && obj.at.factoryLine.$_tags.push(\"tick\", \"processing\"); //Just wait till next tick to start processing the recipe\n  } else {\n    // Factory Block set failed...\n    console.error(\"Couldn't set my items on the parent factoryBlock\");\n    debugger;\n  }\n};\n\nFactoryLine.SetRecipe.signature = {\n  at: [\"factoryLine\", \"factoryBlock\"],\n  which: \"recipe\",\n  player: \"inventory\"\n};\nFactoryLine.SetRecipe.CC_provide = \"factoryLine.setRecipe\";\n\nFactoryLine.__tooltips = function (obj, args, ret, Igor) {\n  var who = Igor.getId(obj);\n  var data = [];\n  var tip = \"\";\n\n  switch (args.which) {\n    case \"foundation\":\n      data.push({\n        name: \"stone\",\n        count: 5\n      });\n      tip = \"Foundation Cost\";\n      break;\n  }\n\n  ret._result = {\n    tool: \"stackArray\",\n    tip: tip,\n    data: data\n  };\n};\n\nFactoryLine.__tooltips.Igor_operation = \"factoryLine.toolTips\";\nFactoryLine.__tooltips.CC_utility = \"factoryLine.toolTips\";\n\nFactoryLine.tick = function (entity, tickdata, Igor) {\n  if (entity.built == 0 || !entity.processing_time || !entity.recipe) return; //TODO turn this into an \"anti-tick\" tag\n  //consume from buffers if empty\n\n  if (entity.delay) {\n    if (--entity.delay == 0) {\n      entity.delay = null;\n    }\n\n    return;\n  }\n\n  if (Number.isNaN(entity.processing_ticks)) {\n    var consumed = Igor.processTEMP(entity.$_parent, \"factoryBlock.consumeStacks\", {\n      itemStacks: entity.recipe.ingredients,\n      multi: entity.built\n    });\n\n    if (consumed > 0) {\n      entity.processing_ticks = 0;\n      entity.processing_count = consumed;\n    } else {\n      entity.delay = Math.ceil(entity.processing_time * 0.1);\n    }\n  } else if (entity.processing_ticks >= entity.processing_time) {\n    var added = Igor.processTEMP(entity.$_parent, \"factoryBlock.produceStacks\", {\n      itemStacks: entity.recipe.results,\n      multi: entity.processing_count\n    });\n\n    if (added > 0) {\n      entity.processing_ticks = NaN;\n    } else {\n      // Couldn't deposit all so... try again after a delay\n      entity.delay = Math.ceil(entity.processing_time * 0.1);\n    }\n  } else {\n    entity.processing_ticks++;\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"FactoryLine\", FactoryLine.New, FactoryLine);\n/**\r\n *  * Factory Bus\r\n *  TODO: source/drains are managed from factoryBlocks\r\n *  TODO: Ticker to move things between buffers\r\n *  TODO: Upgrades and expansions\r\n * \r\n */\n\nvar FactoryBus = {};\n\nFactoryBus.New = function (params, newObj, Igor) {\n  newObj.name = params.name.string;\n  newObj.size = 25;\n  newObj.complexity = 5;\n  newObj.connections = {\n    sources: [],\n    drains: [],\n    maxSources: 0,\n    maxDrains: 0\n  };\n  newObj.processors = {\n    source: {\n      xferTicks: 120,\n      xferTimer: 0,\n      xferTarget: 0,\n      xferQty: 0\n    },\n    drain: {\n      xferTicks: 120,\n      xferTimer: 0,\n      xferTarget: 0,\n      xferQty: 0\n    },\n    central: Igor.newComponent(\"entity.buffer\", {\n      stacks: 1,\n      stackSize: 10\n    }, newObj.$_id)\n  };\n  newObj.clogged = false;\n  newObj.subIcon = \"stone\"; // newObj.$_tags.push(\"tick\", \"processing\")\n\n  return [newObj];\n};\n\nFactoryBus.New._signal = \"generalUpdate\";\n\nFactoryBus.SelectSubIcon = function (obj, params, Igor) {\n  obj.at.factoryBus.subIcon = obj.which.icon;\n};\n\nFactoryBus.SelectSubIcon.signature = {\n  at: \"factoryBus\",\n  which: \"icon\"\n};\nFactoryBus.SelectSubIcon.CC_provide = \"factoryBus.selectSubIcon\";\n\nFactoryBus.ClearConnection = function (target, args, returnObj, Igor) {\n  var conn = args.dir == \"sources\" ? \"drains\" : \"sources\";\n  var idx = target.connections[conn].findIndex(function (x) {\n    return x.buffer == args.id;\n  });\n\n  if (idx == -1) {\n    console.log(\"couldn't find index\");\n    debugger;\n  }\n\n  target.connections[conn].splice(idx, 1);\n  target.processors[conn].xferTarget = 0;\n};\n\nFactoryBus.ClearConnection.Igor_operation = \"factoryBus.clearConnection\";\n\nFactoryBus.ConnectTo = function (obj, Igor) {\n  var bus = Igor.getId(obj.connectTo.factoryBus);\n  var block = Igor.getId(obj.connectTo.block);\n\n  if (obj.dir.string == \"output\") {\n    //target drain, bus source\n    if (obj.current.bus != -1 && block.connections.drains.includes(obj.current.bus)) {\n      var idx = block.connections.drains.indexOf(obj.current.bus);\n      block.connections.drains.splice(idx, 1);\n      var curr = Igor.getId(obj.current.bus);\n      idx = curr.connections.sources.indexOf(block.$_id);\n      curr.connections.sources.splice(idx, 1);\n      curr.processors.source.xferTarget = 0;\n    }\n\n    if (block.connections.drains.length < block.connections.maxDrains && bus.connections.sources.length < bus.connections.maxSources) {\n      block.connections.drains.push(obj.connectTo.factoryBus);\n      bus.connections.sources.push(obj.connectTo.block);\n    } else {\n      Igor.view.warnToast(\"No available source connections\");\n    }\n  } else {\n    //target source, bus drain\n    if (obj.current.bus != -1 && block.connections.sources.includes(obj.current.bus)) {\n      var _idx = block.connections.sources.indexOf(obj.current.bus);\n\n      block.connections.sources.splice(_idx, 1);\n\n      var _curr = Igor.getId(obj.current.bus);\n\n      _idx = _curr.connections.drains.indexOf(block.$_id);\n\n      _curr.connections.drains.splice(_idx, 1);\n\n      _curr.processors.drain.xferTarget = 0;\n    }\n\n    if (block.connections.sources.length < block.connections.maxSources && bus.connections.drains.length < bus.connections.maxDrains) {\n      block.connections.sources.push(obj.connectTo.factoryBus);\n      bus.connections.drains.push(obj.connectTo.block);\n    } else {\n      Igor.view.warnToast(\"No available drain connections\");\n    }\n  }\n\n  Igor.view.signaler.signal(\"generalUpdate\");\n};\n\nFactoryBus.ConnectTo.signature = {\n  dir: \"string\",\n  connectTo: [\"factoryBus\", \"block\"],\n  current: \"bus\"\n};\nFactoryBus.ConnectTo.CC_provide = \"factoryBus.connectTo\";\n\nFactoryBus.ExpandBus = function (obj, Igor) {\n  var consumed = Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n    itemStacks: Igor.getStatic(\"itemStackCost.busExpansion\")\n  });\n  if (!consumed) return Igor.view.warnToast(\"Unable to consume costs to expand bus\");\n\n  if (obj.dir.string == \"source\") {\n    obj.at.factoryBus.connections.maxSources += 1;\n    obj.at.factoryBus.complexity += 5;\n    obj.at.factoryBus.size += 10;\n  } else if (obj.dir.string == \"drain\") {\n    obj.at.factoryBus.connections.maxDrains += 1;\n    obj.at.factoryBus.size += 10;\n    obj.at.factoryBus.complexity += 5;\n  }\n\n  if (obj.at.factoryBus.connections.maxSources && obj.at.factoryBus.connections.maxDrains) {\n    obj.at.factoryBus.$_tags.push(\"tick\", \"processing\");\n  }\n\n  var central = Igor.getId(obj.at.factoryBus.processors.central);\n  central.maxStacks = Math.min(Math.ceil(obj.at.factoryBus.size / 50), 15);\n};\n\nFactoryBus.ExpandBus.signature = {\n  at: \"factoryBus\",\n  dir: \"string\",\n  player: \"inventory\"\n};\nFactoryBus.ExpandBus.CC_provide = \"factoryBus.expandBus\";\n\nFactoryBus.ExpandProcessing = function (obj, Igor) {\n  var consumed = Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n    itemStacks: Igor.getStatic(\"itemStackCost.busProcessing\")\n  });\n  if (!consumed) return Igor.view.warnToast(\"Unable to consume costs to expand bus\");\n\n  if (obj.dir.string == \"source\") {\n    obj.at.factoryBus.processors.source.xferQty += 2;\n    obj.at.factoryBus.size += 10;\n    obj.at.factoryBus.complexity += 5;\n  } else if (obj.dir.string == \"drain\") {\n    obj.at.factoryBus.processors.drain.xferQty += 2;\n    obj.at.factoryBus.size += 10;\n    obj.at.factoryBus.complexity += 5;\n  }\n};\n\nFactoryBus.ExpandProcessing.signature = {\n  at: \"factoryBus\",\n  dir: \"string\",\n  player: \"inventory\"\n};\nFactoryBus.ExpandProcessing.CC_provide = \"factoryBus.expandProcessing\";\n\nFactoryBus.__tooltips = function (obj, args, ret, Igor) {\n  if (!obj) return;\n  var who = Igor.getId(obj);\n  var data = [];\n  var tip = \"\";\n\n  switch (args.which) {\n    case \"input_processing\":\n      data.push({\n        name: \"inserter\",\n        count: 2\n      });\n      tip = \"Input Processing\";\n      break;\n\n    case \"expand_input_sources\":\n      data.push({\n        name: \"iron-chest\",\n        count: 2\n      });\n      who.connections.maxSources && data.push({\n        name: \"transport-belt\",\n        count: 5 * who.connections.maxSources\n      });\n      tip = \"Expand Source Points\";\n      break;\n\n    case \"output_processing\":\n      data.push({\n        name: \"inserter\",\n        count: 2\n      });\n      tip = \"Output Processing\";\n      break;\n\n    case \"expand_output_drains\":\n      data.push({\n        name: \"iron-chest\",\n        count: 2\n      });\n      who.connections.maxDrains && data.push({\n        name: \"transport-belt\",\n        count: 5 * who.connections.maxDrains\n      });\n      tip = \"Expand Drain Points\";\n      break;\n  }\n\n  ret._result = {\n    tool: \"stackArray\",\n    tip: tip,\n    data: data\n  };\n};\n\nFactoryBus.__tooltips.CC_utility = \"busLine_Costs\";\n\nFactoryBus.ClearClog = function (obj, Igor) {\n  Igor.getId(obj.at.factoryBus.processors.central).items.forEach(function (x) {\n    Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: x\n    });\n    x.count = 0;\n    x.icon = undefined;\n  });\n  obj.at.factoryBus.clogged = false;\n};\n\nFactoryBus.ClearClog.signature = {\n  at: \"factoryBus\"\n};\nFactoryBus.ClearClog.CC_provide = \"factoryBus.clearClog\";\n\nFactoryBus.tick = function (entity, tickdata, Igor) {\n  var _entity$processors$so, _entity$processors$dr;\n\n  if (entity.connections.sources.length > 0 && ((_entity$processors$so = entity.processors.source) == null ? void 0 : _entity$processors$so.xferQty) > 0) {\n    if (entity.processors.source.xferTimer >= entity.processors.source.xferTicks) {\n      var busXfer = Igor.processTEMP(Igor.getId(entity.connections.sources[entity.processors.source.xferTarget], \"buffers.out\"), \"buffer.busXfer\", {\n        xferCount: entity.processors.source.xferQty,\n        toBus: entity.processors.central\n      });\n\n      if (busXfer.full) {\n        entity.clogged = true;\n      }\n\n      ++entity.processors.source.xferTarget == entity.connections.sources.length && (entity.processors.source.xferTarget = 0);\n      entity.processors.source.xferTimer = 0;\n    } else {\n      entity.processors.source.xferTimer++;\n    }\n  }\n\n  if (entity.connections.drains.length > 0 && ((_entity$processors$dr = entity.processors.drain) == null ? void 0 : _entity$processors$dr.xferQty) > 0) {\n    if (entity.processors.drain.xferTimer >= entity.processors.drain.xferTicks) {\n      var _busXfer = Igor.processTEMP(Igor.getId(entity.connections.drains[entity.processors.drain.xferTarget], \"buffers.in\"), \"buffer.busXfer\", {\n        xferCount: entity.processors.drain.xferQty,\n        fromBus: entity.processors.central\n      });\n\n      if (_busXfer.full) {//skip outputting?\n      }\n\n      ++entity.processors.drain.xferTarget == entity.connections.drains.length && (entity.processors.drain.xferTarget = 0);\n      entity.processors.drain.xferTimer = 0;\n    } else {\n      entity.processors.drain.xferTimer++;\n    }\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"FactoryBus\", FactoryBus.New, FactoryBus);\n/*\r\n *  Resource Block\r\n */\n\nvar ResourceBlock = {};\n\nResourceBlock.New = function (params, newObj, Igor) {\n  newObj.name = params.name.string;\n  newObj.patchProperties = {};\n  newObj.spaceUsed = 50;\n  newObj.complexity = 1;\n  newObj.connections = {\n    drains: [],\n    maxDrains: 1\n  };\n  newObj.prepped = 0;\n  newObj.built = 0;\n  newObj.mining_ticks = NaN;\n  newObj.mining_drill = \"burner-mining-drill\";\n  newObj.buffers = {};\n  newObj.buffers.out = Igor.newComponent(\"entity.buffer\", {\n    restrictable: true,\n    stacks: 1,\n    stackSize: 0\n  }, newObj);\n  return [newObj];\n};\n\nResourceBlock.New._signal = \"generalUpdate\";\n\nResourceBlock.SetResource = function (obj, Igor) {\n  var resBlock = obj.at.ResourceBlock;\n\n  if (obj.at.ResourceBlock.patchProperties.resource) {\n    var buffer = Igor.getId(resBlock.buffers.out);\n    Igor.processTEMP(Igor.getNamedObject(\"player.inventory\"), \"inventory.add\", {\n      itemStacks: buffer.items\n    });\n    buffer.items = [];\n  }\n\n  obj.at.ResourceBlock.$_tags.push(\"tick\", \"processing\");\n  obj.at.ResourceBlock.patchProperties.resource = obj.which.resource;\n\n  if (obj.at.ResourceBlock.mining_drill) {\n    obj.at.ResourceBlock.patchProperties.mining_time = Igor.data.resource[obj.which.resource].mining_time / Igor.data.entity[obj.at.ResourceBlock.mining_drill].mining_speed * Igor.getStatic(\"config.TICKS_PER_SECOND\");\n    obj.at.ResourceBlock.mining_ticks = obj.at.ResourceBlock.patchProperties.mining_time;\n    obj.at.ResourceBlock.subIcon = obj.at.ResourceBlock.patchProperties.resource;\n  }\n};\n\nResourceBlock.SetResource.signature = {\n  at: \"ResourceBlock\",\n  which: 'resource'\n};\nResourceBlock.SetResource.CC_provide = \"resBlock.setResource\";\n\nResourceBlock.PrepSpace = function (obj, Igor) {\n  if (Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n    itemStacks: Igor.getStatic('itemStackCost.resBlock_foundation')\n  })) {\n    obj.at.ResourceBlock.prepped++;\n    obj.at.ResourceBlock.spaceUsed += 10;\n    obj.at.ResourceBlock.complexity += 5;\n  } else {\n    Igor.view.warnToast(\"Unable to consume foundation costs\");\n  }\n};\n\nResourceBlock.PrepSpace.signature = {\n  at: \"ResourceBlock\",\n  player: \"inventory\"\n};\nResourceBlock.PrepSpace.CC_provide = \"resBlock.prepSpace\";\n\nResourceBlock.BuildMine = function (obj, Igor) {\n  if (obj.at.ResourceBlock.prepped == 0) return;\n\n  if (Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n    itemStacks: Igor.getStatic('itemStackCost.resBlock_miner')\n  })) {\n    obj.at.ResourceBlock.prepped--;\n    obj.at.ResourceBlock.built++;\n    Igor.getId(obj.at.ResourceBlock.buffers.out).stackSize += 5;\n  } else {\n    return Igor.view.warnToast(\"Mining drill not available\");\n  }\n};\n\nResourceBlock.BuildMine.signature = {\n  at: \"ResourceBlock\",\n  player: \"inventory\"\n};\nResourceBlock.BuildMine.CC_provide = \"resBlock.buildMine\";\n\nResourceBlock.__foundationCost = function (obj, x_null, ret, Igor) {\n  var who = Igor.getId(obj);\n  var is = [{\n    name: \"stone\",\n    count: 5\n  }];\n  is.push({\n    name: \"transport-belt\",\n    count: Math.floor(who.spaceUsed / 10)\n  });\n  ret._result = {\n    tool: 'stackArray',\n    tip: 'Foundation Cost',\n    data: is\n  };\n};\n\nResourceBlock.__foundationCost.CC_utility = \"resBlock.__foundationCost\";\n\nResourceBlock.__minerCost = function (obj, args_null, ret, Igor) {\n  var who = Igor.getId(obj);\n  var is = [{\n    name: who.mining_drill,\n    count: 1\n  }];\n  ret._result = {\n    tool: 'stackArray',\n    tip: 'Foundation Cost',\n    data: is\n  };\n};\n\nResourceBlock.__minerCost.CC_utility = \"resBlock.__minerCost\";\n\nResourceBlock.tick = function (entity, tickdata, Igor) {\n  if (entity.built == 0 || !entity.patchProperties.mining_time) return;\n\n  if (entity.mining_ticks == 0) {\n    var stored = Igor.processTEMP(entity.buffers.out, \"inventory.add\", {\n      itemStacks: {\n        name: entity.patchProperties.resource,\n        count: entity.storedResources || entity.built\n      }\n    });\n    entity.mining_ticks = entity.patchProperties.mining_time;\n  } else {\n    entity.mining_ticks--;\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"ResourceBlock\", ResourceBlock.New, ResourceBlock);\nvar TechBlock = {};\n\nTechBlock.New = function (params, newObj, Igor) {\n  newObj.name = params.name.string;\n  newObj.spaceUsed = 50;\n  newObj.complexity = 10;\n  newObj.prepped = 0;\n  newObj.built = 0;\n  newObj.connections = {\n    sources: [],\n    maxSources: 1\n  };\n  newObj.buffers = {};\n  newObj.buffers.in = Igor.newComponent(\"entity.buffer\", {\n    restrictable: true,\n    stackSize: 10,\n    maxStack: 2\n  }, newObj.$_id);\n  newObj.techTreeClass = \"main\";\n  newObj.subIcon = \"automation-science-pack\";\n  newObj.research_speed = 1;\n  newObj.research_ticks = NaN;\n  newObj.research_time = 0;\n  newObj.buildingType = \"lab\";\n  newObj.foundationType = \"\";\n  return [newObj];\n};\n\nTechBlock.New._signal = \"generalUpdate\";\n\nTechBlock.prepSpace = function (obj, Igor) {\n  if (Igor.processTEMP(\"player.inventory\", \"inventory.consume\", {\n    itemStacks: Igor.processTEMP(obj.at.techBlock, \"techBlock.toolTips\", {\n      which: \"foundation\"\n    }).data\n  })) {\n    obj.at.techBlock.prepped++;\n    obj.at.techBlock.spaceUsed += 10;\n    obj.at.techBlock.complexity += 5;\n  } else {\n    Igor.view.warnToast(\"Not enough materials for foundation\");\n  }\n};\n\nTechBlock.prepSpace.signature = {\n  at: \"techBlock\"\n};\nTechBlock.prepSpace.CC_provide = \"techBlock.prepSpace\";\n\nTechBlock.BuildTech = function (obj, Igor) {\n  if (obj.at.techBlock.prepped == 0) return;\n\n  if (Igor.processTEMP(\"player.inventory\", \"inventory.consume\", {\n    itemStacks: Igor.processTEMP(obj.at.techBlock, \"techBlock.toolTips\", {\n      which: \"buildLab\"\n    }).data\n  })) {\n    obj.at.techBlock.prepped--;\n    obj.at.techBlock.built++;\n    Igor.getId(obj.at.techBlock.buffers.in).stackSize += 5;\n  } else {\n    Igor.view.warnToast(\"Not enough materials to build lab\");\n  }\n\n  if (!obj.at.techBlock.bufferSet) {\n    Igor.processTEMP(obj.at.techBlock.buffers.in, \"buffer.restrictList\", {\n      list: ['automation-science-pack', 'logistic-science-pack']\n    });\n    obj.at.techBlock.bufferSet = true;\n  }\n\n  obj.at.techBlock.$_tags.push(\"tick\", \"processing\");\n};\n\nTechBlock.BuildTech.signature = {\n  at: \"techBlock\"\n};\nTechBlock.BuildTech.CC_provide = \"techBlock.buildLab\";\n\nTechBlock.SetTree = function (obj, Igor) {\n  Igor.view.errorToast(\"Not Yet Implemented\");\n  /*\r\n      set building type\r\n          foundation type\r\n          researching_speed\r\n  */\n};\n\nTechBlock.SetTree.signature = {\n  at: 'techBlock'\n};\nTechBlock.SetTree.CC_provide = \"techBlock.setTree\";\n\nTechBlock.__tooltips = function (obj, args, ret, Igor) {\n  var who = Igor.getId(obj);\n  var data = [];\n  var tip = \"\";\n\n  switch (args.which) {\n    case 'foundation':\n      data.push({\n        name: \"inserter\",\n        count: 2\n      });\n      data.push({\n        name: \"stone\",\n        count: 5\n      });\n      tip = \"Lab foundation\";\n      break;\n\n    case 'buildLab':\n      data.push({\n        name: \"lab\",\n        count: 1\n      });\n      tip = \"Lab building\";\n      break;\n\n    case 3:\n      break;\n  }\n\n  ret._result = {\n    tool: \"stackArray\",\n    tip: tip,\n    data: data\n  };\n};\n\nTechBlock.__tooltips.Igor_operation = \"techBlock.toolTips\";\nTechBlock.__tooltips.CC_utility = \"techBlock.toolTips\";\n\nTechBlock.tick = function (obj, tickData, Igor) {\n  var research = Igor.getNamedObject('research').progressing;\n  if (!research) return;\n\n  if (Number.isNaN(obj.research_ticks) || obj.research_ticks === null) {\n    var cost = research.cost.ingredients.map(function (_ref) {\n      var name = _ref[0],\n          qty = _ref[1];\n      return {\n        name: name,\n        count: qty\n      };\n    });\n    var canConsume = Igor.processTEMP(obj.buffers.in, \"inventory.consume\", {\n      itemStacks: cost,\n      multi: obj.built\n    });\n    obj.research_time = research.cost.time * Igor.getStatic(\"config.TICKS_PER_SECOND\") * obj.research_speed;\n\n    if (!canConsume) {\n      obj.research_consumed = 0;\n      obj.research_ticks = obj.research_time * 0.1;\n      obj.stalled = true;\n      return;\n    }\n\n    obj.stalled = false;\n    obj.research_ticks = obj.research_time;\n    obj.research_consumed = canConsume;\n  } else if (obj.research_ticks) {\n    --obj.research_ticks;\n  } else if (obj.research_ticks <= 0) {\n    if (obj.research_consumed) {\n      var ret = Igor.processTEMP(research, \"research.update\", {\n        count: obj.research_consumed,\n        me: obj.$_id\n      });\n\n      var _cost = research.cost.ingredients.map(function (_ref2) {\n        var name = _ref2[0],\n            qty = _ref2[1];\n        return {\n          name: name,\n          count: qty\n        };\n      });\n\n      Igor.processTEMP(obj.buffers.in, \"inventory.add\", {\n        itemStacks: _cost,\n        force: true,\n        multi: ret\n      });\n    }\n\n    obj.research_ticks = NaN;\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"TechBlock\", TechBlock.New, TechBlock);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///v3/l\n");

/***/ })

}]);