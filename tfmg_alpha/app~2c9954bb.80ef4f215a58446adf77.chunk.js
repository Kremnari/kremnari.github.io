(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["app~2c9954bb"],{

/***/ "iVpH":
/*!*************************************!*\
  !*** ./src/gameCode/GameObjects.js ***!
  \*************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var IgorJs_main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! IgorJs/main */ \"7jDb\");\n/* harmony import */ var Chameleon_main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Chameleon/main */ \"6juG\");\n\n\n/* *\r\n *  Adding workshop entities from player inventory\r\n */\n\nvar PlayerEntity = function PlayerEntity(params, newObj, Igor) {\n  newObj.buffers = {}; //? Copy static data onto entity,\n  //? surely there's a better way to do this...\n\n  Object.assign(newObj, Igor.data.entity[params.name]);\n\n  if (newObj.subType == \"miner\" || newObj.subType == \"crafter\") {\n    newObj.buffers.out = Igor.newComponent(\"entity.buffer\", {\n      dir: 'out'\n    }, newObj);\n  }\n\n  if (newObj.subType == \"crafter\" || newObj.subType == \"research\") {\n    if (newObj.subType == \"research\") {\n      newObj.buffers.in = Igor.newComponent(\"entity.buffer\", {\n        staticStacks: newObj.inputs,\n        dir: 'in'\n      }, newObj);\n      newObj.research_timer = null;\n      newObj.$_tags.push(\"researchTicker\", true);\n    } else {\n      newObj.buffers.in = Igor.newComponent(\"entity.buffer\", {\n        dir: 'in'\n      }, newObj);\n    }\n  }\n\n  newObj.order = params.idx;\n  return [newObj];\n};\n\nPlayerEntity._delete = function (target, Igor) {\n  target.buffers.in && Igor.deleteObject(target.buffers.in);\n  target.buffers.out && Igor.deleteObject(target.buffers.out);\n}; //!  These should be combined into the entity.buffer tick()\n\n\nfunction EntityInputTicker(entity, tickData, Igor) {\n  //need to reconjigger this to draw from multiple buffer slots\n  console.log(\"input called\");\n  var buffer = Igor.getId(entity.buffers.in);\n  if (buffer.items.length == 0) return;\n\n  if (buffer.xferTimer == 0) {\n    //TODO Setup this to allow moving multiple types of items per tick\n    var toAdd = Math.min(buffer.xfer, buffer.stackSize - buffer.items[buffer.xferStack].count);\n    var added = Igor.processTEMP(Igor.getNamedObject(\"player.inventory\"), \"inventory.consume\", {\n      itemStacks: {\n        name: buffer.items[buffer.xferStack].name,\n        count: toAdd\n      },\n      partial: true\n    });\n\n    if (added && added[0].count > 0) {\n      buffer.items[buffer.xferStack].count += added[0].count;\n      Igor.view.signaler.signal(\"bufferUpdate\");\n      buffer.stalled = false;\n      entity.$_tags.push(\"tick\", \"processing\");\n    } else if (buffer.items[buffer.xferStack].count == buffer.stackSize) {\n      buffer.stalled = true;\n      buffer.xferTimer = Math.floor(buffer.xferTicks / 10);\n      return;\n    }\n\n    buffer.xferTimer = buffer.xferTicks;\n    ++buffer.xferStack == buffer.items.length && (buffer.xferStack = 0);\n  } else {\n    buffer.xferTimer--;\n  }\n}\n\nfunction EntityOutputTicker(entity, tickData, Igor) {\n  //need to reconjigger this for drawing from multiple buffer slots\n  console.log('output called');\n  var buffer = Igor.getId(entity.buffers.out);\n  if (buffer.items.length == 0) return;\n\n  if (buffer.xferTimer == 0) {\n    //TODO Setup this to allow moving multiple types of items per tick\n    //Check if player inventory has a full stack, if so, stall\n    var p_inv = Igor.getNamedObject(\"player.inventory\");\n    var fillCount = Igor.processTEMP(p_inv, \"inventory.total\", {\n      name: buffer.items[buffer.xferStack].name\n    });\n\n    if (fillCount >= Igor.data.item[buffer.items[buffer.xferStack].name].stack_size) {\n      //I'm stalled\n      buffer.xferTimer += Math.floor(buffer.xferTicks / 10);\n      buffer.stalled = true;\n      return;\n    } else {\n      buffer.stalled = false;\n    } //procede with push\n\n\n    var toSub = Math.min(buffer.xfer, buffer.items[buffer.xferStack].count); //console.log(toSub)\n\n    var added = Igor.processTEMP(p_inv, \"inventory.add\", {\n      itemStacks: {\n        name: buffer.items[buffer.xferStack].name,\n        count: toSub\n      }\n    });\n\n    if (added.complete) {\n      buffer.items[buffer.xferStack].count -= toSub;\n      Igor.view.signaler.signal(\"bufferUpdate\");\n    }\n\n    buffer.xferTimer = buffer.xferTicks;\n    ++buffer.xferStack == buffer.items.length && (buffer.xferStack = 0);\n  } else {\n    buffer.xferTimer--;\n  }\n}\n\nfunction EntityResearchTicker(entity, tickData, Igor) {\n  var research = Igor.getNamedObject(\"research\").progressing;\n  if (!research) return;\n\n  if (Number.isNaN(entity.research_timer) || entity.research_timer === null) {\n    var canConsume = research.cost.ingredients.every(function (_ref) {\n      var name = _ref[0],\n          qty = _ref[1];\n      return Igor.processTEMP(entity.buffers.in, \"inventory.total\", {\n        name: name\n      }) >= qty;\n    });\n    if (!canConsume) return;\n    research.cost.ingredients.forEach(function (_ref2) {\n      var name = _ref2[0],\n          qty = _ref2[1];\n      Igor.processTEMP(entity.buffers.in, \"inventory.consume\", {\n        itemStacks: {\n          name: name,\n          count: qty\n        }\n      });\n    }); //Consume next units to reset timer\n\n    Igor.getId(entity.buffers.in).$_tags.push(\"tick\", \"processing\");\n    entity.research_time = research.cost.time * Igor.config.TICKS_PER_SECOND * entity.researching_speed;\n    entity.research_timer = entity.research_time;\n    return;\n  }\n\n  if (entity.research_timer) {\n    --entity.research_timer;\n  }\n\n  if (entity.research_timer === 0) {\n    Igor.processTEMP(research, \"research.update\", {});\n    entity.research_timer = NaN;\n  }\n}\n\nfunction EntityProcessTicker(entity, tickData, Igor) {\n  if (!entity.processing) {\n    entity.$_tags.delete(\"ticking\");\n    return;\n  }\n\n  if (Number.isNaN(entity.process_timer) || entity.process_timer === null) {\n    if (entity.subType == 'miner' || Igor.processTEMP(entity.buffers.in, \"inventory.consume\", {\n      itemStacks: entity.processing.ingredients\n    })) {\n      entity.process_timer = entity.process_ticks;\n    } else {\n      entity.$_tags.delete(\"tick\");\n    }\n\n    return;\n  }\n\n  if (entity.process_timer) {\n    --entity.process_timer;\n  }\n\n  if (entity.process_timer === 0) {\n    var buffer = Igor.getId(entity.buffers.out);\n    var added = Igor.processTEMP(buffer, \"inventory.add\", {\n      itemStacks: entity.buffers.stalled || entity.processing.results || {\n        name: entity.processing.mining_results,\n        count: 1\n      }\n    }); //console.log(added)\n\n    if (added.complete) {\n      var _buffer, _buffer$upgrades$load, _buffer2, _buffer2$upgrades$loa;\n\n      entity.process_timer = NaN; //Backwards linking... :(\n\n      buffer = Igor.getId(entity.buffers.in);\n      ((_buffer = buffer) == null ? void 0 : (_buffer$upgrades$load = _buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load.count) && buffer.$_tags.push(\"tick\", \"processing\");\n      buffer = Igor.getId(entity.buffers.out);\n      ((_buffer2 = buffer) == null ? void 0 : (_buffer2$upgrades$loa = _buffer2.upgrades.loader) == null ? void 0 : _buffer2$upgrades$loa.count) && buffer.$_tags.push(\"tick\", \"processing\");\n    } else {\n      entity.$_tags.delete(\"tick\");\n    }\n  }\n\n  Igor.view.signaler.signal(\"bufferUpdate\");\n}\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"player.entity\", PlayerEntity, {\n  tick: EntityProcessTicker\n}); //IgorJs.addObjectTickHandler(\"player.entity\", EntityInputTicker, \"inputTicker\", {chain: [\"inputTicker\", \"tick\"], num: -5})\n//IgorJs.addObjectTickHandler(\"player.entity\", EntityOutputTicker, \"outputTicker\", {chain: [\"tick\", \"outputTicker\"],  num: 5})\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addObjectTickHandler(\"player.entity\", EntityResearchTicker, \"researchTicker\", {\n  chain: [\"tick\", \"researchTicker\"],\n  num: 3\n});\n/* *\r\n * Resource mining\r\n * Player action\r\n*/\n\nvar ResourceMine = function ResourceMine(obj, Igor, self) {\n  if (self.res) {\n    window.clearTimeout(self.timeout);\n    Igor.view.animsUpdate(self.res, null, null);\n    self.res = undefined;\n  } else {\n    self.timeout = window.setTimeout(function () {\n      Igor.processTEMP(obj.player.inventory, \"inventory.add\", {\n        itemStacks: [{\n          name: obj.which.resource.mining_results,\n          count: 1\n        }]\n      });\n      Igor.view.animsUpdate(self.res, null, null);\n      self.res = undefined;\n    }, obj.which.resource.mining_time * 1000);\n    self.res = obj.which.resource;\n    Igor.view.animsUpdate(obj.which.resource, \"isMining\", obj.which.resource.mining_time);\n  }\n};\n\nwindow.ResourceMine = ResourceMine;\nResourceMine.signature = {\n  which: \"resource\",\n  player: \"inventory\"\n};\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"resources.mine\", ResourceMine, ResourceMine.signature);\n/* *\r\n *  Entity Set processing\r\n */\n\nvar EntitySetProcessSig = {\n  at: \"entity\",\n  which: \"process\",\n  type: \"class\",\n  // enum ['mining', 'crafting', 'lab']\n  player: \"inventory\"\n};\n\nvar EntitySetProcess = function EntitySetProcess(obj, Igor) {\n  if (obj.at.entity.processing || obj.which.process == null) {\n    Igor.processTEMP(obj.at.entity, \"entity.clearProcess\", {\n      returnTo: obj.player.inventory\n    });\n    if (!obj.which.process) return;\n  }\n\n  obj.at.entity.processing = obj.which.process;\n  obj.at.entity.$_tags.push(\"tick\", \"processing\");\n\n  if (obj.type.class == \"mining\") {\n    obj.at.entity.process_ticks = obj.which.process.mining_time / obj.at.entity.mining_speed * Igor.config.TICKS_PER_SECOND;\n    obj.at.entity.process_timer = obj.at.entity.process_ticks;\n  } else if (obj.type.class == \"crafting\") {\n    obj.at.entity.process_ticks = obj.which.process.crafting_speed / obj.at.entity.crafting_speed * Igor.config.TICKS_PER_SECOND;\n\n    if (obj.at.entity.buffers.in) {\n      var buffer = Igor.getId(obj.at.entity.buffers.in);\n\n      if (buffer.stacks < obj.which.process.ingredients.length) {\n        return Igor.view.warnToast(\"Recipe exceedes machines ingredient limit\");\n      }\n\n      obj.which.process.ingredients.forEach(function (item, idx) {\n        buffer.items[idx] = {\n          name: item.name,\n          count: 0\n        };\n      });\n    }\n\n    if (obj.at.entity.buffers.out) {\n      var _buffer3 = Igor.getId(obj.at.entity.buffers.out);\n\n      if (_buffer3.stacks < obj.which.process.results.length) {\n        return Igor.view.warnToast(\"Recipe exceedes machines results limit\");\n      }\n\n      obj.which.process.results.forEach(function (item, idx) {\n        _buffer3.items[idx] = {\n          name: item.name,\n          count: 0\n        };\n      });\n    }\n\n    obj.at.entity.process_timer = NaN;\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"entity.setProcess\", EntitySetProcess, EntitySetProcessSig);\n\nfunction EntityClearProcess(entity, args, returnObj, Igor) {\n  if (entity.buffers.in) {\n    if (entity.process_timer) {\n      Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n        itemStacks: entity.processing.ingredients\n      });\n    }\n\n    var buffer = Igor.getId(entity.buffers.in);\n    Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: buffer.items\n    }); //! If args.returnTo is full, 'inventory.add' will fail silently\n\n    buffer.items.length = 0;\n    buffer.xferStack = 0;\n    buffer.stalled = false;\n  }\n\n  if (entity.buffers.out) {\n    var _buffer4 = Igor.getId(entity.buffers.out);\n\n    Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: _buffer4.items\n    }); //! If args.returnTo is full, 'inventory.add' will fail silently\n\n    _buffer4.items.length = 0;\n    _buffer4.xferStack = 0;\n    _buffer4.stalled = false;\n  }\n\n  if (entity.buffers.stalled) {\n    Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: entity.buffers.stalled\n    });\n    entity.buffers.stalled = null;\n  }\n\n  entity.processing = null;\n}\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addOperation(\"entity.clearProcess\", EntityClearProcess);\n/*\r\n  Buffers\r\n */\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"entityBuffer.sizeExpansionCost\", [{\n  name: \"iron-chest\",\n  count: 1\n}]);\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"entityBuffer.xferExpansionCost\", [{\n  name: \"inserter\",\n  count: 1\n}]);\n\nvar NewEntityBuffer = function NewEntityBuffer(params, newObj, Igor) {\n  var _params$staticStacks, _params$staticStacks2;\n\n  newObj.upgrades = {};\n  newObj.maxStacks = ((_params$staticStacks = params.staticStacks) == null ? void 0 : _params$staticStacks.length) || params.stacks || 1;\n  newObj.stackSize = params.stackSize || 5;\n  newObj.items = ((_params$staticStacks2 = params.staticStacks) == null ? void 0 : _params$staticStacks2.map(function (x) {\n    return {\n      name: x,\n      count: 0\n    };\n  })) || [];\n  newObj.xfer = 0;\n  newObj.xferTicks = 120;\n  newObj.xferStack = 0;\n  newObj.busShift = 0;\n  newObj.xferTimer = NaN;\n  newObj.restrictable = params.restrictable || false;\n  newObj.connection = null;\n  newObj.dir = params.dir;\n  return [newObj];\n};\n\nNewEntityBuffer._delete = function (obj, Igor) {\n  var _obj$upgrades$bufferS, _obj$upgrades$loader;\n\n  var inv = Igor.getNamedObject(\"player.inventory\");\n  ((_obj$upgrades$bufferS = obj.upgrades.bufferSize) == null ? void 0 : _obj$upgrades$bufferS.count) && Igor.processTEMP(inv, \"inventory.add\", {\n    itemStacks: Igor.getStatic(\"entityBuffer.sizeExpansionCost\"),\n    multi: obj.upgrades.bufferSize.count\n  });\n  ((_obj$upgrades$loader = obj.upgrades.loader) == null ? void 0 : _obj$upgrades$loader.count) && Igor.processTEMP(inv, \"inventory.add\", {\n    itemStacks: Igor.getStatic(\"entityBuffer.xferExpansionCost\"),\n    multi: obj.upgrades.loader.count\n  });\n};\n\nvar EntityBufferActions = {};\n\nEntityBufferActions.Collect = function (obj, Igor) {\n  var _buffer$upgrades$load2;\n\n  var buffer = Igor.getId(obj.which.buffer);\n  var idx = buffer.items.findIndex(function (x) {\n    return x.name == obj.item.name;\n  });\n\n  if (idx == -1) {\n    console.warn(\"Didnt' find the right index\");\n    debugger;\n  }\n\n  if (buffer.items[idx].count === 0) return;\n  Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n    itemStacks: buffer.items[idx]\n  });\n  buffer.items[idx].count = 0;\n  Igor.getId(buffer.$_parent).$_tags.push(\"tick\", \"processing\");\n  Igor.view.signaler.signal(\"bufferUpdate\");\n  ((_buffer$upgrades$load2 = buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load2.count) && buffer.$_tags.push(\"tick\", \"processing\");\n};\n\nEntityBufferActions.Collect.signature = {\n  which: 'buffer',\n  item: 'name'\n};\nEntityBufferActions.Collect.CC_provide = \"entity.bufferCollect\";\n\nEntityBufferActions.Fill = function (obj, Igor) {\n  var _buffer$upgrades$load3;\n\n  var buffer = Igor.getId(obj.which.buffer);\n  var idx = buffer.items.findIndex(function (x) {\n    return x.name == obj.item.name;\n  });\n\n  if (idx == -1) {\n    console.warn(\"Didnt' find the right index\");\n    debugger;\n  }\n\n  var avail = Igor.processTEMP(\"player.inventory\", \"inventory.total\", {\n    name: buffer.items[idx].name\n  });\n  if (avail === 0) return;\n  var toMove = obj.service.rounder.calc(buffer.items[idx].count, buffer.stackSize, avail);\n  Igor.processTEMP(\"player.inventory\", \"inventory.consume\", {\n    itemStacks: {\n      name: buffer.items[idx].name,\n      count: toMove\n    }\n  });\n  buffer.items[idx].count += toMove;\n  Igor.getId(buffer.$_parent).$_tags.push(\"tick\", \"processing\");\n  Igor.view.signaler.signal(\"bufferUpdate\");\n  ((_buffer$upgrades$load3 = buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load3.count) && buffer.$_tags.push(\"tick\", \"processing\");\n};\n\nEntityBufferActions.Fill.signature = {\n  which: 'buffer',\n  item: 'name',\n  service: 'rounder'\n};\nEntityBufferActions.Fill.CC_provide = \"entity.bufferFill\";\n\nEntityBufferActions.ClickCycle = function (obj, Igor) {\n  // The purpose is to cycle between buffer_fill and buffer_collect\n  var buffer = Igor.getId(obj.which.buffer);\n  var itemElm = buffer.items.find(function (x) {\n    return x.name == obj.item.name;\n  });\n  debugger;\n};\n\nEntityBufferActions.ClickCycle.signature = {\n  which: 'buffer',\n  item: 'name',\n  service: 'rounder'\n};\nEntityBufferActions.ClickCycle.CC_provide = \"entity.bufferCycle\";\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"entity.buffer.BUFFER_SIZE\", [5, 10, 20, 30, 40, 50]);\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].setStatic(\"entity.buffer.BUFFER_SIZE.MAX\", 50);\n\nEntityBufferActions.Upgrade = function (obj, Igor) {\n  var buffer = Igor.getId(obj.which.buffer);\n\n  if (obj.type.string == \"autoload\") {\n    var _buffer$upgrades$load4;\n\n    if (((_buffer$upgrades$load4 = buffer.upgrades.loader) == null ? void 0 : _buffer$upgrades$load4.count) >= 10) return Igor.view.warnToast(\"Loaders full\");\n    if (!Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n      itemStacks: {\n        name: \"inserter\",\n        count: 1\n      }\n    })) return Igor.view.warnToast(\"Inserter required\");\n    !buffer.upgrades.loader && (buffer.upgrades.loader = {\n      count: 0\n    });\n    buffer.upgrades.loader.count++;\n    buffer.xferTimer || (buffer.xferTimer = buffer.xferTicks);\n    buffer.xfer++;\n    buffer.$_tags.push(\"tick\", \"processing\");\n  } else if (obj.type.string == \"buffer\") {\n    var _buffer$upgrades$buff;\n\n    if (((_buffer$upgrades$buff = buffer.upgrades.bufferSize) == null ? void 0 : _buffer$upgrades$buff.count) >= 6) return Igor.view.warnToast(\"Chests full\");\n    if (!Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n      itemStacks: {\n        name: \"iron-chest\",\n        count: 1\n      }\n    })) return Igor.view.warnToast(\"Iron chest required\");\n    !buffer.upgrades.bufferSize && (buffer.upgrades.bufferSize = {\n      count: 0\n    });\n    buffer.upgrades.bufferSize.count++;\n    buffer.stackSize = Igor.getStatic(\"entity.buffer.BUFFER_SIZE\")[buffer.upgrades.bufferSize.count] || Igor.getStatic(\"entity.buffer.BUFFER_SIZE.MAX\");\n  }\n};\n\nEntityBufferActions.Upgrade.signature = {\n  which: \"buffer\",\n  type: \"string\",\n  player: 'inventory'\n};\nEntityBufferActions.Upgrade.CC_provide = \"entity.bufferUpgrade\";\n\nEntityBufferActions.SetRestrictions = function (target, args, returnObj, Igor) {\n  if (!target.restrictable) returnObj._result = false; //check through the list and return things to player buffer\n\n  var connected = [];\n  var emptyIdxs = [];\n  target.maxStacks = args.list.length;\n\n  for (var idx = 0; idx < target.items.length; idx++) {\n    var x = target.items[idx];\n\n    if (!x) {\n      emptyIdxs.push(idx);\n      continue;\n    }\n\n    if (!args.list.includes(x.name)) {\n      if (x.count > 0) Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n        itemStacks: x\n      });\n      target.items.splice(idx, 1, undefined);\n      emptyIdxs.push(idx);\n    } else {\n      connected.push(x.name);\n      x.restricted = true;\n    }\n  } //console.log(emptyIdxs)\n\n\n  args.list.forEach(function (x) {\n    if (!connected.includes(x)) {\n      if (emptyIdxs.length > 0) {\n        target.items.splice(emptyIdxs.splice(0, 1), 1, {\n          name: x,\n          count: 0,\n          restricted: true\n        }); //console.log(\"restricted splice \"+x)\n      } else {\n        target.items.push({\n          name: x,\n          count: 0,\n          restricted: true\n        }); //console.log('push restricted:'+x)\n      }\n    }\n  });\n};\n\nEntityBufferActions.SetRestrictions.Igor_operation = \"buffer.restrictList\";\n\nEntityBufferActions.HasRestriction = function (target, args, returnObj, Igor) {\n  if (!target.restrictable) returnObj._result = false;else {\n    target.items.forEach(function (x) {\n      if (x.name == args.itemName) {\n        if (x.restrictedBy.includes(args.lineId)) {\n          returnObj._result = {\n            found: true,\n            restricted: true\n          };\n        } else {\n          returnObj._result = {\n            found: true,\n            restricted: false\n          };\n        }\n      }\n    });\n  }\n  !returnObj._result && (returnObj._result = {\n    found: false,\n    restricted: false\n  });\n};\n\nEntityBufferActions.HasRestriction.Igor_operation = \"buffer.hasRestriction\";\n\nEntityBufferActions.ClearRestriction = function (target, args, returnObj, Igor) {\n  if (!target.restrictable) returnObj._result = false;\n  var idx = -1;\n\n  while (!(\"_result\" in returnObj)) {\n    var x = target.items[++idx];\n\n    if (x.name == args.itemName) {\n      x.restrictedBy.splice(x.restrictedBy.indexOf(args.lineId), 1);\n\n      if (x.restrictedBy.length == 0) {\n        target.items[idx] = null;\n        returnObj._result = {\n          found: true,\n          cleared: true\n        };\n      } else {\n        returnObj._result = {\n          found: true,\n          cleared: false\n        };\n      }\n    }\n  }\n\n  !returnObj._result && (returnObj._result = {\n    found: false,\n    cleared: false\n  });\n};\n\nEntityBufferActions.ClearRestriction.Igor_operation = \"buffer.clearRestriction\";\n\nEntityBufferActions.BusXfer = function (target, args, returnObj, Igor) {\n  //TODO need better protections for transfers\n  //TODO need to handle different item stacks\n  // setup filter priorities for output \n  if (args.toBus) {\n    while (args.xferCount > 0) {\n      if (!target.items[target.busShift]) return null;\n      var added = Igor.processTEMP(args.toBus, \"inventory.add\", {\n        itemStacks: [{\n          name: target.items[target.busShift].name,\n          count: args.xferCount\n        }]\n      });\n\n      if (added.complete) {\n        Igor.processTEMP(target, \"inventory.consume\", {\n          itemStacks: [{\n            name: target.items[target.busShift].name,\n            count: args.xferCount\n          }]\n        });\n        args.xferCount = 0;\n      } else if (added.part[0].count == args.xferCount) {\n        returnObj.full = true;\n        return;\n      } else {\n        Igor.processTEMP(target, \"inventory.consume\", {\n          itemStacks: [{\n            name: target.items[target.busShift].name,\n            count: args.xferCount - added.part[0].count\n          }]\n        });\n        args.xferCount = added.part[0].count;\n      }\n\n      ++target.busShift == target.items.length && (target.busShift = 0);\n    }\n\n    returnObj.complete = true;\n  } else if (args.fromBus) {\n    var loops = 0;\n\n    while (args.xferCount > 0) {\n      if (!target.items[target.busShift]) return null;\n      var space = target.stackSize - target.items[target.busShift].count;\n\n      if (space) {\n        var consumed = Igor.processTEMP(args.fromBus, \"inventory.consume\", {\n          itemStacks: [{\n            name: target.items[target.busShift].name,\n            count: Math.min(args.xferCount, space)\n          }],\n          partial: true\n        });\n\n        if (consumed[0].count > 0) {\n          Igor.processTEMP(target, \"inventory.add\", {\n            itemStacks: [{\n              name: target.items[target.busShift].name,\n              count: consumed[0].count\n            }]\n          });\n          args.xferCount -= consumed[0].count;\n        }\n      }\n\n      if (++loops == target.items.length) {\n        returnObj.full = true;\n        return;\n      }\n\n      ++target.busShift == target.items.length && (target.busShift = 0);\n    }\n\n    returnObj.complete = true;\n  } else {\n    console.warn(\"BusXfer called __ no bus target\");\n  }\n};\n\nEntityBufferActions.BusXfer.Igor_operation = \"buffer.busXfer\";\n\nEntityBufferActions.BufferStalled = function (buffer, args, returnObj, Igor) {\n  /* more advanced stall handling, then return*/\n  buffer.stalled++;\n\n  if (buffer.stalled >= buffer.items.length) {\n    buffer.$_tags.delete(\"tick\");\n    buffer.stalled = false;\n  }\n\n  buffer.xferTimer = Math.floor(buffer.xferTicks / 6);\n  ++buffer.xferStack == buffer.items.length && (buffer.xferStack = 0);\n};\n\nEntityBufferActions.BufferStalled.Igor_operation = \"buffer.setStall\";\n\nEntityBufferActions.tick = function (buffer, tickData, Igor) {\n  if (buffer.items.length == 0) return;\n  if (buffer.xferTimer) return buffer.xferTimer--; //Surely a more elegant way to run this...\n\n  if (buffer.dir == 'in') {\n    var toAdd = Math.min(buffer.xfer, buffer.stackSize - buffer.items[buffer.xferStack].count);\n    if (toAdd == 0) return Igor.processTEMP(buffer, \"buffer.setStall\");\n    var acquired = Igor.processTEMP(\"player.inventory\", \"inventory.consume\", {\n      itemStacks: {\n        name: buffer.items[buffer.xferStack].name,\n        count: toAdd\n      },\n      partial: true\n    });\n    if (acquired[0].count == 0) return Igor.processTEMP(buffer, \"buffer.setStall\");\n    buffer.items[buffer.xferStack].count += acquired[0].count;\n    Igor.view.signaler.signal('bufferUpdate');\n    Igor.getId(buffer.$_parent).$_tags.push(\"tick\", \"processing\");\n    buffer.stalled = false;\n    buffer.xferTimer = buffer.xferTicks;\n    ++buffer.xferStack == buffer.items.length && (buffer.xferStack = 0);\n  } else {\n    var xfer = buffer.items[buffer.xferStack];\n    var added = Igor.processTEMP(\"player.inventory\", \"inventory.add\", {\n      itemStacks: {\n        name: xfer.name,\n        count: Math.min(xfer.count, buffer.xfer)\n      },\n      stackLimit: 1\n    }); //console.log(added)\n\n    if (!added.complete) return Igor.processTEMP(buffer, \"buffer.setStall\");\n    buffer.xferTimer = buffer.xferTicks;\n    xfer.count -= Math.min(xfer.count, buffer.xfer);\n    Igor.view.signaler.signal(\"bufferUpdate\");\n    Igor.getId(buffer.$_parent).$_tags.push(\"tick\", \"processing\");\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].defineObj(\"entity.buffer\", NewEntityBuffer, EntityBufferActions);\n/*\r\n *  Research Related\r\n *\r\n */\n\nvar SetResearchSig = {\n  \"which\": \"tech\",\n  \"global\": \"game\"\n};\n\nvar SetResearch = function SetResearch(obj, Igor, self) {\n  obj.global.game.research.progressing = obj.which.tech;\n  obj.global.game.research.progressing.completeUnits = 0;\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"research.set\", SetResearch, SetResearchSig);\nvar ClearResearchSig = {\n  \"global\": \"game\"\n};\n\nvar ClearResearch = function ClearResearch(obj, Igor, self) {\n  obj.global.game.research.progressing = null;\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"research.clear\", ClearResearch, ClearResearchSig); //Returns extra portion, but I don't have a good solution\n//To adding it back to the factoryBlock\n\nvar ResearchUpdate = function ResearchUpdate(obj, args, returnObj, Igor) {\n  var global = Igor.getNamedObject(\"global\");\n  obj.completeUnits += args.count || 1;\n\n  if (obj.completeUnits >= obj.cost.count) {\n    Igor.view.goodToast(\"Research Complete: \" + obj.name);\n    returnObj._result = obj.completeUnits - obj.cost.count;\n    Igor.getNamedObject(\"research\").progressing = null;\n    obj.researched = true;\n    global.research.completed[obj.name] = true;\n    obj.unlocks.forEach(function (item) {\n      typeof item === 'string' && Igor.processTEMP(item, \"recipe.unlock\");\n      typeof item === 'object' && Igor.processTEMP(item, \"feature.unlock\");\n    });\n    var cost = obj.cost.ingredients.map(function (_ref3) {\n      var name = _ref3[0],\n          qty = _ref3[1];\n      return {\n        name: name,\n        count: qty\n      };\n    }); //TODO! need to update this to respond to different tech trees\n\n    global.player.workshop.entities.forEach(function (x) {\n      var ent = Igor.getId(x);\n\n      if (ent.name == \"lab\") {\n        Igor.processTEMP(ent.buffers.in, \"inventory.add\", {\n          itemStacks: cost,\n          force: true\n        });\n        ent.research_timer = NaN;\n      }\n    });\n    global.facBlocks.techBlocks.forEach(function (x) {\n      if (args.me == x) return;\n      var block = Igor.getId(x);\n\n      if (block.research_consumed) {\n        Igor.processTEMP(block.buffers.in, \"inventory.add\", {\n          itemStacks: cost,\n          force: true,\n          multi: research_consumed\n        });\n        block.research_consumed = 0;\n        block.research_ticks = NaN;\n      }\n    });\n    Chameleon_main__WEBPACK_IMPORTED_MODULE_1__[\"ChameleonViewer\"].signaler.signal(\"techResearched\");\n  }\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addOperation(\"research.update\", ResearchUpdate);\n\nvar RecipeUnlock = function RecipeUnlock(obj, args, returnObj, Igor) {\n  //Igor.data.recipe[obj].enabled = true\n  Igor.getNamedObject(\"global\").unlocked_recipes.push(obj);\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addOperation(\"recipe.unlock\", RecipeUnlock);\n\nvar FeatureUnlock = function FeatureUnlock(obj, args, returnObj, Igor) {\n  var features = Igor.getNamedObject(\"global\").activeFeatures;\n\n  if (features[obj.feature]) {\n    features[obj.feature] = obj;\n  } else {\n    //! needs something more elegant...\n    if (obj.feature == \"factoryBlocks\") {\n      var blocks = Igor.getNamedObject(\"global\").facBlocks.blocks;\n\n      if (obj.blocksMaxSources) {\n        blocks.forEach(function (id) {\n          Igor.getId(id).connections.maxSources = obj.blocksMaxSources;\n        });\n      }\n\n      if (obj.blocksMaxDrains) {\n        blocks.forEach(function (id) {\n          Igor.getId(id).connections.maxDrains = obj.blocksMaxDrains;\n        });\n      }\n    }\n\n    debugger;\n    Object.assign(features[obj.feature], obj);\n  }\n  /*\r\n  adjustFeature(obj) {\r\n    switch(obj.feature) {\r\n      case \"defense\":\r\n        if(!this.activeFeatures[\"defense\"]) {\r\n          this.activeFeatures[\"defense\"] = true\r\n          this.facBlocks.defenses = NamedBlocks.DefenseBlock()\r\n          this.facBlocks.defenseBus = NamedBlocks.DefenseBus()\r\n        }\r\n        this.facBlocks.defenses.machines[\"turret\"] = ChameView.GameObjectFromPointer(obj.go_pointer)  //!!! shouldn't be in Chameleon\r\n        break;\r\n      case \"offense\":\r\n        if(!this.activeFeatures[\"offense\"]) {\r\n          this.activeFeatures[\"offense\"] = true\r\n          this.facBlocks.offenses = NamedBlocks.OffenseBlock()\r\n          this.facBlocks.offenseBus = NamedBlocks.OffenseBus()\r\n        }\r\n        this.facBlocks.offenses.radar = ChameView.GameObjectFromPointer(obj.go_pointer)  //!!! shouldn't be in Chameleon\r\n        break;\r\n      case \"factoryBlocks\":\r\n        this.activeFeatures[\"factoryBlocks\"] = true\r\n    }\r\n    // this.activeFeatures[obj.feature] = obj.level || (this.activeFeatures[obj.feature]+obj.inc) || (this.activeFeatures[obj.feature] * obj.bonus) || true\r\n  }\r\n  */\n\n};\n\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].addOperation(\"feature.unlock\", FeatureUnlock);\n\nvar CraftFromInv = function CraftFromInv(obj, Igor, fn) {\n  if (fn.rec) {\n    window.clearTimeout(fn.timeout);\n    Igor.processTEMP(obj.player.inventory, \"inventory.add\", {\n      itemStacks: fn.rec.ingredients\n    });\n    Chameleon_main__WEBPACK_IMPORTED_MODULE_1__[\"ChameleonViewer\"].animsUpdate(fn.rec, null, null);\n    fn.rec = undefined;\n  } else {\n    if (Igor.processTEMP(obj.player.inventory, \"inventory.consume\", {\n      itemStacks: obj.which.recipe.ingredients\n    })) {\n      fn.rec = obj.which.recipe;\n      fn.timeout = window.setTimeout(function () {\n        Igor.processTEMP(obj.player.inventory, \"inventory.add\", {\n          itemStacks: fn.rec.results\n        });\n        Chameleon_main__WEBPACK_IMPORTED_MODULE_1__[\"ChameleonViewer\"].animsUpdate(fn.rec, null, null);\n        fn.rec = undefined;\n      }, obj.which.recipe.crafting_speed * 1000);\n      fn.rec = obj.which.recipe;\n      Chameleon_main__WEBPACK_IMPORTED_MODULE_1__[\"ChameleonViewer\"].animsUpdate(fn.rec, \"isCrafting\", obj.which.recipe.crafting_speed);\n    } else {\n      //Error alert: cannot build\n      Igor.view.warnToast(\"Not enough ingredients to craft\");\n      console.log('cannot craft');\n    }\n  }\n};\n\nCraftFromInv.signature = {\n  which: \"recipe\",\n  player: \"inventory\"\n};\nIgorJs_main__WEBPACK_IMPORTED_MODULE_0__[\"IgorUtils\"].provide_CCC(\"player.craft\", CraftFromInv, CraftFromInv.signature);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaVZwSC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nYW1lQ29kZS9HYW1lT2JqZWN0cy5qcz84OTVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SWdvclV0aWxzIGFzIElnb3JKc30gZnJvbSBcIklnb3JKcy9tYWluXCJcclxuaW1wb3J0IHtDaGFtZWxlb25WaWV3ZXIgYXMgQ2hhbWVKc30gZnJvbSBcIkNoYW1lbGVvbi9tYWluXCJcclxuXHJcbi8qICpcclxuICogIEFkZGluZyB3b3Jrc2hvcCBlbnRpdGllcyBmcm9tIHBsYXllciBpbnZlbnRvcnlcclxuICovXHJcblxyXG5jb25zdCBQbGF5ZXJFbnRpdHkgPSAocGFyYW1zLCBuZXdPYmosIElnb3IpID0+IHtcclxuICBuZXdPYmouYnVmZmVycyA9IHt9XHJcbiAgLy8/IENvcHkgc3RhdGljIGRhdGEgb250byBlbnRpdHksXHJcbiAgLy8/IHN1cmVseSB0aGVyZSdzIGEgYmV0dGVyIHdheSB0byBkbyB0aGlzLi4uXHJcbiAgT2JqZWN0LmFzc2lnbihuZXdPYmosIElnb3IuZGF0YS5lbnRpdHlbcGFyYW1zLm5hbWVdKVxyXG4gIGlmKG5ld09iai5zdWJUeXBlPT1cIm1pbmVyXCIgfHwgbmV3T2JqLnN1YlR5cGU9PVwiY3JhZnRlclwiKSB7XHJcbiAgICBuZXdPYmouYnVmZmVycy5vdXQgPSBJZ29yLm5ld0NvbXBvbmVudChcImVudGl0eS5idWZmZXJcIiwge2RpcjogJ291dCd9LCBuZXdPYmopXHJcbiAgfVxyXG4gIGlmKG5ld09iai5zdWJUeXBlPT1cImNyYWZ0ZXJcIiB8fCBuZXdPYmouc3ViVHlwZT09XCJyZXNlYXJjaFwiKSB7XHJcbiAgICBpZihuZXdPYmouc3ViVHlwZT09XCJyZXNlYXJjaFwiKSB7XHJcbiAgICAgIG5ld09iai5idWZmZXJzLmluID0gSWdvci5uZXdDb21wb25lbnQoXCJlbnRpdHkuYnVmZmVyXCIsIHtzdGF0aWNTdGFja3M6IG5ld09iai5pbnB1dHMsIGRpcjogJ2luJ30sIG5ld09iailcclxuICAgICAgbmV3T2JqLnJlc2VhcmNoX3RpbWVyID0gbnVsbFxyXG4gICAgICBuZXdPYmouJF90YWdzLnB1c2goXCJyZXNlYXJjaFRpY2tlclwiLCB0cnVlKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3T2JqLmJ1ZmZlcnMuaW4gPSBJZ29yLm5ld0NvbXBvbmVudChcImVudGl0eS5idWZmZXJcIiwgeyBkaXI6ICdpbid9LCBuZXdPYmopXHJcbiAgICB9XHJcbiAgfVxyXG4gIG5ld09iai5vcmRlciA9IHBhcmFtcy5pZHhcclxuICByZXR1cm4gW25ld09ial1cclxufVxyXG5QbGF5ZXJFbnRpdHkuX2RlbGV0ZSA9ICh0YXJnZXQsIElnb3IpID0+IHtcclxuICB0YXJnZXQuYnVmZmVycy5pbiAgJiYgSWdvci5kZWxldGVPYmplY3QodGFyZ2V0LmJ1ZmZlcnMuaW4pXHJcbiAgdGFyZ2V0LmJ1ZmZlcnMub3V0ICYmIElnb3IuZGVsZXRlT2JqZWN0KHRhcmdldC5idWZmZXJzLm91dClcclxufVxyXG5cclxuLy8hICBUaGVzZSBzaG91bGQgYmUgY29tYmluZWQgaW50byB0aGUgZW50aXR5LmJ1ZmZlciB0aWNrKClcclxuZnVuY3Rpb24gRW50aXR5SW5wdXRUaWNrZXIoZW50aXR5LCB0aWNrRGF0YSwgSWdvcikge1xyXG4gIC8vbmVlZCB0byByZWNvbmppZ2dlciB0aGlzIHRvIGRyYXcgZnJvbSBtdWx0aXBsZSBidWZmZXIgc2xvdHNcclxuICBjb25zb2xlLmxvZyhcImlucHV0IGNhbGxlZFwiKVxyXG4gIGxldCBidWZmZXIgPSBJZ29yLmdldElkKGVudGl0eS5idWZmZXJzLmluKVxyXG4gIGlmKGJ1ZmZlci5pdGVtcy5sZW5ndGg9PTApIHJldHVyblxyXG4gIGlmKGJ1ZmZlci54ZmVyVGltZXIgPT0gMCkge1xyXG4gICAgLy9UT0RPIFNldHVwIHRoaXMgdG8gYWxsb3cgbW92aW5nIG11bHRpcGxlIHR5cGVzIG9mIGl0ZW1zIHBlciB0aWNrXHJcbiAgICBsZXQgdG9BZGQgPSBNYXRoLm1pbihidWZmZXIueGZlciwgYnVmZmVyLnN0YWNrU2l6ZS1idWZmZXIuaXRlbXNbYnVmZmVyLnhmZXJTdGFja10uY291bnQpXHJcbiAgICBsZXQgYWRkZWQgPSBJZ29yLnByb2Nlc3NURU1QKFxyXG4gICAgICAgICAgICAgICAgICAgIElnb3IuZ2V0TmFtZWRPYmplY3QoXCJwbGF5ZXIuaW52ZW50b3J5XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLFwiaW52ZW50b3J5LmNvbnN1bWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICx7aXRlbVN0YWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJ1ZmZlci5pdGVtc1tidWZmZXIueGZlclN0YWNrXS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICxjb3VudDogdG9BZGRcclxuICAgICAgICAgICAgICAgICAgICAgIH0sIHBhcnRpYWw6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgaWYoYWRkZWQgJiYgYWRkZWRbMF0uY291bnQ+MCkge1xyXG4gICAgICBidWZmZXIuaXRlbXNbYnVmZmVyLnhmZXJTdGFja10uY291bnQgKz0gYWRkZWRbMF0uY291bnRcclxuICAgICAgSWdvci52aWV3LnNpZ25hbGVyLnNpZ25hbChcImJ1ZmZlclVwZGF0ZVwiKVxyXG4gICAgICBidWZmZXIuc3RhbGxlZCA9IGZhbHNlXHJcbiAgICAgIGVudGl0eS4kX3RhZ3MucHVzaChcInRpY2tcIiwgXCJwcm9jZXNzaW5nXCIpXHJcbiAgICB9IGVsc2UgaWYoYnVmZmVyLml0ZW1zW2J1ZmZlci54ZmVyU3RhY2tdLmNvdW50PT1idWZmZXIuc3RhY2tTaXplKSB7XHJcbiAgICAgIGJ1ZmZlci5zdGFsbGVkID0gdHJ1ZVxyXG4gICAgICBidWZmZXIueGZlclRpbWVyID0gTWF0aC5mbG9vcihidWZmZXIueGZlclRpY2tzLzEwKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGJ1ZmZlci54ZmVyVGltZXIgPSBidWZmZXIueGZlclRpY2tzXHJcbiAgICArK2J1ZmZlci54ZmVyU3RhY2s9PWJ1ZmZlci5pdGVtcy5sZW5ndGggJiYgKGJ1ZmZlci54ZmVyU3RhY2s9MClcclxuICB9IGVsc2Uge1xyXG4gICAgYnVmZmVyLnhmZXJUaW1lci0tXHJcbiAgfVxyXG59XHJcbmZ1bmN0aW9uIEVudGl0eU91dHB1dFRpY2tlcihlbnRpdHksIHRpY2tEYXRhLCBJZ29yKSB7XHJcbiAgLy9uZWVkIHRvIHJlY29uamlnZ2VyIHRoaXMgZm9yIGRyYXdpbmcgZnJvbSBtdWx0aXBsZSBidWZmZXIgc2xvdHNcclxuICBjb25zb2xlLmxvZygnb3V0cHV0IGNhbGxlZCcpXHJcbiAgbGV0IGJ1ZmZlciA9IElnb3IuZ2V0SWQoZW50aXR5LmJ1ZmZlcnMub3V0KVxyXG4gIGlmKGJ1ZmZlci5pdGVtcy5sZW5ndGg9PTApIHJldHVyblxyXG4gIGlmKGJ1ZmZlci54ZmVyVGltZXIgPT0gMCkge1xyXG4gICAgLy9UT0RPIFNldHVwIHRoaXMgdG8gYWxsb3cgbW92aW5nIG11bHRpcGxlIHR5cGVzIG9mIGl0ZW1zIHBlciB0aWNrXHJcbiAgICAvL0NoZWNrIGlmIHBsYXllciBpbnZlbnRvcnkgaGFzIGEgZnVsbCBzdGFjaywgaWYgc28sIHN0YWxsXHJcbiAgICBsZXQgcF9pbnYgPSBJZ29yLmdldE5hbWVkT2JqZWN0KFwicGxheWVyLmludmVudG9yeVwiKVxyXG4gICAgbGV0IGZpbGxDb3VudCA9IElnb3IucHJvY2Vzc1RFTVAocF9pbnYsIFwiaW52ZW50b3J5LnRvdGFsXCIsIHtuYW1lOiBidWZmZXIuaXRlbXNbYnVmZmVyLnhmZXJTdGFja10ubmFtZX0pXHJcbiAgICBpZihmaWxsQ291bnQ+PUlnb3IuZGF0YS5pdGVtW2J1ZmZlci5pdGVtc1tidWZmZXIueGZlclN0YWNrXS5uYW1lXS5zdGFja19zaXplKSB7XHJcbiAgICAgIC8vSSdtIHN0YWxsZWRcclxuICAgICAgYnVmZmVyLnhmZXJUaW1lciArPSBNYXRoLmZsb29yKGJ1ZmZlci54ZmVyVGlja3MvMTApXHJcbiAgICAgIGJ1ZmZlci5zdGFsbGVkID0gdHJ1ZVxyXG4gICAgICByZXR1cm5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGJ1ZmZlci5zdGFsbGVkID0gZmFsc2VcclxuICAgIH1cclxuICAgIC8vcHJvY2VkZSB3aXRoIHB1c2hcclxuICAgIGxldCB0b1N1YiA9IE1hdGgubWluKGJ1ZmZlci54ZmVyLCBidWZmZXIuaXRlbXNbYnVmZmVyLnhmZXJTdGFja10uY291bnQpXHJcbiAgICAvL2NvbnNvbGUubG9nKHRvU3ViKVxyXG4gICAgbGV0IGFkZGVkID0gSWdvci5wcm9jZXNzVEVNUChcclxuICAgICAgcF9pbnZcclxuICAgICAgLFwiaW52ZW50b3J5LmFkZFwiXHJcbiAgICAgICx7aXRlbVN0YWNrczoge1xyXG4gICAgICAgICBuYW1lOiBidWZmZXIuaXRlbXNbYnVmZmVyLnhmZXJTdGFja10ubmFtZVxyXG4gICAgICAgICxjb3VudDogdG9TdWJcclxuICAgICAgfX1cclxuICAgIClcclxuICAgIGlmKGFkZGVkLmNvbXBsZXRlKSB7XHJcbiAgICAgIGJ1ZmZlci5pdGVtc1tidWZmZXIueGZlclN0YWNrXS5jb3VudCAtPSB0b1N1YlxyXG4gICAgICBJZ29yLnZpZXcuc2lnbmFsZXIuc2lnbmFsKFwiYnVmZmVyVXBkYXRlXCIpXHJcbiAgICB9XHJcbiAgICBidWZmZXIueGZlclRpbWVyID0gYnVmZmVyLnhmZXJUaWNrc1xyXG4gICAgKytidWZmZXIueGZlclN0YWNrPT1idWZmZXIuaXRlbXMubGVuZ3RoICYmIChidWZmZXIueGZlclN0YWNrID0wKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBidWZmZXIueGZlclRpbWVyLS1cclxuICB9XHJcbn1cclxuZnVuY3Rpb24gRW50aXR5UmVzZWFyY2hUaWNrZXIoZW50aXR5LCB0aWNrRGF0YSwgSWdvcikge1xyXG4gIGxldCByZXNlYXJjaCA9IElnb3IuZ2V0TmFtZWRPYmplY3QoXCJyZXNlYXJjaFwiKS5wcm9ncmVzc2luZ1xyXG4gIGlmKCFyZXNlYXJjaCkgcmV0dXJuXHJcbiAgaWYoTnVtYmVyLmlzTmFOKGVudGl0eS5yZXNlYXJjaF90aW1lcikgfHwgZW50aXR5LnJlc2VhcmNoX3RpbWVyPT09bnVsbCkge1xyXG4gICAgbGV0IGNhbkNvbnN1bWUgPSByZXNlYXJjaC5jb3N0LmluZ3JlZGllbnRzLmV2ZXJ5KChbbmFtZSwgcXR5XSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBJZ29yLnByb2Nlc3NURU1QKGVudGl0eS5idWZmZXJzLmluLCBcImludmVudG9yeS50b3RhbFwiLCB7bmFtZX0pPj1xdHlcclxuICAgICAgfSlcclxuICAgIGlmKCFjYW5Db25zdW1lKSByZXR1cm5cclxuICAgIHJlc2VhcmNoLmNvc3QuaW5ncmVkaWVudHMuZm9yRWFjaCggKFtuYW1lLCBxdHldKSA9PiB7XHJcbiAgICAgIElnb3IucHJvY2Vzc1RFTVAoZW50aXR5LmJ1ZmZlcnMuaW4sIFwiaW52ZW50b3J5LmNvbnN1bWVcIiwge2l0ZW1TdGFja3M6IHtuYW1lLCBjb3VudDogcXR5fX0pXHJcbiAgICB9KVxyXG4gICAgLy9Db25zdW1lIG5leHQgdW5pdHMgdG8gcmVzZXQgdGltZXJcclxuICAgIElnb3IuZ2V0SWQoZW50aXR5LmJ1ZmZlcnMuaW4pLiRfdGFncy5wdXNoKFwidGlja1wiLCBcInByb2Nlc3NpbmdcIilcclxuICAgIGVudGl0eS5yZXNlYXJjaF90aW1lID0gcmVzZWFyY2guY29zdC50aW1lICogSWdvci5jb25maWcuVElDS1NfUEVSX1NFQ09ORCAqIGVudGl0eS5yZXNlYXJjaGluZ19zcGVlZFxyXG4gICAgZW50aXR5LnJlc2VhcmNoX3RpbWVyID0gZW50aXR5LnJlc2VhcmNoX3RpbWVcclxuICAgIHJldHVyblxyXG4gIH1cclxuICBpZihlbnRpdHkucmVzZWFyY2hfdGltZXIpIHsgLS1lbnRpdHkucmVzZWFyY2hfdGltZXIgfVxyXG4gIGlmKGVudGl0eS5yZXNlYXJjaF90aW1lcj09PTApIHtcclxuICAgIElnb3IucHJvY2Vzc1RFTVAocmVzZWFyY2gsIFwicmVzZWFyY2gudXBkYXRlXCIsIHt9KVxyXG4gICAgZW50aXR5LnJlc2VhcmNoX3RpbWVyID0gTmFOXHJcbiAgfVxyXG59XHJcbmZ1bmN0aW9uIEVudGl0eVByb2Nlc3NUaWNrZXIoZW50aXR5LCB0aWNrRGF0YSwgSWdvcikge1xyXG4gIGlmKCFlbnRpdHkucHJvY2Vzc2luZykgeyBlbnRpdHkuJF90YWdzLmRlbGV0ZShcInRpY2tpbmdcIik7IHJldHVybiB9XHJcbiAgaWYoTnVtYmVyLmlzTmFOKGVudGl0eS5wcm9jZXNzX3RpbWVyKSB8fCBlbnRpdHkucHJvY2Vzc190aW1lcj09PW51bGwpIHtcclxuICAgIGlmKGVudGl0eS5zdWJUeXBlPT0nbWluZXInIHx8IElnb3IucHJvY2Vzc1RFTVAoZW50aXR5LmJ1ZmZlcnMuaW4sIFwiaW52ZW50b3J5LmNvbnN1bWVcIiwge2l0ZW1TdGFja3M6IGVudGl0eS5wcm9jZXNzaW5nLmluZ3JlZGllbnRzfSkpIHtcclxuICAgICAgZW50aXR5LnByb2Nlc3NfdGltZXIgPSBlbnRpdHkucHJvY2Vzc190aWNrc1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZW50aXR5LiRfdGFncy5kZWxldGUoXCJ0aWNrXCIpXHJcbiAgICB9XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgaWYoZW50aXR5LnByb2Nlc3NfdGltZXIpIHsgLS1lbnRpdHkucHJvY2Vzc190aW1lciB9XHJcbiAgaWYoZW50aXR5LnByb2Nlc3NfdGltZXI9PT0wKSB7XHJcbiAgICBsZXQgYnVmZmVyID0gSWdvci5nZXRJZChlbnRpdHkuYnVmZmVycy5vdXQpXHJcbiAgICBsZXQgYWRkZWQgPSBJZ29yLnByb2Nlc3NURU1QKGJ1ZmZlciwgXCJpbnZlbnRvcnkuYWRkXCIsIHtpdGVtU3RhY2tzOiBlbnRpdHkuYnVmZmVycy5zdGFsbGVkIHx8IGVudGl0eS5wcm9jZXNzaW5nLnJlc3VsdHMgfHwge25hbWU6IGVudGl0eS5wcm9jZXNzaW5nLm1pbmluZ19yZXN1bHRzLCBjb3VudDogMX19KVxyXG4gICAgLy9jb25zb2xlLmxvZyhhZGRlZClcclxuICAgIGlmKGFkZGVkLmNvbXBsZXRlKSB7XHJcbiAgICAgIGVudGl0eS5wcm9jZXNzX3RpbWVyID0gTmFOXHJcbiAgICAgIC8vQmFja3dhcmRzIGxpbmtpbmcuLi4gOihcclxuICAgICAgYnVmZmVyID0gSWdvci5nZXRJZChlbnRpdHkuYnVmZmVycy5pbilcclxuICAgICAgYnVmZmVyPy51cGdyYWRlcy5sb2FkZXI/LmNvdW50ICYmIGJ1ZmZlci4kX3RhZ3MucHVzaChcInRpY2tcIiwgXCJwcm9jZXNzaW5nXCIpXHJcbiAgICAgIGJ1ZmZlciA9IElnb3IuZ2V0SWQoZW50aXR5LmJ1ZmZlcnMub3V0KVxyXG4gICAgICBidWZmZXI/LnVwZ3JhZGVzLmxvYWRlcj8uY291bnQgJiYgYnVmZmVyLiRfdGFncy5wdXNoKFwidGlja1wiLCBcInByb2Nlc3NpbmdcIilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVudGl0eS4kX3RhZ3MuZGVsZXRlKFwidGlja1wiKVxyXG4gICAgfVxyXG4gIH1cclxuICBJZ29yLnZpZXcuc2lnbmFsZXIuc2lnbmFsKFwiYnVmZmVyVXBkYXRlXCIpXHJcbn1cclxuSWdvckpzLmRlZmluZU9iaihcInBsYXllci5lbnRpdHlcIiwgUGxheWVyRW50aXR5LCB7dGljazogRW50aXR5UHJvY2Vzc1RpY2tlcn0pXHJcbi8vSWdvckpzLmFkZE9iamVjdFRpY2tIYW5kbGVyKFwicGxheWVyLmVudGl0eVwiLCBFbnRpdHlJbnB1dFRpY2tlciwgXCJpbnB1dFRpY2tlclwiLCB7Y2hhaW46IFtcImlucHV0VGlja2VyXCIsIFwidGlja1wiXSwgbnVtOiAtNX0pXHJcbi8vSWdvckpzLmFkZE9iamVjdFRpY2tIYW5kbGVyKFwicGxheWVyLmVudGl0eVwiLCBFbnRpdHlPdXRwdXRUaWNrZXIsIFwib3V0cHV0VGlja2VyXCIsIHtjaGFpbjogW1widGlja1wiLCBcIm91dHB1dFRpY2tlclwiXSwgIG51bTogNX0pXHJcbklnb3JKcy5hZGRPYmplY3RUaWNrSGFuZGxlcihcInBsYXllci5lbnRpdHlcIiwgRW50aXR5UmVzZWFyY2hUaWNrZXIsIFwicmVzZWFyY2hUaWNrZXJcIiwge2NoYWluOiBbXCJ0aWNrXCIsIFwicmVzZWFyY2hUaWNrZXJcIl0sIG51bTogM30pXHJcblxyXG4vKiAqXHJcbiAqIFJlc291cmNlIG1pbmluZ1xyXG4gKiBQbGF5ZXIgYWN0aW9uXHJcbiovXHJcbmNvbnN0IFJlc291cmNlTWluZSA9IChvYmosIElnb3IsIHNlbGYpID0+IHtcclxuICBpZihzZWxmLnJlcykge1xyXG4gICAgd2luZG93LmNsZWFyVGltZW91dChzZWxmLnRpbWVvdXQpXHJcbiAgICBJZ29yLnZpZXcuYW5pbXNVcGRhdGUoc2VsZi5yZXMsIG51bGwsIG51bGwpXHJcbiAgICBzZWxmLnJlcyA9IHVuZGVmaW5lZFxyXG4gIH0gZWxzZSB7XHJcbiAgICBzZWxmLnRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggKCkgPT4ge1xyXG4gICAgICBJZ29yLnByb2Nlc3NURU1QKG9iai5wbGF5ZXIuaW52ZW50b3J5LCBcImludmVudG9yeS5hZGRcIiwge2l0ZW1TdGFja3M6IFt7bmFtZTogb2JqLndoaWNoLnJlc291cmNlLm1pbmluZ19yZXN1bHRzLCBjb3VudDogMX1dfSlcclxuICAgICAgSWdvci52aWV3LmFuaW1zVXBkYXRlKHNlbGYucmVzLCBudWxsLCBudWxsKVxyXG4gICAgICBzZWxmLnJlcyA9IHVuZGVmaW5lZFxyXG4gICAgfSwgb2JqLndoaWNoLnJlc291cmNlLm1pbmluZ190aW1lICogMTAwMClcclxuICAgIHNlbGYucmVzID0gb2JqLndoaWNoLnJlc291cmNlXHJcbiAgICBJZ29yLnZpZXcuYW5pbXNVcGRhdGUob2JqLndoaWNoLnJlc291cmNlLCBcImlzTWluaW5nXCIsIG9iai53aGljaC5yZXNvdXJjZS5taW5pbmdfdGltZSlcclxuICB9XHJcbn1cclxud2luZG93LlJlc291cmNlTWluZSA9IFJlc291cmNlTWluZVxyXG5cclxuUmVzb3VyY2VNaW5lLnNpZ25hdHVyZSA9IHtcclxuICB3aGljaDogXCJyZXNvdXJjZVwiLFxyXG4gIHBsYXllcjogXCJpbnZlbnRvcnlcIlxyXG59XHJcblxyXG5JZ29ySnMucHJvdmlkZV9DQ0MoXCJyZXNvdXJjZXMubWluZVwiLCBSZXNvdXJjZU1pbmUsIFJlc291cmNlTWluZS5zaWduYXR1cmUpXHJcblxyXG4vKiAqXHJcbiAqICBFbnRpdHkgU2V0IHByb2Nlc3NpbmdcclxuICovXHJcbmNvbnN0IEVudGl0eVNldFByb2Nlc3NTaWcgPSB7XHJcbiAgYXQ6IFwiZW50aXR5XCIsXHJcbiAgd2hpY2g6IFwicHJvY2Vzc1wiLFxyXG4gIHR5cGU6IFwiY2xhc3NcIiwgIC8vIGVudW0gWydtaW5pbmcnLCAnY3JhZnRpbmcnLCAnbGFiJ11cclxuICBwbGF5ZXI6IFwiaW52ZW50b3J5XCIsXHJcbn1cclxuY29uc3QgRW50aXR5U2V0UHJvY2VzcyA9IChvYmosIElnb3IpID0+IHtcclxuICBpZihvYmouYXQuZW50aXR5LnByb2Nlc3NpbmcgfHwgb2JqLndoaWNoLnByb2Nlc3M9PW51bGwpIHtcclxuICAgIElnb3IucHJvY2Vzc1RFTVAob2JqLmF0LmVudGl0eSwgXCJlbnRpdHkuY2xlYXJQcm9jZXNzXCIsIHtyZXR1cm5Ubzogb2JqLnBsYXllci5pbnZlbnRvcnl9KVxyXG4gICAgaWYoIW9iai53aGljaC5wcm9jZXNzKSByZXR1cm5cclxuICB9XHJcbiAgb2JqLmF0LmVudGl0eS5wcm9jZXNzaW5nID0gb2JqLndoaWNoLnByb2Nlc3NcclxuICBvYmouYXQuZW50aXR5LiRfdGFncy5wdXNoKFwidGlja1wiLCBcInByb2Nlc3NpbmdcIilcclxuICBpZihvYmoudHlwZS5jbGFzcz09XCJtaW5pbmdcIikge1xyXG4gICAgb2JqLmF0LmVudGl0eS5wcm9jZXNzX3RpY2tzID0gb2JqLndoaWNoLnByb2Nlc3MubWluaW5nX3RpbWUgLyBvYmouYXQuZW50aXR5Lm1pbmluZ19zcGVlZCAqIElnb3IuY29uZmlnLlRJQ0tTX1BFUl9TRUNPTkRcclxuICAgIG9iai5hdC5lbnRpdHkucHJvY2Vzc190aW1lciA9IG9iai5hdC5lbnRpdHkucHJvY2Vzc190aWNrc1xyXG4gIH0gZWxzZSBpZiAob2JqLnR5cGUuY2xhc3M9PVwiY3JhZnRpbmdcIikge1xyXG4gICAgb2JqLmF0LmVudGl0eS5wcm9jZXNzX3RpY2tzID0gb2JqLndoaWNoLnByb2Nlc3MuY3JhZnRpbmdfc3BlZWQgLyBvYmouYXQuZW50aXR5LmNyYWZ0aW5nX3NwZWVkICogSWdvci5jb25maWcuVElDS1NfUEVSX1NFQ09ORFxyXG4gICAgaWYob2JqLmF0LmVudGl0eS5idWZmZXJzLmluKSB7XHJcbiAgICAgIGxldCBidWZmZXIgPSBJZ29yLmdldElkKG9iai5hdC5lbnRpdHkuYnVmZmVycy5pbilcclxuICAgICAgaWYoYnVmZmVyLnN0YWNrczxvYmoud2hpY2gucHJvY2Vzcy5pbmdyZWRpZW50cy5sZW5ndGgpIHsgcmV0dXJuIElnb3Iudmlldy53YXJuVG9hc3QoXCJSZWNpcGUgZXhjZWVkZXMgbWFjaGluZXMgaW5ncmVkaWVudCBsaW1pdFwiKSB9XHJcbiAgICAgIG9iai53aGljaC5wcm9jZXNzLmluZ3JlZGllbnRzLmZvckVhY2goIChpdGVtLCBpZHgpID0+IHtidWZmZXIuaXRlbXNbaWR4XSA9IHtuYW1lOiBpdGVtLm5hbWUsIGNvdW50OiAwfTsgfSlcclxuICAgIH1cclxuICAgIGlmKG9iai5hdC5lbnRpdHkuYnVmZmVycy5vdXQpIHtcclxuICAgICAgbGV0IGJ1ZmZlciA9IElnb3IuZ2V0SWQob2JqLmF0LmVudGl0eS5idWZmZXJzLm91dClcclxuICAgICAgaWYoYnVmZmVyLnN0YWNrczxvYmoud2hpY2gucHJvY2Vzcy5yZXN1bHRzLmxlbmd0aCkgeyByZXR1cm4gSWdvci52aWV3Lndhcm5Ub2FzdChcIlJlY2lwZSBleGNlZWRlcyBtYWNoaW5lcyByZXN1bHRzIGxpbWl0XCIpIH1cclxuICAgICAgb2JqLndoaWNoLnByb2Nlc3MucmVzdWx0cy5mb3JFYWNoKCAoaXRlbSwgaWR4KSA9PiB7YnVmZmVyLml0ZW1zW2lkeF0gPSB7bmFtZTogaXRlbS5uYW1lLCBjb3VudDogMH07fSlcclxuICAgIH1cclxuICAgIG9iai5hdC5lbnRpdHkucHJvY2Vzc190aW1lciA9IE5hTlxyXG4gIH1cclxufVxyXG5JZ29ySnMucHJvdmlkZV9DQ0MoXCJlbnRpdHkuc2V0UHJvY2Vzc1wiLCBFbnRpdHlTZXRQcm9jZXNzLCBFbnRpdHlTZXRQcm9jZXNzU2lnKVxyXG5cclxuZnVuY3Rpb24gRW50aXR5Q2xlYXJQcm9jZXNzKGVudGl0eSwgYXJncywgcmV0dXJuT2JqLCBJZ29yKSB7XHJcbiAgaWYoZW50aXR5LmJ1ZmZlcnMuaW4pIHtcclxuICAgIGlmKGVudGl0eS5wcm9jZXNzX3RpbWVyKSB7XHJcbiAgICAgIElnb3IucHJvY2Vzc1RFTVAoXCJwbGF5ZXIuaW52ZW50b3J5XCIsIFwiaW52ZW50b3J5LmFkZFwiLCB7aXRlbVN0YWNrczogZW50aXR5LnByb2Nlc3NpbmcuaW5ncmVkaWVudHN9KVxyXG4gICAgfVxyXG4gICAgbGV0IGJ1ZmZlciA9IElnb3IuZ2V0SWQoZW50aXR5LmJ1ZmZlcnMuaW4pXHJcbiAgICBJZ29yLnByb2Nlc3NURU1QKFwicGxheWVyLmludmVudG9yeVwiLCBcImludmVudG9yeS5hZGRcIiwge2l0ZW1TdGFja3M6IGJ1ZmZlci5pdGVtc30pXHJcbiAgICAvLyEgSWYgYXJncy5yZXR1cm5UbyBpcyBmdWxsLCAnaW52ZW50b3J5LmFkZCcgd2lsbCBmYWlsIHNpbGVudGx5XHJcbiAgICBidWZmZXIuaXRlbXMubGVuZ3RoID0gMFxyXG4gICAgYnVmZmVyLnhmZXJTdGFjayA9IDBcclxuICAgIGJ1ZmZlci5zdGFsbGVkID0gZmFsc2VcclxuICB9XHJcbiAgaWYoZW50aXR5LmJ1ZmZlcnMub3V0KSB7XHJcbiAgICBsZXQgYnVmZmVyID0gSWdvci5nZXRJZChlbnRpdHkuYnVmZmVycy5vdXQpXHJcbiAgICBJZ29yLnByb2Nlc3NURU1QKFwicGxheWVyLmludmVudG9yeVwiLCBcImludmVudG9yeS5hZGRcIiwge2l0ZW1TdGFja3M6IGJ1ZmZlci5pdGVtc30pXHJcbiAgICAvLyEgSWYgYXJncy5yZXR1cm5UbyBpcyBmdWxsLCAnaW52ZW50b3J5LmFkZCcgd2lsbCBmYWlsIHNpbGVudGx5XHJcbiAgICBidWZmZXIuaXRlbXMubGVuZ3RoID0gMFxyXG4gICAgYnVmZmVyLnhmZXJTdGFjayA9IDBcclxuICAgIGJ1ZmZlci5zdGFsbGVkID0gZmFsc2VcclxuICB9XHJcbiAgaWYoZW50aXR5LmJ1ZmZlcnMuc3RhbGxlZCkge1xyXG4gICAgSWdvci5wcm9jZXNzVEVNUChcInBsYXllci5pbnZlbnRvcnlcIiwgXCJpbnZlbnRvcnkuYWRkXCIsIHtpdGVtU3RhY2tzOiBlbnRpdHkuYnVmZmVycy5zdGFsbGVkfSlcclxuICAgIGVudGl0eS5idWZmZXJzLnN0YWxsZWQgPSBudWxsXHJcbiAgfVxyXG4gIGVudGl0eS5wcm9jZXNzaW5nID0gbnVsbFxyXG59XHJcbklnb3JKcy5hZGRPcGVyYXRpb24oXCJlbnRpdHkuY2xlYXJQcm9jZXNzXCIsIEVudGl0eUNsZWFyUHJvY2VzcylcclxuXHJcblxyXG4vKlxyXG4gIEJ1ZmZlcnNcclxuICovXHJcbklnb3JKcy5zZXRTdGF0aWMoXCJlbnRpdHlCdWZmZXIuc2l6ZUV4cGFuc2lvbkNvc3RcIiwgW3tuYW1lOiBcImlyb24tY2hlc3RcIiwgY291bnQ6IDF9XSlcclxuSWdvckpzLnNldFN0YXRpYyhcImVudGl0eUJ1ZmZlci54ZmVyRXhwYW5zaW9uQ29zdFwiLCBbe25hbWU6IFwiaW5zZXJ0ZXJcIiwgICBjb3VudDogMX1dKVxyXG5cclxuY29uc3QgTmV3RW50aXR5QnVmZmVyID0gKHBhcmFtcywgbmV3T2JqLCBJZ29yKSA9PiB7XHJcbiAgbmV3T2JqLnVwZ3JhZGVzID0ge31cclxuICBuZXdPYmoubWF4U3RhY2tzID0gcGFyYW1zLnN0YXRpY1N0YWNrcz8ubGVuZ3RoIHx8IHBhcmFtcy5zdGFja3MgfHwgMVxyXG4gIG5ld09iai5zdGFja1NpemUgPSBwYXJhbXMuc3RhY2tTaXplIHx8IDVcclxuICBuZXdPYmouaXRlbXMgPSAocGFyYW1zLnN0YXRpY1N0YWNrcz8ubWFwKCh4KSA9PiB7cmV0dXJuIHtuYW1lOiB4LCBjb3VudDogMH19KSkgfHwgW11cclxuICBuZXdPYmoueGZlciA9IDBcclxuICBuZXdPYmoueGZlclRpY2tzID0gMTIwXHJcbiAgbmV3T2JqLnhmZXJTdGFjayA9IDBcclxuICBuZXdPYmouYnVzU2hpZnQgPSAwXHJcbiAgbmV3T2JqLnhmZXJUaW1lciA9IE5hTlxyXG4gIG5ld09iai5yZXN0cmljdGFibGUgPSBwYXJhbXMucmVzdHJpY3RhYmxlIHx8IGZhbHNlXHJcbiAgbmV3T2JqLmNvbm5lY3Rpb24gPSBudWxsXHJcbiAgbmV3T2JqLmRpciA9IHBhcmFtcy5kaXJcclxuICByZXR1cm4gW25ld09ial1cclxufVxyXG5OZXdFbnRpdHlCdWZmZXIuX2RlbGV0ZSA9IChvYmosIElnb3IpID0+IHtcclxuICBsZXQgaW52ID0gSWdvci5nZXROYW1lZE9iamVjdChcInBsYXllci5pbnZlbnRvcnlcIilcclxuICBvYmoudXBncmFkZXMuYnVmZmVyU2l6ZT8uY291bnQgJiYgSWdvci5wcm9jZXNzVEVNUChpbnYsIFwiaW52ZW50b3J5LmFkZFwiLCB7aXRlbVN0YWNrczogSWdvci5nZXRTdGF0aWMoXCJlbnRpdHlCdWZmZXIuc2l6ZUV4cGFuc2lvbkNvc3RcIiksIG11bHRpOiBvYmoudXBncmFkZXMuYnVmZmVyU2l6ZS5jb3VudCB9KVxyXG4gIG9iai51cGdyYWRlcy5sb2FkZXI/LmNvdW50ICAgICAmJiBJZ29yLnByb2Nlc3NURU1QKGludiwgXCJpbnZlbnRvcnkuYWRkXCIsIHtpdGVtU3RhY2tzOiBJZ29yLmdldFN0YXRpYyhcImVudGl0eUJ1ZmZlci54ZmVyRXhwYW5zaW9uQ29zdFwiKSwgbXVsdGk6IG9iai51cGdyYWRlcy5sb2FkZXIuY291bnQgfSlcclxufVxyXG5jb25zdCBFbnRpdHlCdWZmZXJBY3Rpb25zID0ge31cclxuRW50aXR5QnVmZmVyQWN0aW9ucy5Db2xsZWN0ID0gKG9iaiwgSWdvcikgPT4ge1xyXG4gIGxldCBidWZmZXIgPSBJZ29yLmdldElkKG9iai53aGljaC5idWZmZXIpXHJcbiAgbGV0IGlkeCA9IGJ1ZmZlci5pdGVtcy5maW5kSW5kZXgoICh4KSA9PiB7IHJldHVybiB4Lm5hbWU9PW9iai5pdGVtLm5hbWUgfSlcclxuICBpZihpZHg9PS0xKSB7IGNvbnNvbGUud2FybihcIkRpZG50JyBmaW5kIHRoZSByaWdodCBpbmRleFwiKTsgZGVidWdnZXIgfVxyXG4gIGlmKGJ1ZmZlci5pdGVtc1tpZHhdLmNvdW50PT09MCkgcmV0dXJuXHJcbiAgSWdvci5wcm9jZXNzVEVNUChcInBsYXllci5pbnZlbnRvcnlcIiwgXCJpbnZlbnRvcnkuYWRkXCIsIHtpdGVtU3RhY2tzOiBidWZmZXIuaXRlbXNbaWR4XX0pXHJcbiAgYnVmZmVyLml0ZW1zW2lkeF0uY291bnQgPSAwXHJcblxyXG4gIElnb3IuZ2V0SWQoYnVmZmVyLiRfcGFyZW50KS4kX3RhZ3MucHVzaChcInRpY2tcIiwgXCJwcm9jZXNzaW5nXCIpXHJcbiAgSWdvci52aWV3LnNpZ25hbGVyLnNpZ25hbChcImJ1ZmZlclVwZGF0ZVwiKVxyXG4gIGJ1ZmZlci51cGdyYWRlcy5sb2FkZXI/LmNvdW50ICYmIGJ1ZmZlci4kX3RhZ3MucHVzaChcInRpY2tcIiwgXCJwcm9jZXNzaW5nXCIpXHJcbn1cclxuRW50aXR5QnVmZmVyQWN0aW9ucy5Db2xsZWN0LnNpZ25hdHVyZSA9IHtcclxuICB3aGljaDogJ2J1ZmZlcicsXHJcbiAgaXRlbTogJ25hbWUnLFxyXG59XHJcbkVudGl0eUJ1ZmZlckFjdGlvbnMuQ29sbGVjdC5DQ19wcm92aWRlID0gXCJlbnRpdHkuYnVmZmVyQ29sbGVjdFwiXHJcblxyXG5cclxuRW50aXR5QnVmZmVyQWN0aW9ucy5GaWxsID0gKG9iaiwgSWdvcikgPT4ge1xyXG4gIGxldCBidWZmZXIgPSBJZ29yLmdldElkKG9iai53aGljaC5idWZmZXIpXHJcbiAgbGV0IGlkeCA9IGJ1ZmZlci5pdGVtcy5maW5kSW5kZXgoICh4KSA9PiB7IHJldHVybiB4Lm5hbWU9PW9iai5pdGVtLm5hbWV9KVxyXG4gIGlmKGlkeD09LTEpIHsgY29uc29sZS53YXJuKFwiRGlkbnQnIGZpbmQgdGhlIHJpZ2h0IGluZGV4XCIpOyBkZWJ1Z2dlciB9XHJcbiAgbGV0IGF2YWlsID0gSWdvci5wcm9jZXNzVEVNUChcInBsYXllci5pbnZlbnRvcnlcIiwgXCJpbnZlbnRvcnkudG90YWxcIiwge25hbWU6IGJ1ZmZlci5pdGVtc1tpZHhdLm5hbWV9KVxyXG4gIGlmKGF2YWlsPT09MCkgcmV0dXJuXHJcbiAgbGV0IHRvTW92ZSA9IG9iai5zZXJ2aWNlLnJvdW5kZXIuY2FsYyhidWZmZXIuaXRlbXNbaWR4XS5jb3VudCwgYnVmZmVyLnN0YWNrU2l6ZSwgYXZhaWwpXHJcbiAgSWdvci5wcm9jZXNzVEVNUChcInBsYXllci5pbnZlbnRvcnlcIiwgXCJpbnZlbnRvcnkuY29uc3VtZVwiLCB7aXRlbVN0YWNrczoge25hbWU6IGJ1ZmZlci5pdGVtc1tpZHhdLm5hbWUsIGNvdW50OiB0b01vdmV9fSlcclxuICBidWZmZXIuaXRlbXNbaWR4XS5jb3VudCArPSB0b01vdmVcclxuXHJcbiAgSWdvci5nZXRJZChidWZmZXIuJF9wYXJlbnQpLiRfdGFncy5wdXNoKFwidGlja1wiLCBcInByb2Nlc3NpbmdcIilcclxuICBJZ29yLnZpZXcuc2lnbmFsZXIuc2lnbmFsKFwiYnVmZmVyVXBkYXRlXCIpXHJcbiAgYnVmZmVyLnVwZ3JhZGVzLmxvYWRlcj8uY291bnQgJiYgYnVmZmVyLiRfdGFncy5wdXNoKFwidGlja1wiLCBcInByb2Nlc3NpbmdcIilcclxufVxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLkZpbGwuc2lnbmF0dXJlID0ge1xyXG4gIHdoaWNoOiAnYnVmZmVyJyxcclxuICBpdGVtOiAnbmFtZScsXHJcbiAgc2VydmljZTogJ3JvdW5kZXInLFxyXG59XHJcbkVudGl0eUJ1ZmZlckFjdGlvbnMuRmlsbC5DQ19wcm92aWRlID0gXCJlbnRpdHkuYnVmZmVyRmlsbFwiXHJcblxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLkNsaWNrQ3ljbGUgPSAob2JqLCBJZ29yKSA9PiB7XHJcbiAgLy8gVGhlIHB1cnBvc2UgaXMgdG8gY3ljbGUgYmV0d2VlbiBidWZmZXJfZmlsbCBhbmQgYnVmZmVyX2NvbGxlY3RcclxuICBsZXQgYnVmZmVyID0gSWdvci5nZXRJZChvYmoud2hpY2guYnVmZmVyKVxyXG4gIGxldCBpdGVtRWxtID0gYnVmZmVyLml0ZW1zLmZpbmQoKHgpPT4ge3JldHVybiB4Lm5hbWU9PW9iai5pdGVtLm5hbWV9KVxyXG4gIGRlYnVnZ2VyXHJcbn1cclxuRW50aXR5QnVmZmVyQWN0aW9ucy5DbGlja0N5Y2xlLnNpZ25hdHVyZSA9IHtcclxuICB3aGljaDogJ2J1ZmZlcicsXHJcbiAgaXRlbTogJ25hbWUnLFxyXG4gIHNlcnZpY2U6ICdyb3VuZGVyJ1xyXG59XHJcbkVudGl0eUJ1ZmZlckFjdGlvbnMuQ2xpY2tDeWNsZS5DQ19wcm92aWRlID0gXCJlbnRpdHkuYnVmZmVyQ3ljbGVcIlxyXG5cclxuXHJcbklnb3JKcy5zZXRTdGF0aWMoXCJlbnRpdHkuYnVmZmVyLkJVRkZFUl9TSVpFXCIsICBbNSwgMTAsIDIwLCAzMCwgNDAsIDUwXSlcclxuSWdvckpzLnNldFN0YXRpYyhcImVudGl0eS5idWZmZXIuQlVGRkVSX1NJWkUuTUFYXCIsIDUwKVxyXG5cclxuRW50aXR5QnVmZmVyQWN0aW9ucy5VcGdyYWRlID0gKG9iaiwgSWdvcikgPT4ge1xyXG4gIGxldCBidWZmZXIgPSAgSWdvci5nZXRJZChvYmoud2hpY2guYnVmZmVyKVxyXG4gIGlmKG9iai50eXBlLnN0cmluZz09XCJhdXRvbG9hZFwiKSB7XHJcbiAgICBpZihidWZmZXIudXBncmFkZXMubG9hZGVyPy5jb3VudD49MTApIHJldHVybiBJZ29yLnZpZXcud2FyblRvYXN0KFwiTG9hZGVycyBmdWxsXCIpXHJcbiAgICBpZighSWdvci5wcm9jZXNzVEVNUChvYmoucGxheWVyLmludmVudG9yeSwgXCJpbnZlbnRvcnkuY29uc3VtZVwiLCB7aXRlbVN0YWNrczoge25hbWU6IFwiaW5zZXJ0ZXJcIiwgY291bnQ6IDF9fSkpIHJldHVybiBJZ29yLnZpZXcud2FyblRvYXN0KFwiSW5zZXJ0ZXIgcmVxdWlyZWRcIilcclxuICAgICFidWZmZXIudXBncmFkZXMubG9hZGVyICYmIChidWZmZXIudXBncmFkZXMubG9hZGVyID0ge2NvdW50OiAwfSlcclxuICAgIGJ1ZmZlci51cGdyYWRlcy5sb2FkZXIuY291bnQrK1xyXG4gICAgYnVmZmVyLnhmZXJUaW1lciB8fCAoYnVmZmVyLnhmZXJUaW1lciA9IGJ1ZmZlci54ZmVyVGlja3MpXHJcbiAgICBidWZmZXIueGZlcisrXHJcbiAgICBidWZmZXIuJF90YWdzLnB1c2goXCJ0aWNrXCIsIFwicHJvY2Vzc2luZ1wiKVxyXG4gIH0gZWxzZSBpZihvYmoudHlwZS5zdHJpbmc9PVwiYnVmZmVyXCIpIHtcclxuICAgIGlmKGJ1ZmZlci51cGdyYWRlcy5idWZmZXJTaXplPy5jb3VudD49NikgcmV0dXJuIElnb3Iudmlldy53YXJuVG9hc3QoXCJDaGVzdHMgZnVsbFwiKVxyXG4gICAgaWYoIUlnb3IucHJvY2Vzc1RFTVAob2JqLnBsYXllci5pbnZlbnRvcnksIFwiaW52ZW50b3J5LmNvbnN1bWVcIiwge2l0ZW1TdGFja3M6IHtuYW1lOiBcImlyb24tY2hlc3RcIiwgY291bnQ6IDF9fSkpIHJldHVybiBJZ29yLnZpZXcud2FyblRvYXN0KFwiSXJvbiBjaGVzdCByZXF1aXJlZFwiKVxyXG5cclxuICAgICFidWZmZXIudXBncmFkZXMuYnVmZmVyU2l6ZSAmJiAoYnVmZmVyLnVwZ3JhZGVzLmJ1ZmZlclNpemUgPSB7Y291bnQ6IDB9KVxyXG4gICAgYnVmZmVyLnVwZ3JhZGVzLmJ1ZmZlclNpemUuY291bnQrK1xyXG4gICAgYnVmZmVyLnN0YWNrU2l6ZSA9IElnb3IuZ2V0U3RhdGljKFwiZW50aXR5LmJ1ZmZlci5CVUZGRVJfU0laRVwiKVtidWZmZXIudXBncmFkZXMuYnVmZmVyU2l6ZS5jb3VudF0gfHwgSWdvci5nZXRTdGF0aWMoXCJlbnRpdHkuYnVmZmVyLkJVRkZFUl9TSVpFLk1BWFwiKVxyXG4gIH1cclxufVxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLlVwZ3JhZGUuc2lnbmF0dXJlID0ge1xyXG4gIHdoaWNoOiBcImJ1ZmZlclwiLFxyXG4gIHR5cGU6IFwic3RyaW5nXCIsXHJcbiAgcGxheWVyOiAnaW52ZW50b3J5JyxcclxufVxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLlVwZ3JhZGUuQ0NfcHJvdmlkZSA9IFwiZW50aXR5LmJ1ZmZlclVwZ3JhZGVcIlxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLlNldFJlc3RyaWN0aW9ucyA9ICh0YXJnZXQsIGFyZ3MsIHJldHVybk9iaiwgSWdvcikgPT4ge1xyXG4gIGlmKCF0YXJnZXQucmVzdHJpY3RhYmxlKSByZXR1cm5PYmouX3Jlc3VsdCA9IGZhbHNlXHJcbiAgLy9jaGVjayB0aHJvdWdoIHRoZSBsaXN0IGFuZCByZXR1cm4gdGhpbmdzIHRvIHBsYXllciBidWZmZXJcclxuICBsZXQgY29ubmVjdGVkID0gW11cclxuICBsZXQgZW1wdHlJZHhzID0gW11cclxuICB0YXJnZXQubWF4U3RhY2tzID0gYXJncy5saXN0Lmxlbmd0aFxyXG4gIGZvcihsZXQgaWR4PTA7IGlkeDx0YXJnZXQuaXRlbXMubGVuZ3RoOyBpZHgrKykgIHtcclxuICAgIGxldCB4ID0gdGFyZ2V0Lml0ZW1zW2lkeF1cclxuICAgIGlmKCF4KSB7ZW1wdHlJZHhzLnB1c2goaWR4KTsgY29udGludWV9XHJcbiAgICBpZighYXJncy5saXN0LmluY2x1ZGVzKHgubmFtZSkpIHtcclxuICAgICAgaWYoeC5jb3VudD4wKSBJZ29yLnByb2Nlc3NURU1QKFwicGxheWVyLmludmVudG9yeVwiLCBcImludmVudG9yeS5hZGRcIiwge2l0ZW1TdGFja3M6IHh9KVxyXG4gICAgICB0YXJnZXQuaXRlbXMuc3BsaWNlKGlkeCwgMSwgdW5kZWZpbmVkKVxyXG4gICAgICBlbXB0eUlkeHMucHVzaChpZHgpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25uZWN0ZWQucHVzaCh4Lm5hbWUpXHJcbiAgICAgIHgucmVzdHJpY3RlZCA9IHRydWVcclxuICAgIH1cclxuICB9XHJcbiAgLy9jb25zb2xlLmxvZyhlbXB0eUlkeHMpXHJcbiAgYXJncy5saXN0LmZvckVhY2goICh4KSA9PiB7XHJcbiAgICBpZighY29ubmVjdGVkLmluY2x1ZGVzKHgpKSB7XHJcbiAgICAgIGlmKGVtcHR5SWR4cy5sZW5ndGg+MCkge1xyXG4gICAgICAgIHRhcmdldC5pdGVtcy5zcGxpY2UoZW1wdHlJZHhzLnNwbGljZSgwLDEpLCAxLCB7bmFtZTogeCwgY291bnQ6IDAsIHJlc3RyaWN0ZWQ6dHJ1ZX0pXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInJlc3RyaWN0ZWQgc3BsaWNlIFwiK3gpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGFyZ2V0Lml0ZW1zLnB1c2goe25hbWU6IHgsIGNvdW50OiAwLCByZXN0cmljdGVkOiB0cnVlfSlcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdwdXNoIHJlc3RyaWN0ZWQ6Jyt4KVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLlNldFJlc3RyaWN0aW9ucy5JZ29yX29wZXJhdGlvbiA9IFwiYnVmZmVyLnJlc3RyaWN0TGlzdFwiXHJcbkVudGl0eUJ1ZmZlckFjdGlvbnMuSGFzUmVzdHJpY3Rpb24gPSAodGFyZ2V0LCBhcmdzLCByZXR1cm5PYmosIElnb3IpID0+IHtcclxuICBpZighdGFyZ2V0LnJlc3RyaWN0YWJsZSkgcmV0dXJuT2JqLl9yZXN1bHQgPSBmYWxzZVxyXG4gIGVsc2Uge1xyXG4gICAgdGFyZ2V0Lml0ZW1zLmZvckVhY2goICh4KSA9PiB7XHJcbiAgICAgIGlmKHgubmFtZSA9PSBhcmdzLml0ZW1OYW1lKSB7XHJcbiAgICAgICAgaWYoeC5yZXN0cmljdGVkQnkuaW5jbHVkZXMoYXJncy5saW5lSWQpKSB7XHJcbiAgICAgICAgICByZXR1cm5PYmouX3Jlc3VsdCA9IHtmb3VuZDogdHJ1ZSwgcmVzdHJpY3RlZDogdHJ1ZX1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuT2JqLl9yZXN1bHQgPSB7Zm91bmQ6IHRydWUsIHJlc3RyaWN0ZWQ6IGZhbHNlfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgIXJldHVybk9iai5fcmVzdWx0ICYmIChyZXR1cm5PYmouX3Jlc3VsdCA9IHtmb3VuZDogZmFsc2UsIHJlc3RyaWN0ZWQ6IGZhbHNlfSlcclxufVxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLkhhc1Jlc3RyaWN0aW9uLklnb3Jfb3BlcmF0aW9uID0gXCJidWZmZXIuaGFzUmVzdHJpY3Rpb25cIlxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLkNsZWFyUmVzdHJpY3Rpb24gPSAodGFyZ2V0LCBhcmdzLCByZXR1cm5PYmosIElnb3IpID0+IHtcclxuICBpZighdGFyZ2V0LnJlc3RyaWN0YWJsZSkgcmV0dXJuT2JqLl9yZXN1bHQgPSBmYWxzZVxyXG4gIGxldCBpZHggPSAtMVxyXG4gIHdoaWxlKCEoXCJfcmVzdWx0XCIgaW4gcmV0dXJuT2JqKSkge1xyXG4gICAgbGV0IHggPSB0YXJnZXQuaXRlbXNbKytpZHhdXHJcbiAgICBpZih4Lm5hbWUgPT0gYXJncy5pdGVtTmFtZSkge1xyXG4gICAgICB4LnJlc3RyaWN0ZWRCeS5zcGxpY2UoeC5yZXN0cmljdGVkQnkuaW5kZXhPZihhcmdzLmxpbmVJZCksIDEpXHJcbiAgICAgIGlmKHgucmVzdHJpY3RlZEJ5Lmxlbmd0aD09MCkge1xyXG4gICAgICAgIHRhcmdldC5pdGVtc1tpZHhdID0gbnVsbFxyXG4gICAgICAgIHJldHVybk9iai5fcmVzdWx0ID0ge2ZvdW5kOiB0cnVlLCBjbGVhcmVkOiB0cnVlfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybk9iai5fcmVzdWx0ID0ge2ZvdW5kOiB0cnVlLCBjbGVhcmVkOiBmYWxzZX1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAhcmV0dXJuT2JqLl9yZXN1bHQgJiYgKHJldHVybk9iai5fcmVzdWx0ID0ge2ZvdW5kOiBmYWxzZSwgY2xlYXJlZDogZmFsc2V9KVxyXG59XHJcblxyXG5FbnRpdHlCdWZmZXJBY3Rpb25zLkNsZWFyUmVzdHJpY3Rpb24uSWdvcl9vcGVyYXRpb24gPSBcImJ1ZmZlci5jbGVhclJlc3RyaWN0aW9uXCJcclxuRW50aXR5QnVmZmVyQWN0aW9ucy5CdXNYZmVyID0gKHRhcmdldCwgYXJncywgcmV0dXJuT2JqLCBJZ29yKSA9PiB7XHJcbiAgLy9UT0RPIG5lZWQgYmV0dGVyIHByb3RlY3Rpb25zIGZvciB0cmFuc2ZlcnNcclxuICAvL1RPRE8gbmVlZCB0byBoYW5kbGUgZGlmZmVyZW50IGl0ZW0gc3RhY2tzXHJcbiAgLy8gc2V0dXAgZmlsdGVyIHByaW9yaXRpZXMgZm9yIG91dHB1dCBcclxuICBpZihhcmdzLnRvQnVzKSB7XHJcbiAgICB3aGlsZShhcmdzLnhmZXJDb3VudD4wKSB7XHJcbiAgICAgIGlmKCF0YXJnZXQuaXRlbXNbdGFyZ2V0LmJ1c1NoaWZ0XSkgcmV0dXJuIG51bGxcclxuICAgICAgbGV0IGFkZGVkID0gSWdvci5wcm9jZXNzVEVNUChhcmdzLnRvQnVzLCBcImludmVudG9yeS5hZGRcIiwge2l0ZW1TdGFja3M6IFt7bmFtZTogdGFyZ2V0Lml0ZW1zW3RhcmdldC5idXNTaGlmdF0ubmFtZSwgY291bnQ6IGFyZ3MueGZlckNvdW50fV19KVxyXG4gICAgICBpZihhZGRlZC5jb21wbGV0ZSkge1xyXG4gICAgICAgIElnb3IucHJvY2Vzc1RFTVAodGFyZ2V0LCBcImludmVudG9yeS5jb25zdW1lXCIsIHtpdGVtU3RhY2tzOiBbe25hbWU6IHRhcmdldC5pdGVtc1t0YXJnZXQuYnVzU2hpZnRdLm5hbWUsIGNvdW50OiBhcmdzLnhmZXJDb3VudH1dfSlcclxuICAgICAgICBhcmdzLnhmZXJDb3VudD0wXHJcbiAgICAgIH0gZWxzZSBpZihhZGRlZC5wYXJ0WzBdLmNvdW50PT1hcmdzLnhmZXJDb3VudCkge1xyXG4gICAgICAgIHJldHVybk9iai5mdWxsID0gdHJ1ZVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIElnb3IucHJvY2Vzc1RFTVAodGFyZ2V0LCBcImludmVudG9yeS5jb25zdW1lXCIsIHtpdGVtU3RhY2tzOiBbe25hbWU6IHRhcmdldC5pdGVtc1t0YXJnZXQuYnVzU2hpZnRdLm5hbWUsIGNvdW50OiBhcmdzLnhmZXJDb3VudC1hZGRlZC5wYXJ0WzBdLmNvdW50fV19KVxyXG4gICAgICAgIGFyZ3MueGZlckNvdW50ID0gYWRkZWQucGFydFswXS5jb3VudFxyXG4gICAgICB9XHJcbiAgICAgICsrdGFyZ2V0LmJ1c1NoaWZ0PT10YXJnZXQuaXRlbXMubGVuZ3RoICYmICh0YXJnZXQuYnVzU2hpZnQ9MClcclxuICAgIH1cclxuICAgIHJldHVybk9iai5jb21wbGV0ZSA9IHRydWVcclxuICB9IGVsc2UgaWYgKGFyZ3MuZnJvbUJ1cykge1xyXG4gICAgbGV0IGxvb3BzID0gMFxyXG4gICAgd2hpbGUoYXJncy54ZmVyQ291bnQ+MCkge1xyXG4gICAgICBpZighdGFyZ2V0Lml0ZW1zW3RhcmdldC5idXNTaGlmdF0pIHJldHVybiBudWxsXHJcbiAgICAgIGxldCBzcGFjZSA9IHRhcmdldC5zdGFja1NpemUgLSAgdGFyZ2V0Lml0ZW1zW3RhcmdldC5idXNTaGlmdF0uY291bnRcclxuICAgICAgaWYoc3BhY2UpIHtcclxuICAgICAgICBsZXQgY29uc3VtZWQgPSBJZ29yLnByb2Nlc3NURU1QKGFyZ3MuZnJvbUJ1cywgXCJpbnZlbnRvcnkuY29uc3VtZVwiLCB7aXRlbVN0YWNrczogW3tuYW1lOiB0YXJnZXQuaXRlbXNbdGFyZ2V0LmJ1c1NoaWZ0XS5uYW1lLCBjb3VudDogTWF0aC5taW4oYXJncy54ZmVyQ291bnQsIHNwYWNlKX1dLCBwYXJ0aWFsOiB0cnVlfSlcclxuICAgICAgICBpZihjb25zdW1lZFswXS5jb3VudD4wKSB7XHJcbiAgICAgICAgICBJZ29yLnByb2Nlc3NURU1QKHRhcmdldCwgXCJpbnZlbnRvcnkuYWRkXCIsIHtpdGVtU3RhY2tzOiBbe25hbWU6IHRhcmdldC5pdGVtc1t0YXJnZXQuYnVzU2hpZnRdLm5hbWUsIGNvdW50OiBjb25zdW1lZFswXS5jb3VudH1dfSlcclxuICAgICAgICAgIGFyZ3MueGZlckNvdW50LT1jb25zdW1lZFswXS5jb3VudFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZigrK2xvb3BzPT10YXJnZXQuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuT2JqLmZ1bGwgPSB0cnVlXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuICAgICAgKyt0YXJnZXQuYnVzU2hpZnQ9PXRhcmdldC5pdGVtcy5sZW5ndGggJiYgKHRhcmdldC5idXNTaGlmdD0wKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuT2JqLmNvbXBsZXRlID0gdHJ1ZVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLndhcm4oXCJCdXNYZmVyIGNhbGxlZCBfXyBubyBidXMgdGFyZ2V0XCIpXHJcbiAgfVxyXG59XHJcbkVudGl0eUJ1ZmZlckFjdGlvbnMuQnVzWGZlci5JZ29yX29wZXJhdGlvbiA9IFwiYnVmZmVyLmJ1c1hmZXJcIlxyXG5cclxuRW50aXR5QnVmZmVyQWN0aW9ucy5CdWZmZXJTdGFsbGVkID0gKGJ1ZmZlciwgYXJncywgcmV0dXJuT2JqLCBJZ29yKSA9PiB7XHJcbiAgLyogbW9yZSBhZHZhbmNlZCBzdGFsbCBoYW5kbGluZywgdGhlbiByZXR1cm4qL1xyXG4gIGJ1ZmZlci5zdGFsbGVkKytcclxuICBpZiAoYnVmZmVyLnN0YWxsZWQ+PWJ1ZmZlci5pdGVtcy5sZW5ndGgpIHtcclxuICAgIGJ1ZmZlci4kX3RhZ3MuZGVsZXRlKFwidGlja1wiKVxyXG4gICAgYnVmZmVyLnN0YWxsZWQgPSBmYWxzZVxyXG4gIH1cclxuICBidWZmZXIueGZlclRpbWVyID0gTWF0aC5mbG9vcihidWZmZXIueGZlclRpY2tzLzYpXHJcbiAgKytidWZmZXIueGZlclN0YWNrPT1idWZmZXIuaXRlbXMubGVuZ3RoICYmIChidWZmZXIueGZlclN0YWNrPTApXHJcbn1cclxuRW50aXR5QnVmZmVyQWN0aW9ucy5CdWZmZXJTdGFsbGVkLklnb3Jfb3BlcmF0aW9uID0gXCJidWZmZXIuc2V0U3RhbGxcIlxyXG5cclxuRW50aXR5QnVmZmVyQWN0aW9ucy50aWNrID0gKGJ1ZmZlciwgdGlja0RhdGEsIElnb3IpID0+IHtcclxuICBpZihidWZmZXIuaXRlbXMubGVuZ3RoPT0wKSByZXR1cm5cclxuICBpZihidWZmZXIueGZlclRpbWVyKSByZXR1cm4gYnVmZmVyLnhmZXJUaW1lci0tXHJcbiAgLy9TdXJlbHkgYSBtb3JlIGVsZWdhbnQgd2F5IHRvIHJ1biB0aGlzLi4uXHJcbiAgaWYoYnVmZmVyLmRpcj09J2luJykge1xyXG4gICAgbGV0IHRvQWRkID0gTWF0aC5taW4oYnVmZmVyLnhmZXIsIGJ1ZmZlci5zdGFja1NpemUtYnVmZmVyLml0ZW1zW2J1ZmZlci54ZmVyU3RhY2tdLmNvdW50KVxyXG4gICAgaWYodG9BZGQ9PTApIHJldHVybiBJZ29yLnByb2Nlc3NURU1QKGJ1ZmZlciwgXCJidWZmZXIuc2V0U3RhbGxcIilcclxuICAgIGxldCBhY3F1aXJlZCA9IElnb3IucHJvY2Vzc1RFTVAoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJwbGF5ZXIuaW52ZW50b3J5XCJcclxuICAgICAgICAgICAgICAgICAgICAsXCJpbnZlbnRvcnkuY29uc3VtZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgLHtpdGVtU3RhY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJ1ZmZlci5pdGVtc1tidWZmZXIueGZlclN0YWNrXS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICxjb3VudDogdG9BZGRcclxuICAgICAgICAgICAgICAgICAgICAgfSwgcGFydGlhbDogdHJ1ZX0pXHJcbiAgICBpZihhY3F1aXJlZFswXS5jb3VudD09MCkgcmV0dXJuIElnb3IucHJvY2Vzc1RFTVAoYnVmZmVyLCBcImJ1ZmZlci5zZXRTdGFsbFwiKVxyXG4gICAgYnVmZmVyLml0ZW1zW2J1ZmZlci54ZmVyU3RhY2tdLmNvdW50ICs9IGFjcXVpcmVkWzBdLmNvdW50XHJcbiAgICBJZ29yLnZpZXcuc2lnbmFsZXIuc2lnbmFsKCdidWZmZXJVcGRhdGUnKVxyXG4gICAgSWdvci5nZXRJZChidWZmZXIuJF9wYXJlbnQpLiRfdGFncy5wdXNoKFwidGlja1wiLCBcInByb2Nlc3NpbmdcIilcclxuICAgIGJ1ZmZlci5zdGFsbGVkID0gZmFsc2VcclxuICAgIGJ1ZmZlci54ZmVyVGltZXIgPSBidWZmZXIueGZlclRpY2tzXHJcbiAgICArK2J1ZmZlci54ZmVyU3RhY2s9PWJ1ZmZlci5pdGVtcy5sZW5ndGggJiYgKGJ1ZmZlci54ZmVyU3RhY2s9MClcclxuICB9IGVsc2Uge1xyXG4gICAgbGV0IHhmZXIgPSBidWZmZXIuaXRlbXNbYnVmZmVyLnhmZXJTdGFja11cclxuICAgIFxyXG4gICAgbGV0IGFkZGVkID0gSWdvci5wcm9jZXNzVEVNUChcclxuICAgICAgICAgICAgICAgICAgIFwicGxheWVyLmludmVudG9yeVwiXHJcbiAgICAgICAgICAgICAgICAgICAsXCJpbnZlbnRvcnkuYWRkXCJcclxuICAgICAgICAgICAgICAgICAgICx7aXRlbVN0YWNrczogeyBcclxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHhmZXIubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgLGNvdW50OiBNYXRoLm1pbih4ZmVyLmNvdW50LCBidWZmZXIueGZlcilcclxuICAgICAgICAgICAgICAgICAgIH0sIHN0YWNrTGltaXQ6IDF9KVxyXG4gICAgLy9jb25zb2xlLmxvZyhhZGRlZClcclxuICAgIGlmKCFhZGRlZC5jb21wbGV0ZSkgcmV0dXJuIElnb3IucHJvY2Vzc1RFTVAoYnVmZmVyLCBcImJ1ZmZlci5zZXRTdGFsbFwiKVxyXG4gICAgYnVmZmVyLnhmZXJUaW1lciA9IGJ1ZmZlci54ZmVyVGlja3NcclxuICAgIHhmZXIuY291bnQgLT0gTWF0aC5taW4oeGZlci5jb3VudCwgYnVmZmVyLnhmZXIpXHJcbiAgICBJZ29yLnZpZXcuc2lnbmFsZXIuc2lnbmFsKFwiYnVmZmVyVXBkYXRlXCIpXHJcbiAgICBJZ29yLmdldElkKGJ1ZmZlci4kX3BhcmVudCkuJF90YWdzLnB1c2goXCJ0aWNrXCIsIFwicHJvY2Vzc2luZ1wiKVxyXG4gIH1cclxufVxyXG5cclxuSWdvckpzLmRlZmluZU9iaihcImVudGl0eS5idWZmZXJcIiwgTmV3RW50aXR5QnVmZmVyLCBFbnRpdHlCdWZmZXJBY3Rpb25zKVxyXG5cclxuXHJcblxyXG4vKlxyXG4gKiAgUmVzZWFyY2ggUmVsYXRlZFxyXG4gKlxyXG4gKi9cclxuXHJcbmNvbnN0IFNldFJlc2VhcmNoU2lnID0ge1xyXG4gIFwid2hpY2hcIjogXCJ0ZWNoXCIsXHJcbiAgXCJnbG9iYWxcIjogXCJnYW1lXCJcclxufVxyXG5jb25zdCBTZXRSZXNlYXJjaCA9ICAob2JqLCBJZ29yLCBzZWxmKSA9PiB7XHJcbiAgb2JqLmdsb2JhbC5nYW1lLnJlc2VhcmNoLnByb2dyZXNzaW5nID0gb2JqLndoaWNoLnRlY2hcclxuICBvYmouZ2xvYmFsLmdhbWUucmVzZWFyY2gucHJvZ3Jlc3NpbmcuY29tcGxldGVVbml0cyA9IDBcclxufVxyXG5cclxuSWdvckpzLnByb3ZpZGVfQ0NDKFwicmVzZWFyY2guc2V0XCIsIFNldFJlc2VhcmNoLCBTZXRSZXNlYXJjaFNpZylcclxuXHJcbmNvbnN0IENsZWFyUmVzZWFyY2hTaWcgPSB7XHJcbiAgXCJnbG9iYWxcIjogXCJnYW1lXCJcclxufVxyXG5jb25zdCBDbGVhclJlc2VhcmNoID0gKG9iaiwgSWdvciwgc2VsZikgPT4ge1xyXG4gIG9iai5nbG9iYWwuZ2FtZS5yZXNlYXJjaC5wcm9ncmVzc2luZyA9IG51bGxcclxufVxyXG5JZ29ySnMucHJvdmlkZV9DQ0MoXCJyZXNlYXJjaC5jbGVhclwiLCBDbGVhclJlc2VhcmNoLCBDbGVhclJlc2VhcmNoU2lnKVxyXG5cclxuLy9SZXR1cm5zIGV4dHJhIHBvcnRpb24sIGJ1dCBJIGRvbid0IGhhdmUgYSBnb29kIHNvbHV0aW9uXHJcbi8vVG8gYWRkaW5nIGl0IGJhY2sgdG8gdGhlIGZhY3RvcnlCbG9ja1xyXG5jb25zdCBSZXNlYXJjaFVwZGF0ZSA9IChvYmosIGFyZ3MsIHJldHVybk9iaiwgSWdvcikgPT4ge1xyXG4gIGxldCBnbG9iYWwgPSBJZ29yLmdldE5hbWVkT2JqZWN0KFwiZ2xvYmFsXCIpXHJcbiAgb2JqLmNvbXBsZXRlVW5pdHMgKz0gYXJncy5jb3VudCB8fCAxXHJcbiAgaWYob2JqLmNvbXBsZXRlVW5pdHM+PW9iai5jb3N0LmNvdW50KSB7XHJcbiAgICBJZ29yLnZpZXcuZ29vZFRvYXN0KFwiUmVzZWFyY2ggQ29tcGxldGU6IFwiK29iai5uYW1lKVxyXG4gICAgcmV0dXJuT2JqLl9yZXN1bHQgPSBvYmouY29tcGxldGVVbml0cy1vYmouY29zdC5jb3VudFxyXG4gICAgSWdvci5nZXROYW1lZE9iamVjdChcInJlc2VhcmNoXCIpLnByb2dyZXNzaW5nID0gbnVsbFxyXG4gICAgb2JqLnJlc2VhcmNoZWQgPSB0cnVlXHJcbiAgICBnbG9iYWwucmVzZWFyY2guY29tcGxldGVkW29iai5uYW1lXSA9IHRydWVcclxuICAgIG9iai51bmxvY2tzLmZvckVhY2goIChpdGVtKSA9PiB7XHJcbiAgICAgIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyAmJiBJZ29yLnByb2Nlc3NURU1QKGl0ZW0sIFwicmVjaXBlLnVubG9ja1wiKVxyXG4gICAgICB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgSWdvci5wcm9jZXNzVEVNUChpdGVtLCBcImZlYXR1cmUudW5sb2NrXCIpXHJcbiAgICB9KVxyXG4gICAgbGV0IGNvc3QgPSBvYmouY29zdC5pbmdyZWRpZW50cy5tYXAoKFtuYW1lLCBxdHldKSA9PiB7cmV0dXJuIHtuYW1lLCBjb3VudDpxdHl9fSlcclxuICAgIC8vVE9ETyEgbmVlZCB0byB1cGRhdGUgdGhpcyB0byByZXNwb25kIHRvIGRpZmZlcmVudCB0ZWNoIHRyZWVzXHJcbiAgICBnbG9iYWwucGxheWVyLndvcmtzaG9wLmVudGl0aWVzLmZvckVhY2goICh4KSA9PiB7XHJcbiAgICAgIGxldCBlbnQgPSBJZ29yLmdldElkKHgpXHJcbiAgICAgIGlmKGVudC5uYW1lPT1cImxhYlwiKSB7XHJcbiAgICAgICAgSWdvci5wcm9jZXNzVEVNUChlbnQuYnVmZmVycy5pbiwgXCJpbnZlbnRvcnkuYWRkXCIsIHtpdGVtU3RhY2tzOiBjb3N0LCBmb3JjZTogdHJ1ZX0pXHJcbiAgICAgICAgZW50LnJlc2VhcmNoX3RpbWVyID0gTmFOXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICBnbG9iYWwuZmFjQmxvY2tzLnRlY2hCbG9ja3MuZm9yRWFjaCggKHgpID0+IHtcclxuICAgICAgaWYoYXJncy5tZT09eCkgcmV0dXJuXHJcbiAgICAgIGxldCBibG9jayA9IElnb3IuZ2V0SWQoeClcclxuICAgICAgaWYoYmxvY2sucmVzZWFyY2hfY29uc3VtZWQpIHtcclxuICAgICAgICBJZ29yLnByb2Nlc3NURU1QKGJsb2NrLmJ1ZmZlcnMuaW4sIFwiaW52ZW50b3J5LmFkZFwiLCB7aXRlbVN0YWNrczogY29zdCwgZm9yY2U6IHRydWUsIG11bHRpOiByZXNlYXJjaF9jb25zdW1lZH0pXHJcbiAgICAgICAgYmxvY2sucmVzZWFyY2hfY29uc3VtZWQgPSAwIFxyXG4gICAgICAgIGJsb2NrLnJlc2VhcmNoX3RpY2tzID0gTmFOXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICBDaGFtZUpzLnNpZ25hbGVyLnNpZ25hbChcInRlY2hSZXNlYXJjaGVkXCIpXHJcbiAgfVxyXG59XHJcblxyXG5JZ29ySnMuYWRkT3BlcmF0aW9uKFwicmVzZWFyY2gudXBkYXRlXCIsIFJlc2VhcmNoVXBkYXRlKVxyXG5cclxuY29uc3QgUmVjaXBlVW5sb2NrID0gKG9iaiwgYXJncywgcmV0dXJuT2JqLCBJZ29yKSA9PiB7XHJcbiAgLy9JZ29yLmRhdGEucmVjaXBlW29ial0uZW5hYmxlZCA9IHRydWVcclxuICBJZ29yLmdldE5hbWVkT2JqZWN0KFwiZ2xvYmFsXCIpLnVubG9ja2VkX3JlY2lwZXMucHVzaChvYmopXHJcbn1cclxuSWdvckpzLmFkZE9wZXJhdGlvbihcInJlY2lwZS51bmxvY2tcIiwgUmVjaXBlVW5sb2NrKVxyXG5cclxuY29uc3QgRmVhdHVyZVVubG9jayA9IChvYmosIGFyZ3MsIHJldHVybk9iaiwgSWdvcikgPT4ge1xyXG4gIGxldCBmZWF0dXJlcyA9IElnb3IuZ2V0TmFtZWRPYmplY3QoXCJnbG9iYWxcIikuYWN0aXZlRmVhdHVyZXNcclxuICBpZihmZWF0dXJlc1tvYmouZmVhdHVyZV0pIHtcclxuICAgIGZlYXR1cmVzW29iai5mZWF0dXJlXSA9IG9ialxyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyEgbmVlZHMgc29tZXRoaW5nIG1vcmUgZWxlZ2FudC4uLlxyXG4gICAgaWYob2JqLmZlYXR1cmU9PVwiZmFjdG9yeUJsb2Nrc1wiKSB7XHJcbiAgICAgIGxldCBibG9ja3MgPSBJZ29yLmdldE5hbWVkT2JqZWN0KFwiZ2xvYmFsXCIpLmZhY0Jsb2Nrcy5ibG9ja3NcclxuICAgICAgaWYob2JqLmJsb2Nrc01heFNvdXJjZXMpIHtcclxuICAgICAgICBibG9ja3MuZm9yRWFjaCggKGlkKSA9PiB7XHJcbiAgICAgICAgICBJZ29yLmdldElkKGlkKS5jb25uZWN0aW9ucy5tYXhTb3VyY2VzID0gb2JqLmJsb2Nrc01heFNvdXJjZXNcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICAgIGlmKG9iai5ibG9ja3NNYXhEcmFpbnMpIHtcclxuICAgICAgICBibG9ja3MuZm9yRWFjaCggKGlkKSA9PiB7XHJcbiAgICAgICAgICBJZ29yLmdldElkKGlkKS5jb25uZWN0aW9ucy5tYXhEcmFpbnMgPSBvYmouYmxvY2tzTWF4RHJhaW5zXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVidWdnZXJcclxuICAgIE9iamVjdC5hc3NpZ24oZmVhdHVyZXNbb2JqLmZlYXR1cmVdLCBvYmopXHJcbiAgfVxyXG5cclxuICAvKlxyXG4gIGFkanVzdEZlYXR1cmUob2JqKSB7XHJcbiAgICBzd2l0Y2gob2JqLmZlYXR1cmUpIHtcclxuICAgICAgY2FzZSBcImRlZmVuc2VcIjpcclxuICAgICAgICBpZighdGhpcy5hY3RpdmVGZWF0dXJlc1tcImRlZmVuc2VcIl0pIHtcclxuICAgICAgICAgIHRoaXMuYWN0aXZlRmVhdHVyZXNbXCJkZWZlbnNlXCJdID0gdHJ1ZVxyXG4gICAgICAgICAgdGhpcy5mYWNCbG9ja3MuZGVmZW5zZXMgPSBOYW1lZEJsb2Nrcy5EZWZlbnNlQmxvY2soKVxyXG4gICAgICAgICAgdGhpcy5mYWNCbG9ja3MuZGVmZW5zZUJ1cyA9IE5hbWVkQmxvY2tzLkRlZmVuc2VCdXMoKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZhY0Jsb2Nrcy5kZWZlbnNlcy5tYWNoaW5lc1tcInR1cnJldFwiXSA9IENoYW1lVmlldy5HYW1lT2JqZWN0RnJvbVBvaW50ZXIob2JqLmdvX3BvaW50ZXIpICAvLyEhISBzaG91bGRuJ3QgYmUgaW4gQ2hhbWVsZW9uXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgXCJvZmZlbnNlXCI6XHJcbiAgICAgICAgaWYoIXRoaXMuYWN0aXZlRmVhdHVyZXNbXCJvZmZlbnNlXCJdKSB7XHJcbiAgICAgICAgICB0aGlzLmFjdGl2ZUZlYXR1cmVzW1wib2ZmZW5zZVwiXSA9IHRydWVcclxuICAgICAgICAgIHRoaXMuZmFjQmxvY2tzLm9mZmVuc2VzID0gTmFtZWRCbG9ja3MuT2ZmZW5zZUJsb2NrKClcclxuICAgICAgICAgIHRoaXMuZmFjQmxvY2tzLm9mZmVuc2VCdXMgPSBOYW1lZEJsb2Nrcy5PZmZlbnNlQnVzKClcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mYWNCbG9ja3Mub2ZmZW5zZXMucmFkYXIgPSBDaGFtZVZpZXcuR2FtZU9iamVjdEZyb21Qb2ludGVyKG9iai5nb19wb2ludGVyKSAgLy8hISEgc2hvdWxkbid0IGJlIGluIENoYW1lbGVvblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiZmFjdG9yeUJsb2Nrc1wiOlxyXG4gICAgICAgIHRoaXMuYWN0aXZlRmVhdHVyZXNbXCJmYWN0b3J5QmxvY2tzXCJdID0gdHJ1ZVxyXG4gICAgfVxyXG4gICAgLy8gdGhpcy5hY3RpdmVGZWF0dXJlc1tvYmouZmVhdHVyZV0gPSBvYmoubGV2ZWwgfHwgKHRoaXMuYWN0aXZlRmVhdHVyZXNbb2JqLmZlYXR1cmVdK29iai5pbmMpIHx8ICh0aGlzLmFjdGl2ZUZlYXR1cmVzW29iai5mZWF0dXJlXSAqIG9iai5ib251cykgfHwgdHJ1ZVxyXG4gIH1cclxuICAqL1xyXG59XHJcbklnb3JKcy5hZGRPcGVyYXRpb24oXCJmZWF0dXJlLnVubG9ja1wiLCBGZWF0dXJlVW5sb2NrKVxyXG5cclxuXHJcblxyXG5jb25zdCBDcmFmdEZyb21JbnYgPSAob2JqLCBJZ29yLCBmbikgPT4ge1xyXG4gIGlmKGZuLnJlYykge1xyXG4gICAgd2luZG93LmNsZWFyVGltZW91dChmbi50aW1lb3V0KVxyXG4gICAgSWdvci5wcm9jZXNzVEVNUChvYmoucGxheWVyLmludmVudG9yeSwgXCJpbnZlbnRvcnkuYWRkXCIsIHtpdGVtU3RhY2tzOiBmbi5yZWMuaW5ncmVkaWVudHN9KVxyXG4gICAgQ2hhbWVKcy5hbmltc1VwZGF0ZShmbi5yZWMsIG51bGwsIG51bGwpXHJcbiAgICBmbi5yZWMgPSB1bmRlZmluZWRcclxuICB9IGVsc2Uge1xyXG4gICAgaWYoSWdvci5wcm9jZXNzVEVNUChvYmoucGxheWVyLmludmVudG9yeSwgXCJpbnZlbnRvcnkuY29uc3VtZVwiLCB7aXRlbVN0YWNrczogb2JqLndoaWNoLnJlY2lwZS5pbmdyZWRpZW50cyB9KSkge1xyXG4gICAgICBmbi5yZWMgPSBvYmoud2hpY2gucmVjaXBlXHJcbiAgICAgIGZuLnRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggKCkgPT4ge1xyXG4gICAgICAgIElnb3IucHJvY2Vzc1RFTVAob2JqLnBsYXllci5pbnZlbnRvcnksIFwiaW52ZW50b3J5LmFkZFwiLCB7aXRlbVN0YWNrczogZm4ucmVjLnJlc3VsdHN9KVxyXG4gICAgICAgIENoYW1lSnMuYW5pbXNVcGRhdGUoZm4ucmVjLCBudWxsLCBudWxsKVxyXG4gICAgICAgIGZuLnJlYyA9IHVuZGVmaW5lZFxyXG4gICAgICB9LCBvYmoud2hpY2gucmVjaXBlLmNyYWZ0aW5nX3NwZWVkICogMTAwMClcclxuICAgICAgZm4ucmVjID0gb2JqLndoaWNoLnJlY2lwZVxyXG4gICAgICBDaGFtZUpzLmFuaW1zVXBkYXRlKGZuLnJlYywgXCJpc0NyYWZ0aW5nXCIsIG9iai53aGljaC5yZWNpcGUuY3JhZnRpbmdfc3BlZWQpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL0Vycm9yIGFsZXJ0OiBjYW5ub3QgYnVpbGRcclxuICAgICAgSWdvci52aWV3Lndhcm5Ub2FzdChcIk5vdCBlbm91Z2ggaW5ncmVkaWVudHMgdG8gY3JhZnRcIilcclxuICAgICAgY29uc29sZS5sb2coJ2Nhbm5vdCBjcmFmdCcpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbkNyYWZ0RnJvbUludi5zaWduYXR1cmUgPSB7XHJcbiAgd2hpY2g6IFwicmVjaXBlXCIsXHJcbiAgcGxheWVyOiBcImludmVudG9yeVwiXHJcbn1cclxuXHJcbklnb3JKcy5wcm92aWRlX0NDQyhcInBsYXllci5jcmFmdFwiLCBDcmFmdEZyb21JbnYsIENyYWZ0RnJvbUludi5zaWduYXR1cmUpXHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUZBO0FBR0E7QUFIQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRkE7QUFBQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7QUFFQTs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUpBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUdBOzs7O0FBR0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRkE7QUFHQTtBQUhBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFGQTtBQUdBO0FBSEE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBREE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRkE7QUFLQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///iVpH\n");

/***/ }),

/***/ "wb4v":
/*!***********************************!*\
  !*** ./src/gameCode/Inventory.js ***!
  \***********************************/
/*! exports provided: InvXFer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InvXFer\", function() { return InvXFer; });\n/* harmony import */ var managers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! managers */ \"+Aae\");\n/* harmony import */ var ItemMgr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ItemMgr */ \"EfK0\");\n/* harmony import */ var CephlaComm_main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! CephlaComm/main */ \"0d46\");\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n/*  \r\n @options Object:\r\n  maxXfer: maximum items transfered\r\n  toAs: 'to' is default as an inventory, but we\r\n    could treat it as an EntityStore by setting \"entity\"\r\n  maxPerType: t/f ... if multiple types are provided, do we transfer upto x per type, or x total\r\n  types: array of item types\r\n  stacks: [ItemStacks]  ... this is only what we transfer in.\r\n */\n\nfunction InvXFer(obj) {\n  var from = obj.from,\n      to = obj.to,\n      options = obj.options;\n\n  if (options == null ? void 0 : options.debug) {\n    console.log(\"debug:\");\n    console.log(from);\n    console.log(to);\n    console.log(options);\n  }\n\n  if (!from || !to) debugger; //if(to==mgrs.baseApp.player.inv) debugger\n\n  if ((options == null ? void 0 : options.maxXfer) == 0) return;\n  var send = (options == null ? void 0 : options.toAs) == \"entity\" ? 'recieveItem' : 'addStack';\n  var accum = 0;\n\n  var XFer = function XFer(itemStack) {\n    (options == null ? void 0 : options.debug) && console.log(itemStack);\n    var consumed = to[send](itemStack);\n    (options == null ? void 0 : options.debug) && console.log(consumed);\n    consumed && from.consumeAll(new ItemMgr__WEBPACK_IMPORTED_MODULE_1__[\"ItemStack\"](itemStack.name, consumed));\n    if (options == null ? void 0 : options.debug) debugger;\n    return consumed;\n  };\n\n  var XFerCount = (options == null ? void 0 : options.maxXfer) ? function (count) {\n    return Math.min(count, options.maxXfer - accum);\n  } : function (count) {\n    return count;\n  };\n\n  if (options == null ? void 0 : options.stacks) {\n    for (var _iterator = _createForOfIteratorHelperLoose(options.stacks), _step; !(_step = _iterator()).done;) {\n      var each = _step.value;\n      XFer(each);\n    }\n  } else {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(from.items), _step2; !(_step2 = _iterator2()).done;) {\n      var i = _step2.value;\n      if (!i || !i.name || i.count == 0) continue;\n      if ((options == null ? void 0 : options.types) && !options.types.includes(i.name)) continue;\n      accum += XFer({\n        name: i.name,\n        count: XFerCount(i.count)\n      });\n      (options == null ? void 0 : options.debug) && console.log('accum: ' + accum);\n\n      if (options == null ? void 0 : options.maxXfer) {\n        if (options.maxXfer == accum) return;\n      }\n    }\n  }\n}\n\nfunction invUse(obj) {\n  switch (obj.how) {\n    case \"sub-n-crement\":\n      if (obj.from.consume(obj.what, obj.count) === 0) {\n        if (obj.to_prop) {\n          obj.to[obj.to_prop] += obj.count;\n        } else {\n          obj.to += obj.count;\n        }\n      }\n\n      break;\n  }\n}\n\n\nCephlaComm_main__WEBPACK_IMPORTED_MODULE_2__[\"CephlaCommConstructor\"].provide(\"invXfer2\", InvXFer);\nCephlaComm_main__WEBPACK_IMPORTED_MODULE_2__[\"CephlaCommConstructor\"].provide(\"invUse2\", invUse); // globalThis.InvXFer = InvXFer//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2I0di5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nYW1lQ29kZS9JbnZlbnRvcnkuanM/YzFiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge21ncnN9IGZyb20gJ21hbmFnZXJzJ1xyXG5pbXBvcnQge0l0ZW1TdGFja30gZnJvbSAnSXRlbU1ncidcclxuLyogIFxyXG4gQG9wdGlvbnMgT2JqZWN0OlxyXG4gIG1heFhmZXI6IG1heGltdW0gaXRlbXMgdHJhbnNmZXJlZFxyXG4gIHRvQXM6ICd0bycgaXMgZGVmYXVsdCBhcyBhbiBpbnZlbnRvcnksIGJ1dCB3ZVxyXG4gICAgY291bGQgdHJlYXQgaXQgYXMgYW4gRW50aXR5U3RvcmUgYnkgc2V0dGluZyBcImVudGl0eVwiXHJcbiAgbWF4UGVyVHlwZTogdC9mIC4uLiBpZiBtdWx0aXBsZSB0eXBlcyBhcmUgcHJvdmlkZWQsIGRvIHdlIHRyYW5zZmVyIHVwdG8geCBwZXIgdHlwZSwgb3IgeCB0b3RhbFxyXG4gIHR5cGVzOiBhcnJheSBvZiBpdGVtIHR5cGVzXHJcbiAgc3RhY2tzOiBbSXRlbVN0YWNrc10gIC4uLiB0aGlzIGlzIG9ubHkgd2hhdCB3ZSB0cmFuc2ZlciBpbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBJbnZYRmVyKG9iaikge1xyXG4gIGxldCB7ZnJvbSwgdG8sIG9wdGlvbnN9ID0gb2JqXHJcbiAgaWYob3B0aW9ucz8uZGVidWcpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiZGVidWc6XCIpXHJcbiAgICBjb25zb2xlLmxvZyhmcm9tKVxyXG4gICAgY29uc29sZS5sb2codG8pXHJcbiAgICBjb25zb2xlLmxvZyhvcHRpb25zKVxyXG4gIH1cclxuICBpZighZnJvbSB8fCAhdG8pIGRlYnVnZ2VyXHJcbiAgLy9pZih0bz09bWdycy5iYXNlQXBwLnBsYXllci5pbnYpIGRlYnVnZ2VyXHJcbiAgaWYob3B0aW9ucz8ubWF4WGZlcj09MCkgcmV0dXJuIFxyXG4gIGxldCBzZW5kID0gb3B0aW9ucz8udG9Bcz09XCJlbnRpdHlcIiA/ICdyZWNpZXZlSXRlbScgOiAnYWRkU3RhY2snXHJcbiAgbGV0IGFjY3VtID0gMFxyXG4gIGxldCBYRmVyID0gKGl0ZW1TdGFjaykgPT4ge1xyXG4gICAgb3B0aW9ucz8uZGVidWcgJiYgY29uc29sZS5sb2coaXRlbVN0YWNrKVxyXG4gICAgbGV0IGNvbnN1bWVkID0gdG9bc2VuZF0oaXRlbVN0YWNrKVxyXG4gICAgb3B0aW9ucz8uZGVidWcgJiYgY29uc29sZS5sb2coY29uc3VtZWQpXHJcbiAgICBjb25zdW1lZCAmJiBmcm9tLmNvbnN1bWVBbGwobmV3IEl0ZW1TdGFjayhpdGVtU3RhY2submFtZSwgY29uc3VtZWQpKVxyXG4gICAgaWYob3B0aW9ucz8uZGVidWcpIGRlYnVnZ2VyXHJcbiAgICByZXR1cm4gY29uc3VtZWRcclxuICB9XHJcbiAgbGV0IFhGZXJDb3VudCA9IG9wdGlvbnM/Lm1heFhmZXIgPyAoY291bnQpID0+IHtcclxuICAgIHJldHVybiBNYXRoLm1pbihjb3VudCwgb3B0aW9ucy5tYXhYZmVyLWFjY3VtKVxyXG4gIH0gOiAoY291bnQpID0+IHtcclxuICAgIHJldHVybiBjb3VudFxyXG4gIH1cclxuICBpZihvcHRpb25zPy5zdGFja3MpIHtcclxuICAgIGZvcihsZXQgZWFjaCBvZiBvcHRpb25zLnN0YWNrcykge1xyXG4gICAgICBYRmVyKGVhY2gpXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvcihsZXQgaSBvZiBmcm9tLml0ZW1zKSB7XHJcbiAgICAgIGlmKCFpIHx8ICFpLm5hbWUgfHwgIGkuY291bnQ9PTApIGNvbnRpbnVlXHJcbiAgICAgIGlmKG9wdGlvbnM/LnR5cGVzICYmICFvcHRpb25zLnR5cGVzLmluY2x1ZGVzKGkubmFtZSkpIGNvbnRpbnVlXHJcbiAgICAgIGFjY3VtICs9IFhGZXIoe1xyXG4gICAgICAgICAgbmFtZTogaS5uYW1lXHJcbiAgICAgICAgLGNvdW50OiBYRmVyQ291bnQoaS5jb3VudClcclxuICAgICAgfSlcclxuICAgICAgb3B0aW9ucz8uZGVidWcgJiYgY29uc29sZS5sb2coJ2FjY3VtOiAnK2FjY3VtKVxyXG4gICAgICBpZihvcHRpb25zPy5tYXhYZmVyKSB7XHJcbiAgICAgICAgaWYob3B0aW9ucy5tYXhYZmVyPT1hY2N1bSkgcmV0dXJuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludlVzZShvYmopIHtcclxuICBzd2l0Y2gob2JqLmhvdykge1xyXG4gICAgY2FzZSBcInN1Yi1uLWNyZW1lbnRcIjpcclxuICAgICAgaWYob2JqLmZyb20uY29uc3VtZShvYmoud2hhdCwgb2JqLmNvdW50KT09PTApIHtcclxuICAgICAgICBpZihvYmoudG9fcHJvcCkge1xyXG4gICAgICAgICAgb2JqLnRvW29iai50b19wcm9wXSArPSBvYmouY291bnRcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgb2JqLnRvICs9IG9iai5jb3VudFxyXG5cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG59XHJcblxyXG5pbXBvcnQge0NlcGhsYUNvbW1Db25zdHJ1Y3RvciBhcyBDQ0N9IGZyb20gXCJDZXBobGFDb21tL21haW5cIlxyXG5DQ0MucHJvdmlkZShcImludlhmZXIyXCIsIEludlhGZXIpXHJcbkNDQy5wcm92aWRlKFwiaW52VXNlMlwiLCBpbnZVc2UpXHJcbi8vIGdsb2JhbFRoaXMuSW52WEZlciA9IEludlhGZXJcclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFWQTtBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///wb4v\n");

/***/ })

}]);