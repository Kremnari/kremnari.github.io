(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"3Qvj":function(e,r,n){"use strict";n.d(r,"a",(function(){return c}));var t=n("aurelia-dialog"),i=n("resources/dialogs/SelectBus"),o=n("resources/dialogs/SelectRecipe"),s=n("resources/dialogs/SelectX"),c=function(){function e(e){this.ds=e,this.modals={SelectBus:i.SelectBus,SelectRecipe:o.SelectRecipe,SelectX:s.SelectX}}return e.prototype.open=function(e,r,n){var t=this;return void 0===n&&(n=!1),new Promise((function(i,o){t.ds.open({viewModel:t.modals[e],model:r,lock:n}).whenClosed((function(e){return i(e.output)}))}))},e}();c.inject=[t.DialogService]},"resources/attributes/loading":function(e,r,n){"use strict";var t;n.r(r),n.d(r,"LoadingAnimCustomAttribute",(function(){return i}));var i=function(){function e(e){this.element=e,this.inner=e.cloneNode(!0)}return e.prototype.valueChanged=function(e){e&&this.element.replaceWith(this.inner),e||this.element.replaceWith(t)},e}();i.inject=[Element],i.setLoadingElem=function(e){t=document.querySelector(e).cloneNode(!0)}},"resources/components/tabPopout":function(e,r,n){"use strict";n.r(r),n.d(r,"TabPopout",(function(){return t}));var t=function(){this.id="tabPopout"+Math.ceil(1e3*Math.random())}},"resources/components/tabPopout.html":function(e,r,n){e.exports='<template>\r\n  <require from="./tabPopout.scss"></require>\r\n  <input type="checkbox" class="tab_toggle" id.one-time="id">\r\n  <label for.one-time="id">\r\n    <slot name="tab">\r\n      Tab Name Goes Here\r\n    </slot>\r\n  </label>\r\n  <slot name="content">\r\n    Random Content!\r\n  </slot>\r\n</template>\r\n'},"resources/components/tabPopout.scss":function(e,r,n){(r=n("JPst")(!1)).push([e.i,"tab-popout{position:fixed}tab-popout>.tab_toggle{display:none}tab-popout>label{background-color:hsla(0,0%,49.8%,.5);text-align:center;margin:0;position:absolute;display:inline-block;width:16vh}tab-popout>label .tabOnly{display:inline}tab-popout [slot=content]{display:none}tab-popout>input[type=checkbox]:checked~[slot=content]{display:block;background-color:#2f4f4f;border:1px dashed #000;border-radius:8px}tab-popout>input[type=checkbox]:checked~[slot=content]>*{display:inline-block}tab-popout>input[type=checkbox]:checked~label .tabOnly{display:none}tab-popout.tab_bottom_left{bottom:0;left:0}tab-popout.tab_bottom_left>label{transform:translateX(-100%) rotate(90deg);transform-origin:bottom right;bottom:1vh;left:min(1vw,10px)}tab-popout.tab_bottom_left>.tab_toggle:checked~label{left:70px;padding:2px 75%;transform:translate(-100%,-150%) rotate(90deg)}tab-popout.tab_bottom_right{bottom:0;right:0}tab-popout.tab_bottom_right>label{transform:translateX(100%) rotate(-90deg);transform-origin:bottom left;bottom:1vh;right:min(1vw,10px)}tab-popout.tab_bottom_right>.tab_toggle:checked~label{right:70px;padding:2px 75%;transform:translate(100%,-150%) rotate(-90deg);bottom:unst}",""]),e.exports=r},"resources/dialogs/SelectBus":function(e,r,n){"use strict";n.r(r),n.d(r,"SelectBus",(function(){return i}));var t=n("aurelia-dialog"),i=function(){function e(e){this.controller=e}var r=e.prototype;return r.activate=function(e){var r;this.options=(null==(r=e.base)?void 0:r.facBlocks)||e.buses,this.selected=null},r.selectedChanged=function(e){console.log(e)},r.complete=function(){this.controller.ok({selected:this.selected})},e}();i.inject=[t.DialogController]},"resources/dialogs/SelectBus.html":function(e,r){e.exports='<template>\r\n  <ux-dialog>\r\n    <ux-dialog-header>Select Bus</ux-dialog-header>\r\n    <ux-dialog-body>\r\n      <div repeat.for="block of options" click.trigger="selected = (block == selected && undefined ) || block">\r\n        <span class.bind="block==selected && \'button\'">\r\n        ${block.name+":"+block.type}\r\n        </span>\r\n      </div>\r\n    </ux-dialog-body>\r\n    <ux-dialog-footer>\r\n      <button click.trigger="complete()">Close</button>\r\n    </ux-dialog-footer>\r\n  </ux-dialog>\r\n</template>\r\n'},"resources/dialogs/SelectRecipe":function(e,r,n){"use strict";n.r(r),n.d(r,"SelectRecipe",(function(){return o}));var t=n("aurelia-dialog"),i=n("+Aae"),o=function(){function e(e,r){this.selected=null,this.controller=e,this.mgrs=r}var r=e.prototype;return r.activate=function(e){var r,n=this;this.model=e,Object.entries(e.tags).forEach((function(e){var t=e[0],i=e[1];r=n.mgrs.rec.recipesByTags(t,i,r)})),this.recList=r},r.select=function(e){this.selected=e==this.selected?null:e},r.complete=function(){this.controller.ok({recipe:this.selected})},e}();o.inject=[t.DialogController,i.a]},"resources/dialogs/SelectRecipe.html":function(e,r){e.exports='<template>\r\n  <ux-dialog>\r\n    <ux-dialog-header>Select Recipe</ux-dialog-header>\r\n    <ux-dialog-body>\r\n      <icon-base\r\n        repeat.for="rec of recList"\r\n        item.bind="rec"\r\n        click.delegate="select(rec)"\r\n        class="${rec==selected ? \'selected\' : \'\'}"\r\n      ></icon-base>\r\n    </ux-dialog-body>\r\n    <ux-dialog-footer>\r\n      <button click.trigger="complete()">Done</button>\r\n    </ux-dialog-footer>\r\n  </ux-dialog>\r\n</template>\r\n'},"resources/dialogs/SelectX":function(e,r,n){"use strict";n.r(r),n.d(r,"SelectX",(function(){return o}));var t=n("aurelia-dialog"),i=n("+Aae"),o=function(){function e(e,r){this.selected=null,this.controller=e,this.mgrs=r}var r=e.prototype;return r.activate=function(e){this.list=e.list,this.type=e.type,this.selected=e.default},r.select=function(e){this.selected=e==this.selected?null:e},r.complete=function(){this.selected?this.selected.icon||"icon"==this.type?this.controller.ok({item:this.selected}):this.controller.ok({item:this.selected.$_id}):this.controller.ok({})},e}();o.inject=[t.DialogController,i.a]},"resources/dialogs/SelectX.html":function(e,r){e.exports='<template>\r\n  <ux-dialog>\r\n    <ux-dialog-header>Select ${type}</ux-dialog-header>\r\n    <ux-dialog-body>\r\n      <div if.bind="list[0].icon || type==\'icon\'">\r\n        <icon-base\r\n          repeat.for="each of list"\r\n          item.bind="each"\r\n          click.delegate="select(each)"\r\n          class="${each==selected ? \'selected\' : \'\'}"\r\n        >${each.name}</icon-base>\r\n      </div>\r\n      <div if.bind="!list[0].icon && type!=\'icon\'">\r\n        <p  \r\n          repeat.for="each of list"\r\n          click.delegate="select(each)"\r\n          class="${each==selected ? \'selected\' : \'\'}"\r\n          >${each.name}</p>\r\n      </div>\r\n    </ux-dialog-body>\r\n    <ux-dialog-footer>\r\n      <button click.trigger="complete()">Close</button>\r\n    </ux-dialog-footer>\r\n  </ux-dialog>\r\n</template>\r\n'},"resources/elements/active-trigger.html":function(e,r){e.exports='<template bindable="entity, tag">\r\n  <span\r\n    if.bind="entity[tag]"\r\n    click.delegate="entity[tag] = false"\r\n  >On</span>\r\n  <span\r\n    if.bind="!entity[tag]"\r\n    click.delegate="entity[tag] = true"\r\n  >Off</span>\r\n</template>\r\n'},"resources/elements/byModule/crafting-infopane.html":function(e,r,n){e.exports='<template>\r\n  <scope-var var.bind="$scope = {crafter: viewPane.showingItem}"></scope-var>\r\n  <require from="../../value-converters/lib/ObjectFilters"></require>\r\n  <style>\r\n    .overflow.recipe {\r\n      max-height: 8rem;\r\n    }\r\n  </style>\r\n  <div class="row mx-0">\r\n    <div class="container-fluid">\r\n      <div class="row">\r\n        <div \r\n          class="showRecipe col-7"\r\n          if.bind="$scope.crafter.processing"\r\n        >\r\n          <div\r\n            class="row ${$scope.crafter.process_timer!=NaN && \'progressBarBase\'}"\r\n            css="border-image-source: linear-gradient(to left, red ${$scope.crafter.process_timer/$scope.crafter.process_ticks*100}%, green ${$scope.crafter.process_timer/$scope.crafter.process_ticks*100}%)"\r\n          > \r\n            <span class="col">\r\n              <icon-base\r\n                repeat.for="ing of $scope.crafter.processing.ingredients | objectValues"\r\n                item.bind="ing.name"\r\n                required.bind="ing.amount"\r\n                count.bind="CCC.utilityFn(\'inventory.total\', $scope.crafter.buffers.in, {name: ing.name}) & signal:\'bufferUpdate\'"\r\n                click.delegate="CCC.issue(\'entity.bufferFill\', {\'which.buffer\': $scope.crafter.buffers.in, \'item.name\': ing.name}, $event)"\r\n              ></icon-base>\r\n            </span>\r\n            <span class="cycleTime">[${($scope.crafter.process_ticks/30).toFixed(1)}s]</span>\r\n            <span class="recipeBreak">=&gtcc;</span>\r\n            <span class="col">\r\n              <icon-base\r\n                repeat.for="res of $scope.crafter.processing.results | objectValues"\r\n                item.bind="res.name"\r\n                required.bind="res.amount"\r\n                count.bind="CCC.utilityFn(\'inventory.total\', $scope.crafter.buffers.out, {name: res.name}) & signal:\'bufferUpdate\'"\r\n                click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': $scope.crafter.buffers.out, \'item.name\': res.name}, $event)"\r\n              ></icon-base>\r\n            </span>\r\n          </div>\r\n          <div class="row">\r\n            <span class="col">In Max: ${IgorJs.getObjId($scope.crafter.buffers.in).stackSize}</span>\r\n            <span class="col">Out Max: ${IgorJs.getObjId($scope.crafter.buffers.out).stackSize}</span>\r\n          </div>\r\n          <p click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': null, \'type.class\': null}, $event)" class="text-center">Clear recipe</p>\r\n        </div>\r\n        <div if.bind="!$scope.crafter.processing" id="recipeSelect" class="col-7">\r\n          <p>Select recipe to craft</p>\r\n          <div class="overflow recipe">\r\n            <icon-base\r\n              repeat.for="rec of ChameView.viewFn.recipeFilter($scope.crafter.crafting_categories) | objectValues & signal:\'techResearched\'"\r\n              item.bind="rec"\r\n              click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': rec, \'type.class\': \'crafting\'}, $event)"\r\n              class="${rec==$scope.crafter.processing ? \'selected\': \'\'}"\r\n              mouseenter.bind="(tooltip = rec) & debounce:2000"\r\n              mouseleave.bind="(tooltip = null) & debounce:2000"\r\n            ></icon-base>\r\n          </div>\r\n        </div>\r\n        <div class="col-5">\r\n          <compose view="resources/elements/byModule/upgrades-infopane.html"></compose>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="row mx-0">\r\n    <div class="col">\r\n      <compose view="resources/elements/byModule/workshop-controls.html"></compose>\r\n    </div>\r\n  </div>\r\n</template>\r\n'},"resources/elements/byModule/lab-infopane.html":function(e,r,n){e.exports='<template>\r\n  <scope-var var.bind="$scope = {lab: viewPane.showingItem}"></scope-var>\r\n  <require from="./upgrades-infopane"></require>\r\n  <div class="container">\r\n    Max Buffer: ${IgorJs.getObjId($scope.lab.buffers.in).stackSize}\r\n    <div class="row">\r\n      <div class="col">\r\n        <div\r\n          class="labInput progressBarBase"\r\n          click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.lab.buffers.in)"\r\n          css="border-image-source: linear-gradient(to left, red ${$scope.lab.research_timer/$scope.lab.research_time*100}%, green ${$scope.lab.research_timer/$scope.lab.research_time*100}%)"\r\n        >\r\n          <icon-base\r\n            repeat.for="input of $scope.lab.inputs"\r\n            item.bind="input"\r\n            count.bind="CCC.utilityFn(\'inventory.total\', $scope.lab.buffers.in, {name: input}) & signal:\'bufferUpdate\'"\r\n            click.delegate="CCC.issue(\'entity.bufferFill\', {\'item.name\': input}, $event)"\r\n            title="Click to add ${input}"\r\n          ></icon-base>\r\n        </div>\r\n      </div>\r\n      <div class="col">\r\n        <span if.bind="globals.research.progressing">\r\n          ${globals.research.progressing.name}<br>\r\n          [${$scope.lab.research_time/30}s]<br>\r\n          ${globals.research[globals.research.progressing.name].completeUnits}/\r\n          ${globals.research.progressing.cost.count}\r\n        </span>\r\n      </div>\r\n      <div class="col">\r\n        <compose view="resources/elements/byModule/upgrades-infopane.html"></compose>\r\n      </div>\r\n    </div>\r\n    <div class="row">\r\n      <div class="col">\r\n        <compose view="resources/elements/byModule/workshop-controls.html"></compose>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n'},"resources/elements/byModule/mining-infopane.html":function(e,r,n){e.exports='<template bindable="item">\r\n  <require from="./upgrades-infopane"></require>\r\n  <scope-var var.bind="$scope = {miner: viewPane.showingItem}"></scope-var>\r\n  <div class="container">\r\n    <div class="minable-resources row">\r\n      <div class="col-7">\r\n        <div\r\n          if.bind="!$scope.miner.processing"\r\n        >\r\n          <p>Select Resource to Mine</p>\r\n          <icon-base\r\n            repeat.for="res of dataSet.resource | filter:{key:\'category\', value:$scope.miner.resource_categories, includeUndefs: true} | objectValues"\r\n            item.bind="res"\r\n            click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': res, \'type.class\':\'mining\'}, $event)"\r\n            class="${res==$scope.miner.processing ? \'selected\': \'\'}"\r\n          ></icon-base>\r\n        </div>\r\n        <div\r\n          if.bind="$scope.miner.processing"\r\n        >\r\n          <span\r\n            click.delegate="CCC.issue(\'entity.bufferCollect\', {\'which.buffer\': $scope.miner.buffers.out, \'item.name\': $scope.miner.processing.mining_results}, $event)"\r\n            class="progressBarBase"\r\n            css="border-image-source: linear-gradient(to left, red ${$scope.miner.process_timer}%, green ${$scope.miner.process_timer}%)"\r\n          >\r\n            <icon-base\r\n              item.bind="$scope.miner.processing.mining_results"\r\n              count.bind="CCC.utilityFn(\'inventory.total\', $scope.miner.buffers.out, {name: $scope.miner.processing.mining_results}) & signal:\'bufferUpdate\'"\r\n              title="Click to collect"\r\n            ></icon-base>\r\n            /${IgorJs.getObjId($scope.miner.buffers.out).stackSize}\r\n            \x3c!-- # magic number --\x3e\r\n            [${($scope.miner.process_ticks/30).toFixed(1) }s]\r\n          </span>\r\n          <span click.delegate="CCC.issue(\'entity.setProcess\', {\'which.process\': null, \'type.class\': null}, $event)">\r\n            Change\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class="col-5">\r\n        <compose view="resources/elements/byModule/upgrades-infopane.html" entity.bind="$scope.miner" parcel.bind="$scope.miner.parent"></compose>\r\n      </div>\r\n    </div>\r\n    <div class="row">\r\n      <div class="col">\r\n        <compose view="resources/elements/byModule/workshop-controls.html"></compose>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n'},"resources/elements/byModule/tech-infopane.html":function(e,r){e.exports='<template>\r\n  <scope-var var.bind="$scope = {tech: viewPane.showingItem}"></scope-var>\r\n  <div click.capture="CCC.provide($event, \'which\', \'tech\', $scope.tech)">\r\n    <h5><icon-base item.bind="$scope.tech"></icon-base>${$scope.tech.name}</h5>\r\n    <button click.delegate="CCC.issue(\'research.set\', {}, $event)" if.bind="!globals.research.progressing && !globals.research[$scope.tech.name].complete" id="StartResearch">Research</button>\r\n    <button click.delegate="CCC.issue(\'research.clear\', {}, $event)" if.bind="globals.research.progressing.name == $scope.tech.name">Cancel</button>\r\n    <div if.bind="!globals.research[$scope.tech.name].complete & signal:\'techResearched\'">\r\n      <strong>Cost</strong>\r\n      <icon-base repeat.for="unit of $scope.tech.cost.ingredients" item.bind="unit[0]"></icon-base>\r\n      x${$scope.tech.cost.count - globals.research[$scope.tech.name].completeUnits}\r\n      <br>\r\n      <strong>Unlocks</strong>\r\n      <div repeat.for="unlock of $scope.tech.unlocks">\r\n        <icon-base if.bind="typeof unlock === \'string\'" item.bind="unlock" mouseenter.trigger="tooltip = unlock" mouseleave.trigger="tooltip = null"></icon-base>\r\n        <span if.bind="typeof unlock === \'object\'">\r\n          Feature: ${unlock.feature}<br>\r\n          ${unlock.text}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div if.bind="globals.research[$scope.tech.name].complete & signal:\'techResearched\'">\r\n      <strong>Unlocked</strong>\r\n      <div repeat.for="unlock of $scope.tech.unlocks">\r\n        <icon-base if.bind="typeof unlock === \'string\'" item.bind="unlock" mouseenter.trigger="tooltip = unlock" mouseleave.trigger="tooltip = null"></icon-base>\r\n        <span if.bind="typeof unlock === \'object\'">Feature: ${unlock.feature}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n'},"resources/elements/byModule/upgrades-infopane":function(e,r,n){"use strict";n.r(r),n.d(r,"upgradesInfopaneCustomElement",(function(){return p}));var t,i,o,s=n("aurelia-framework"),c=n("+Aae");function a(e,r,n,t){n&&Object.defineProperty(e,r,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(t):void 0})}function l(e,r,n,t,i){var o={};return Object.keys(t).forEach((function(e){o[e]=t[e]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=n.slice().reverse().reduce((function(n,t){return t(e,r,n)||n}),o),i&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(i):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(e,r,o),o=null),o}var p=(i=l((t=function(){a(this,"entity",i,this),a(this,"parcel",o,this),this.EM=c.a.entity}).prototype,"entity",[s.c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),o=l(t.prototype,"parcel",[s.c],{configurable:!0,enumerable:!0,writable:!0,initializer:null}),t)},"resources/elements/byModule/upgrades-infopane.html":function(e,r){e.exports='<template>\r\n  <scope-var var.bind="$scope.entity = viewPane.showingItem"></scope-var>\r\n  <style>\r\n    .upgrades-infopane icon-base {\r\n      width: 32px;\r\n      height: 32px;\r\n    }\r\n    .upgrades-infopane {\r\n      font-size: 0.9rem;\r\n    }\r\n  </style>\r\n  <div class="upgrades-infopane container">\r\n    <div\r\n      class="row"\r\n      if.bind="$scope.entity.buffers.in"\r\n      click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.entity.buffers.in)"\r\n      >\r\n      <div>\r\n        <scope-var var.bind="$scope.inBuffer = IgorJs.getObjId($scope.entity.buffers.in)"></scope-var>\r\n        Input Upgrades\r\n      </div>\r\n      <div>\r\n        <icon-base\r\n          item="iron-chest"\r\n          count.bind="$scope.inBuffer.upgrades.bufferSize.count"\r\n          click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'buffer\'}, $event)"\r\n          class="${$scope.inBuffer.upgrades.bufferSize.count>=6 && \'countFull\'}"\r\n        ></icon-base>\r\n        <icon-base\r\n          item="inserter"\r\n          if.bind="!parcel.isPlayer"\r\n          count.bind="$scope.inBuffer.upgrades.loader.count"\r\n          stalled.bind="$scope.inBuffer.upgrades.loader.count>0 && $scope.inBuffer.stalled"\r\n          progress.bind="($scope.inBuffer.xferTicks-$scope.inBuffer.xferTimer)/$scope.inBuffer.xferTicks*100"\r\n          click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'autoload\'}, $event)"\r\n          class="${$scope.inBuffer.upgrades.loader.count>=10 && \'countFull\'}"\r\n        ></icon-base>\r\n        <active-trigger\r\n          entity.bind="$scope.inBuffer"\r\n          tag="active"\r\n          if.bind="$scope.inBuffer.xfer>0"\r\n        ></active-trigger>\r\n      </div>\r\n    </div>\r\n    <div\r\n      class="row"\r\n      if.bind="$scope.entity.buffers.out"\r\n      click.capture="CCC.provide($event, \'which\', \'buffer\', $scope.entity.buffers.out)"\r\n    >\r\n      <div>\r\n        <scope-var var.bind="$scope.outBuffer = IgorJs.getObjId($scope.entity.buffers.out)"></scope-var>\r\n        Output Upgrades\r\n      </div>\r\n      <div>\r\n        <icon-base\r\n          item="iron-chest"\r\n          count.bind="$scope.outBuffer.upgrades.bufferSize.count"\r\n          click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'buffer\'}, $event)"\r\n          class="${$scope.outBuffer.upgrades.bufferSize.count>=6 && \'countFull\'}"\r\n        ></icon-base>\r\n        <icon-base\r\n          item="inserter"\r\n          if.bind="!parcel.isPlayer"\r\n          count.bind="$scope.outBuffer.upgrades.loader.count"\r\n          stalled.bind="$scope.outBuffer.upgrades.loader.count>0 && $scope.outBuffer.stalled"\r\n          progress.bind="(($scope.outBuffer.xferTicks-$scope.outBuffer.xferTimer)/$scope.outBuffer.xferTicks*100)"\r\n          click.delegate="CCC.issue(\'entity.bufferUpgrade\', {\'type.string\': \'autoload\'}, $event)"\r\n          class="${$scope.outBuffer.upgrades.loader.count>=10 && \'countFull\'}"\r\n        ></icon-base>\r\n        <active-trigger\r\n          entity.bind="$scope.outBuffer"\r\n          tag="active"\r\n          if.bind="$scope.outBuffer.xfer>0"\r\n        ></active-trigger>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n'},"resources/elements/byModule/workshop-controls.html":function(e,r){e.exports='<template>\r\n    <scope-var var.bind="$scope.entity = viewPane.showingItem"></scope-var>\r\n    <style>\r\n        .wc-input {\r\n            width: 2.5em\r\n        }\r\n        #work_controls {\r\n            text-align: center;\r\n        }\r\n        #work_controls .fas {\r\n            width: 32px;\r\n            height: 32px;\r\n        }\r\n        .editActive {\r\n            color: green;\r\n        }\r\n    </style>\r\n    <span\r\n        class="${$scope.editPos && \'editActive\'}"\r\n        if.bind="IgorRunner.getNamedObject(\'global\').player.workshop.entities.length-1"\r\n        click.delegate="$scope.editPos=!$scope.editPos"\r\n    >Edit Position</span>\r\n    <section id="work_controls" if.bind="$scope.editPos">\r\n        <div class="row">\r\n            <div class="col align-self-center">\r\n                Move Spaces\r\n            </div>\r\n        </div>\r\n        <div class="row">\r\n            <div class="col">\r\n                <span\r\n                    show.bind="$scope.entity.order>0"\r\n                    class="fas fa-angle-right fa-rotate-180 fa-2x"\r\n                    click.delegate="CCC.utilityFn(\'workshop.moveEntity\', null, {which: $scope.entity.$_id, to: $scope.entity.order-orderStep})"\r\n                ></span>\r\n            </div>\r\n            <div class="col">\r\n                <input type="hidden" value.one-time="orderStep = 1">\r\n                <input  class="wc-input" type="number"\r\n                min="1" max="10"\r\n                step="1" value.bind="orderStep">\r\n            </div>\r\n            <div class="col">\r\n                <span\r\n                    show.bind="$scope.entity.order<IgorRunner.getNamedObject(\'global\').player.workshop.entities.length-1"\r\n                    class="fas fa-angle-right fa-2x"\r\n                    click.delegate="CCC.utilityFn(\'workshop.moveEntity\', null, {which: $scope.entity.$_id, to: $scope.entity.order+orderStep})"\r\n                ></span>\r\n            </div>\r\n        </div>\r\n        <div class="row">\r\n            <div\r\n                class="col align-self-center"\r\n                click.delegate="CCC.issue(\'workshop.recover\', {\'which.entity\': $scope.entity.$_id}, $event)"\r\n            >\r\n                Remove Building\r\n            </div>\r\n        </div>\r\n    </section>\r\n</template>'}}]);
//# sourceMappingURL=app~fba8b1df.7cda7490e872946e936c.bundle.map